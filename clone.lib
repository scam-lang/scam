(define (clone # item)
    (cond
        ((closure? item) (cloneObjectWithContext item #))
        ((thunk? item) (cloneObjectWithContext item #))
        ((object? item) (cloneObject item))
        ((pair? item) (cloneList item))
        (else item)
        )
    )

(define (cloneObject item)
    (list 'object (cloneList (cadr item)) (cloneList (caddr item)))
    )

(define (cloneObjectWithContext item env)
    (define c (cloneObject item))
    (assign (dot c __context) env)
    c
    )

(define (cloneList items)
    (cond
        ((null? items) nil)
        ((pair? items) (cons (car items) (cloneList (cdr items))))
        (else items)
        )
    )

(define (prior f)
    (inspect (dot f code))
    (define denv (dot f __context))
    (define name (dot f name))
    (define vars (localNames denv))
    (define vals (localValues denv))
    (define started #f)
    (define found #f)
    (define result nil)
    (while (and (not found) (valid? vars))
        (define possible (car vals))
        (define cmatch (eq? possible f))
        (cond
            ((and started (eq? name (car vars)))
                (assign found #t)
                (assign result possible)
                )
            (match (assign started #t))
            )
        (assign vars (cdr vars))
        (assign vals (cdr vals))
        )
    result
    )

(define (f) (println 1))
(define (f) (println 2))
(define (f) (println 3))
(define (f) (println 4))
(pp this)
(f)
(assign f (prior f))
(f)
(assign f (prior f))
(f)
(assign f (prior f))
(f)
(assign f (prior f))
(f)
(assign f (prior f))
(f)
(assign f (prior f))
(f)
