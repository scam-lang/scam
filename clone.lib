(define (clone # item)
    (cond
        ((closure? item) (cloneObjectWithContext item #))
        ((thunk? item) (cloneObjectWithContext item #))
        ((object? item) (cloneObject item))
        ((pair? item) (cloneList item))
        (else item)
        )
    )

(define (cloneObject item)
    (list 'object (cloneList (cadr item)) (cloneList (caddr item)))
    )

(define (cloneObjectWithContext item env)
    (define c (cloneObject item))
    (assign (dot c __context) env)
    c
    )

(define (cloneList items)
    (cond
        ((null? items) nil)
        ((pair? items) (cons (car items) (cloneList (cdr items))))
        (else items)
        )
    )

