(define (id x) x)
(define (__id x) x)
(define nil? null?)
(define (valid? x) (not (null? x)))
(define (head x) (car x))
(define (tail x) (cdr x))
(define (join x y) (cons x y))

(define (for # init $test $increment $)
    (while (eval $test #)
        (evalList $ #)
        (eval $increment #)
        )
    )

(define (for-each2 # $indexVar items $)
    (define result #f)
    (while (!= items nil)
        (set! (__id $indexVar) (car items) #)
        (set! result (evalList $ #))
        (set! items (cdr items))
        )
    result
    )

(define (for-each f x)
    (define (iter items)
        (cond
            ((null? items) nil)
            (else (f (car items)) (iter (cdr items)))
            )
        )
    (iter x)
    )

(define (+= # $v value) (set! (__id $v) (+ (eval $v #) value) #))
(define (-= # $v value) (set! (__id $v) (- (eval $v #) value) #))
(define (*= # $v value) (set! (__id $v) (* (eval $v #) value) #))
(define (/= # $v value) (set! (__id $v) (/ (eval $v #) value) #))

; object-related functions

(define old-type type)

(define (type x)
    (if (and (eq? (old-type x) 'CONS) (eq? (car x) 'object))
        (get __label x)
        (old-type x)
        )
    )

(define (. # obj $)
    (while (valid? $)
        (define field (car $))
        (if (pair? field)
            (assign obj (get (eval field #) obj))
            (assign obj (get (__id field) obj))
            )
        (assign $ (cdr $))
        )
    obj
    )

(define scam.s-old-and and)
(define (and # $)
    (define (iter items)
        (cond
           ((null? items) #t)
           ((eval (car items) #) (iter (cdr items)))
           (else #f)
           )
        )
    (iter $)
    )
(define scam.s-old-or or)
(define (or # $)
    (define (iter items)
        (cond
           ((null? items) #f)
           ((eval (car items) #) #t)
           (else (iter (cdr items)))
           )
        )
    (iter $)
    )
(define (dec x) (- x 1))
(define (inc x) (+ x 1))

(define (let # $inits $)
    (define v nil)
    (define e (scope this))
    (set! __context # e)
    (for-each2 v $inits
        (addSymbol (car v) (eval (car (cdr v)) #) e)
        ;(println "adding " (car v) " from " $inits)
        ;(println "    its value is " (eval (car (cdr v)) #))
        ;(inspect e)
        )
    (evalList $ e)
    )

(define (let* # $inits $)
    (define v nil)
    (define e (scope this))
    (set! __context # e)
    (for-each2 v $inits
        (addSymbol (car v) (eval (car (cdr v)) e) e)
        )
    (evalList $ e)
    )

(define (negative? n) (< n 0))
(define (positive? n) (> n 0))

(define (newline) (println))
(define (display x) (print x))
(define remainder %)
(define (append a b)
    (cond
        ((null? a) b)
        (else (cons (car a) (append (cdr a) b)))
        )
    )
(define (last-pair x)
    (cond
        ((null? x) nil)
        ((null? (cdr x)) x)
        (else (last-pair (cdr x)))
        )
    )
(define (reverse x)
    (define (iter store rest)
        (cond
            ((null? rest) store)
            (else (iter (cons (car rest) store) (cdr rest)))
            )
        )
    (iter nil x)
    )

(define (map op @)
    (define (map1 items)
        (cond
            ((null? items) nil)
            (else (cons (op (car items)) (map1 (cdr items))))
            )
        )
    (define (iter items)
        (cond
            ((null? (car items)) nil)
            (else (cons (apply op (map car items)) (iter (map cdr items))))
            )
        )
    (cond
        ((= (length @) 1) (map1 (car @)))
        (else (iter @))
        )
    )
(define (abs x) (if (< x 0) (- x) x))
(define (even? n) (= (% n 2) 0))
(define (odd? n) (= (% n 2) 1))
(define (integer? x) (eq? (type x) 'INTEGER))
(define (real? x) (eq? (type x) 'REAL))
(define (number? x) (or (integer? x) (real? x)))
(define (string? x) (eq? (type x) 'STRING))
(define (symbol? x) (eq? (type x) 'SYMBOL))
(define (array? x) (eq? (type x) 'ARRAY))
(define (true? x) x)
(define (false? x) (not x))

(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (caddr x) (car (cdr (cdr x))))
(define (cadddr x) (car (cdr (cdr (cdr x)))))
(define (caddddr x) (car (cdr (cdr (cdr (cdr x))))))
(define (cadddddr x) (car (cdr (cdr (cdr (cdr (cdr x)))))))

(define (cddr x) (cdr (cdr x)))
(define (cdddr x) (cdr (cdr (cdr x))))
(define (cddddr x) (cdr (cdr (cdr (cdr x)))))
(define (cdddddr x) (cdr (cdr (cdr (cdr (cdr x))))))

(define (equal? a b)
    (cond
        ((null? a)
            ;(println "returning" (null? b))
            (null? b))
        ((pair? a)
            ;(println "pair returning "
            ;(and (pair? b) (equal? (car a) (car b)) (equal? (cdr a) (cdr b))))
            (and (pair? b) (equal? (car a) (car b)) (equal? (cdr a) (cdr b))))
        ((string? a)
            (string-equal? a b))
        ((array? a)
            (array-equal? a b))
        (else
            ;(println "else returning "(eq? a b))
            (eq? a b))
        )
    )

(define (array-equal? a b)
    (cond
        ((null? a) (null? b))
        ((null? b) #f)
        (else (and (equal? (car a) (car b)) (array-equal? (cdr a) (cdr b))))
        )
    )

(define (string-compare a b)
    (cond
        ((and (null? a) (null? b)) 0)
        ((null? a) (- 0 (ascii (getElement b 0))))
        ((null? b) (ascii (getElement a 0)))
        (else
            (if (== (ascii (getElement a 0)) (ascii (getElement b 0)))
                (string-compare (cdr a) (cdr b))
                (- (ascii (getElement a 0)) (ascii (getElement b 0)))
                )
            )
        )
    )

(define (sqrt x) (expt x 0.5))

(define (cons-stream # a $b)
    (cons a (lambda () (eval $b #)))
    )

(define (stream-car s) (car s))
(define (stream-cdr s) ((cdr s)))
(define (stream-null? s) (null? s))

(define (code $s) $s)

(define (member? x items)
    (valid? (member x items))
    )

(define (member x items)
    (cond
        ((null? items)
            nil
            )
        ((eq? x (car items))
            items
            )
        (else
            (member x (cdr items))
            )
        )
    )

(define (getElement items @)
    (define __getElement (get getElement (get __context __context)))
    (while (valid? @)
        (assign items (__getElement items (car @)))
        (assign @ (cdr @))
        )
    items
    )

