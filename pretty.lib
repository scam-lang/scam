(define (ppCode expr indent)
    (cond
        ((not (pair? expr)) (print indent expr) #t)
        ((closure? expr) (ppFunction expr indent) #f)
        ((eq? (car expr) 'begin) (ppBegin expr indent) #f)
        ((eq? (car expr) 'cond) (ppCond expr indent) #f)
        ((eq? (car expr) 'if) (ppTestBlock expr indent) #f)
        ((eq? (car expr) 'while) (ppTestBlock expr indent) #f)
        ((eq? (car expr) 'let) (ppTestBlock expr indent) #f)
        ((and (eq? (car expr) 'define) (pair? (cadr expr)))
            (ppFunctionDefinition expr indent) #f)
        (else (print indent expr) #t)
        )
    )
(define (ppTestBlock expr indent)
    (print indent "(" (car expr) " " (cadr expr) "\n")
    (ppCodeList (cddr expr) (string+ indent "    "))
    (print indent "    " ")\n")
    )
(define (ppBegin expr indent)
    (print indent "(" (car expr) "\n")
    (ppCodeList (cdr expr) (string+ indent "    "))
    (print indent "    " ")\n")
    )
(define (ppFunction expr indent)
    (define p)
    (print indent "(define ("(dot expr name))
    (for-each2 p (dot expr parameters)
        (print " " p)
        )
    (print ")\n")
    (ppCodeList (cdr (dot expr code)) (string+ indent "    "))
    (print indent "    " ")\n")
    )
(define (ppFunctionDefinition expr indent)
    (define p)
    (println indent "(define " (cadr expr))
    (ppCodeList (cddr expr) (string+ indent "    "))
    (print indent "    " ")\n")
    )

(define (ppCodeList expr indent)
    (while (valid? expr)
        (if (ppCode (car expr) indent)
            (println)
            )
        (assign expr (cdr expr))
        )
    )

(define (ppCond expr indent)
    (define c)
    (print indent "(cond\n")
    (for-each2 c (cdr expr)
        (print indent "    " "(" (car c) "\n")
        (ppCodeList (cdr c) (string+ indent "        "))
        (print indent "    " "    " ")\n")
        )
    (print indent "    " ")\n")
    )
