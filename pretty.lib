(define __pretty-indent "    ")

(define (pretty expr)
    (prettyIndent expr "")
    )

(define (prettyIndent expr indent)
    (define (ppTestBlock expr indent)
        (print indent "(" (car expr) " " (cadr expr) "\n")
        (ppCodeList (cddr expr) (string+ indent __pretty-indent))
        (print indent __pretty-indent ")\n")
        )
    (define (ppBlock expr indent)
        (print indent "(" (car expr) "\n")
        (ppCodeList (cdr expr) (string+ indent __pretty-indent))
        (print indent __pretty-indent ")\n")
        )
    (define (ppFunction expr indent)
        (define p)
        (print indent "(define ("(dot expr name))
        (for-all p (dot expr parameters)
            (print " " p)
            )
        (print ")\n")
        (ppCodeList (cdr (dot expr code)) (string+ indent __pretty-indent))
        (print indent __pretty-indent ")\n")
        )
    (define (ppFunctionDefinition expr indent)
        (define p)
        (println indent "(define " (cadr expr))
        (ppCodeList (cddr expr) (string+ indent __pretty-indent))
        (print indent __pretty-indent ")\n")
        )

    (define (ppCodeList expr indent)
        (while (valid? expr)
            (if (prettyIndent (car expr) indent)
                (println)
                )
            (set 'expr (cdr expr))
            )
        )

    (define (ppCond expr indent)
        (define c)
        (print indent "(cond\n")
        (for-all c (cdr expr)
            (print indent __pretty-indent "(" (car c) "\n")
            (ppCodeList (cdr c) (string+ indent "        "))
            (print indent __pretty-indent __pretty-indent ")\n")
            )
        (print indent __pretty-indent ")\n")
        )

    ;;;;; end of helper functions ;;;;

    (cond
        ((null? expr) (print indent "nil") #t)
        ((not (pair? expr)) (print indent expr) #t)
        ((closure? expr) (ppFunction expr indent) #f)
        ((eq? (car expr) 'begin) (ppBlock expr indent) #f)
        ((eq? (car expr) 'scope) (ppBlock expr indent) #f)
        ((eq? (car expr) 'cond) (ppCond expr indent) #f)
        ((eq? (car expr) 'if) (ppTestBlock expr indent) #f)
        ((eq? (car expr) 'while) (ppTestBlock expr indent) #f)
        ((eq? (car expr) 'let) (ppTestBlock expr indent) #f)
        ((and (eq? (car expr) 'define) (pair? (cadr expr)))
            (ppFunctionDefinition expr indent) #f)
        (else (print indent expr) #t)
        )
    )

(define (compile-pretty #)
    (include "compile.lib")
    (compile pretty #)
    (compile prettyIndent #)
    )
