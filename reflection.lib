

(define (defined? id env)
    (define result (catch (eval id env)))
    (not (error? result))
    )

(define (priorDefinition # name value)
    (define started #f)
    (define searching #t)
    (define result nil)
    (while (and searching (valid? #))
        (define vars (localNames #))
        (define vals (localValues #))
        (while (and searching (valid? vars))
            (cond
                ((and started (eq? name (car vars)))
                    (set 'searching #f)
                    (set 'result (car vals))
                    )
                ((and (eq? name (car vars)) (eq? value (car vals)))
                    (set 'started #t)
                    )
                )
            (set 'vars (cdr vars))
            (set 'vals (cdr vals))
            )
        (set '# (dot # __context))
        )
    result
    )

(define (prior #)
    (define f (dot # __constructor))
    (if (local? '__prior f)
        (dot f __prior)
        (throw 'reflectionException "prior field has not been set")
        )
    )
    
(define (redefine # $params $)
    (if (not (pair? $params))
        (throw 'reflectionException 
            (string+
                (fileName $params)
                ",line "
                (string (lineNumber $params))
                ": can only redefine functions")))
    (define p (car $params))
    (if (defined? p #)
        (define pf (dot # (__id p)))
        (define pf (lambda (@) #f))
        )
    (define f (eval (cons 'define (cons $params $)) #))
    (addSymbol '__prior pf f)
    f
    )


(define (clone # item)
    (cond
        ((closure? item) (cloneObjectWithContext item #))
        ((thunk? item) (cloneObjectWithContext item #))
        ((object? item) (cloneObject item))
        ((pair? item) (cloneList item))
        (else item)
        )
    )

(define (cloneObject item)
    (list 'object (cloneList (cadr item)) (cloneList (caddr item)))
    )

(define (cloneObjectWithContext item env)
    (define c (cloneObject item))
    (set '__context env c)
    c
    )

(define (cloneList items)
    (cond
        ((null? items) nil)
        ((pair? items) (cons (car items) (cloneList (cdr items))))
        (else items)
        )
    )
