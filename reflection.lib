(define (class x) (get __label x))
(define (is? x y)
    (cond
        ((null? x) #f)
        ((not (environment? x)) (eq? (type x) y))
        ((and (environment? x) (or (eq? y 'environment) (eq? y 'object))) #t)
        ((and (valid? (. x __constructor)) (eq? (. x __constructor name) y)) #t)
        (else (and (local? parent x) (is? (. x parent) y)))
        )
    )
(define (object? x) (and (pair? x) (eq? (car x) 'object)))
(define (closure? x) (and (object? x) (eq? (class x) 'closure)))
(define (thunk? x) (and (object? x) (eq? (class x) 'thunk)))
(define (error? x) (and (object? x) (eq? (class x) 'error)))
(define (environment? x) (and (object? x) (eq? (class x) 'environment)))


(define (local? # $id env)
    (if (pair? $id)
        (member? (eval $id #) (localNames env))
        (member? $id (localNames env))
        )
    )

(define (defined? # id env)
    (define result (catch (eval id #)))
    (not (error? result))
    )

(define (localNames env)
    (cadr env)
    )

(define (localValues env)
    (caddr env)
    )

