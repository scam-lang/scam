var SwayEnv = ScamEnv;
var null = nil;
function paren(expr) { expr; }
function &&(#,$x,$y) { if (eval($x,#),eval($y,#),#f); }
function ||(#,$x,$y) { if (eval($x,#),#t,eval($y,#)); }
function .(x,$y) { get($y,x); }
function =(#,$a,b)
    {
    if (symbol?($a))
        {
        set($a,b,#);
        }
    else if (list?($a) && car($a) == '.)
        {
        set(caddr($a),b,eval(cadr($a),#));
        }
    else
        {
        throw('assignmentException,string+("cannot assign to ",string($a)));
        }
    }

// Java style inheritance in three functions (really two, super is not needed)
// linear time

function __resetClosures(static,obj)
    {
    function update(current,rest)
        {
        if (closure?(current))
            {
            //println("setting context of ",current," to ",static);
            set('__context,static,current);
            }
        if (rest != nil) { update(car(rest),cdr(rest)); }
        }
    var values = cdr(cdr(cdr(cdr(cdr(localValues(obj))))));
    //println("locals are ",values);
    if (values != nil) { update(car(values),cdr(values)); }
    obj;
    }
function __inherit(child,parents,reification,static)
    {
    if (null?(parents))
        {
        set('__context,static,child);
        }
    else
        {
        set('__context ,
                __inherit(__resetClosures(reification,car(parents)),
                       cdr(parents),reification,static),
                child);
        }
    child;
    }
function new(child)
    {
    function chain(x) { if (null?(x),nil,cons(x,chain(get('parent,x)))); }
    __inherit(child,chain(get('parent,child)),child,get('__context,child));
    }
function super(child)
    {
    get('__context,child);
    }
function extend(#,parent)
    {
    var top = 
        if(local?('__inherit-top,parent),get('__inherit-top,parent),parent);
    
    //println("in extend...");
    addSymbol('__inherit-top,top,#);
    
    set('__context,get('__context,#),top);
    set('__context,parent,#);
    #;
    }
function mixin(object,@)
    {
    __inherit(object,@,object,get('__context,object));
    }

var __pretty-indent = "    ";

function pretty(expr,@)
    {
    function vardef(item)
        {
        print(car(item));
        if (valid?(cdr(item)))
            {
            print(" = ");
            expression(cadr(item));
            }
        }
    function definition(expr,indent)
        {
        if (car(expr) == 'begin)
            {
            print(indent,"var ");
            expr = cdr(expr);
            while (expr != null)
                {
                var item = car(expr);
                vardef(cdr(item));
                if (valid?(cdr(expr)))
                    {
                    print(",");
                    }
                expr = cdr(expr);
                }
            println(";");
            }
        else if (list?(cadr(expr))) // function definition
            {
            print(indent,"function ",car(cadr(expr)));
            args(cdr(cadr(expr)));
            block(cdr(expr),string+(indent,__pretty-indent));
            }
        else
            {
            print(indent,"var ");
            vardef(cdr(expr));
            println(";");
            }
        }
    function args(a)
        {
        print("(");
        while (a != null)
            {
            expression(car(a));
            a = cdr(a);
            if (a != null,print(","));
            }
        print(")");
        }
    function closure(expr,indent)
        {
        print(indent,"function ",expr . name);
        args(get('parameters,expr));
        print("\n");
        block(get('code,expr),string+(indent,__pretty-indent));
        }
    function block(expr,indent)
        {
        print(indent,"{\n");
        statements(cdr(expr),indent);
        print(indent,"}\n");
        }
    function statements(expr,indent)
        {
        var xtype,item;
        while (expr != null)
            {
            item = car(expr);
            //inspect(item);
            if (list?(item))
                {
                if (car(item) == 'define)
                    {
                    definition(item,indent);
                    }
                else if (car(item) == 'begin) // multiple definition
                    {
                    definition(item,indent);
                    }
                else if ((xtype = xcall?(item)) > 0)
                    {
                    xCall(item,indent,indent,xtype);
                    }
                else 
                    {
                    print(indent);
                    expression(item);
                    println(";");
                    }
                }
            else
                {
                println(indent,item,";");
                }
            expr = cdr(expr);
            }
        }
    function expression(item)
        {
        //inspect(item);
        //inspect(atom?(item));
        if (null?(item))
            {
            print("null");
            }
        else if (string?(item))
            {
            print("\"",item,"\"");
            }
        else if (atom?(item))
            {
            print(item);
            }
        else if (length(item) == 3 && symbol?(car(item)) && length(car(item)) <= 2)
            {
            expression(cadr(item));
            print(" ");
            expression(car(item));
            print(" ");
            expression(caddr(item));
            }
        else
            {
            expression(car(item));
            args(cdr(item));
            }
        }
        function xCall(expr,indent1,indent2,xtype)
            {
            var args,count;
            print(indent1,car(expr)," (");
            args = cdr(expr);
            count = length(args) - if(xtype > 1,2,1);
            while (count > 0)
                {
                expression(car(args));
                args = cdr(args);
                count -= 1;
                if (count > 0,print(","));
                }
            print(")\n");
            block(car(args),indent2 string+ __pretty-indent);
            if (xtype == 2)
                {
                println(indent2,"else");
                block(cadr(args),indent2 string+ __pretty-indent);
                }
            else if (xtype == 3)
                {
                print(indent2,"else ");
                xCall(cadr(args),"",indent2,xcall?(cadr(args)));
                }
            }
        function xcall?(item)
            {
            while (item != null)
                {
                if (block?(car(item)))
                    {
                    if (null?(cdr(item)),return 1);
                    if (null?(cddr(item)))
                        {
                        if (block?(cadr(item)),return 2);
                        if (xcall?(cadr(item)),return 3);
                        }
                    }
                item = cdr(item);
                }
            return 0;
            }
        function block?(expr)
            {
            list?(expr) && (car(expr) == 'scope || car(expr) == 'begin);
            }
    var indent = if(valid?(@),car(@),"");
    if (closure?(expr))
        {
        inspect(expr);
        closure(expr,indent);
        }
    else if (object?(expr))
        {
        ppTable(expr);
        }
    else
        {
        pp(expr);
        }
    }
