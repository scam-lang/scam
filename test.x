(define (inspect $x)
    (println (get 'code $x) " is " (eval (get 'code $x) (get 'context $x)))
    )

(cond
    ('#f (println "oops"))
    ('#f (println "oops2"))
    (else (println "yay!"))
    )

(println "hello")
(define z 20)
(define (square x) (+ x x))
(define (fib n)
    (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))
    )
(define (climb x)
   (println "x is " x)
   (climb (+ x 1))
   )

(define i 0)
(while (< i z)
    (println "i is " i)
    (set! (quote i) (+ i 1))
    )

(define (calling ^)
    ^
    )
(inspect (calling))

(define obj (scope (define z 3) this))
;(climb 0)
;(println "fib(" z ") is " (fib z))
(println "---")
(println (get 'z))
(println "---")
(println (get 'z this))
(println (get 'z obj))
(set! 'z 4 obj)
(println (get 'z))
(println (get 'z this))
(println (get 'z obj))
(inspect (% 5 3 2))
(inspect (cons 2 4))
'done
