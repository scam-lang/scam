OLD vs. NEW
adders.s
------------------------------------------
88,90c88,90
< 0       1       1       0
< 1       0       1       0
< 1       1       0       1
---
> 0       1       0       0
> 1       0       0       0
> 1       1       0       0
94,100c94,100
< 0       0       1       1       0
< 0       1       0       1       0
< 0       1       1       0       1
< 1       0       0       1       0
< 1       0       1       0       1
< 1       1       0       0       1
< 1       1       1       1       1
---
> 0       0       1       0       0
> 0       1       0       0       0
> 0       1       1       0       0
> 1       0       0       0       0
> 1       0       1       0       0
> 1       1       0       0       0
> 1       1       1       0       0
------------------------------------------
agenda.s
------------------------------------------
------------------------------------------
apply.s
------------------------------------------
------------------------------------------
a.s
------------------------------------------
------------------------------------------
bad.s
------------------------------------------
------------------------------------------
block.s
------------------------------------------
------------------------------------------
call.s
------------------------------------------
------------------------------------------
catch.s
------------------------------------------
------------------------------------------
chain.s
------------------------------------------
------------------------------------------
common2.s
------------------------------------------
6,7c6,7
< ((label environment) (context <object 4685>) (level 0) (constructor nil) (this <object 8372>) (common <object 8450>) (__included_common2.s #t))
< ((label environment) (context <object 8372>) (level 0) (constructor nil) (this <object 8450>) (count 0))
---
> ((__label environment) (__context <object 4708>) (__level 0) (__constructor nil) (this <object 11168>) (common <object 11246>) (__included_common2.s #t))
> ((__label environment) (__context <object 11168>) (__level 0) (__constructor nil) (this <object 11246>) (count 0))
------------------------------------------
common3.s
------------------------------------------
------------------------------------------
common4.s
------------------------------------------
------------------------------------------
common5.s
------------------------------------------
------------------------------------------
common.s
------------------------------------------
------------------------------------------
defined.s
------------------------------------------
------------------------------------------
env.s
------------------------------------------
11d10
< TERM
12a12
> TERM
20,21d19
< SESSION_MANAGER
< USERNAME
22a21,22
> USERNAME
> SESSION_MANAGER
24d23
< PATH
25a25
> PATH
28d27
< GNOME_KEYRING_PID
30c29
< GDM_LANG
---
> GNOME_KEYRING_PID
31a31
> GDM_LANG
35d34
< SHLVL
36a36
> SHLVL
40d39
< XDG_DATA_DIRS
41a41
> XDG_DATA_DIRS
44d43
< VIMRUNTIME
47d45
< VIM
49d46
< COLORTERM
50a48
> COLORTERM
------------------------------------------
error0.s
------------------------------------------
34c34
< 2 seconds
---
> 1 seconds
------------------------------------------
except2.s
------------------------------------------
------------------------------------------
except3.s
------------------------------------------
------------------------------------------
except4.s
------------------------------------------
6c6
<         (if (== (get code result) 'undefinedVariable)
---
>         (if (== (get 'code result) 'undefinedVariable)
------------------------------------------
except.s
------------------------------------------
------------------------------------------
extend.s
------------------------------------------
------------------------------------------
extension.s
------------------------------------------
------------------------------------------
fact.s
------------------------------------------
------------------------------------------
fib-opt.s
------------------------------------------
1,2d0
< include("fact.s");
< 
4,16c2,10
<     {
<     if (n < 2)
<         {
<         n;
<         }
<     else
<         {
<         fib(n - 1) + fib(n - 2);
<         }
<     }
< var x = 0;
< var result;
< var t = time();
---
>     (if (< n 2)
>         n
>         (+ (fib (- n 1)) (fib (- n 2)))
>         )
>     )
> 
> (define x 0)
> (define result)
> (define t (time))
18c12
< x = 22;
---
> x = 26;
36,37c30,31
< fib(22) is 17711
< 1 seconds
---
> EXCEPTION: syntaxException
> file fib-opt.s,line 6: expecting END_OF_INPUT, found CLOSE_PARENTHESIS instead
------------------------------------------
fib.s
------------------------------------------
16,17c16,17
< (set! 'x 10)
< (set! 'result (fib x))
---
> (set! x 10)
> (set! result (fib x))
------------------------------------------
foreach.s
------------------------------------------
25,32c25,26
< i is 1
< i is 2
< i is 3
< i is 4
< a[2] is 1
< a[2] is 2
< a[2] is 3
< a[2] is 4
---
> EXCEPTION: undefinedVariable
> file foreach.s,line 1: variable function is undefined
------------------------------------------
for.s
------------------------------------------
35,44c35,36
< the value of i is 1
< the value of i is 3
< the value of i is 5
< the value of i is 7
< the value of i is 9
< the value of i is 1
< the value of i is 3
< the value of i is 5
< the value of i is 7
< the value of i is 9
---
> EXCEPTION: undefinedVariable
> file for.s,line 1: variable var is undefined
------------------------------------------
f.s
------------------------------------------
23,24c23,24
< f(10) is 3628800
< g(10) is 3628800
---
> EXCEPTION: nonFunction
> file f.s,line 1: attempted to call STRING as a function
------------------------------------------
function.s
------------------------------------------
1,55c1,36
< function parameterListMaker($)
<     {
<     var vars = :null;
< 
<     while ($ != :null)
<         {
<         vars = vars + list($ . 0 . code);
<         $ = tail($);
<         }
< 
<     vars;
<     }
< 
< function named-lambda($name,params,$body)
<     {
<     var $p = thunk(0,$name . context);
< 
<     $p . code = params;
< 
<     __function__($name,$p,$body);
<     }
< 
< function loadAndgo($name,params,values,$body)
<     {
<     var f = named-lambda($name,params,$body);
< 
<     apply(f,values);
<     }
< 
< loadAndgo(countdown,parameterListMaker(a),list(4))
<     {
<     inspect(a);
<     if (a > 0)
<         {
<         countdown(a - 1);
<         }
<     }
< 
< loadAndgo(countdown,list(:a),list(4))
<     {
<     inspect(a);
<     if (a > 0)
<         {
<         countdown(a - 1);
<         }
<     }
< 
< (named-lambda(countdown,list(:a),
<     {
<     inspect(a);
<     if (a > 0)
<         {
<         countdown(a - 1);
<         }
<     }))(4);
---
> (define (define-function name params body env)
>     (define donor (lambda () 1))
>     (set! 'name name donor)
>     (set! 'parameters params donor)
>     (set! 'code body donor)
>     (addSymbol name donor env)
>     )
> 
> (define (loadAndgo # $name params values $body)
>     (define f (define-function $name params $body #))
>     (apply f values)
>     )
> 
> (println "first load and go...");
> (loadAndgo countdown '(a) '(4)
>     (begin
>         (inspect a)
>         (if (> a 0) (countdown (- a 1)))
>         )
>     )
> 
> (println "second load and go...")
> (loadAndgo countdown '(b) '(3)
>     (begin
>         (inspect b)
>         (if (> b 0) (countdown (- b 1)))
>         )
>     )
> 
> (println "calling define-function directly...")
> ((define-function 'countdown '(a)
>     '(begin
>         (inspect a)
>         (if (> a 0) (countdown (- a 1)))
>         )
>     this) 4)
57,71c38,40
< a is 4
< a is 3
< a is 2
< a is 1
< a is 0
< a is 4
< a is 3
< a is 2
< a is 1
< a is 0
< a is 4
< a is 3
< a is 2
< a is 1
< a is 0
---
> first load and go...
> EXCEPTION: generalException
> file function.s,line 3: set identifier resolved to type CONS, not SYMBOL
------------------------------------------
gc.s
------------------------------------------
1,3c1,2
< function f(x)
<     {
<     var y = x * x;
---
> (define (f x)
>     (define y (* x x))
5c4
<     gc();
---
>     (gc)
7,10c6,9
<     println("f is ", f);
<     println("x is ", x);
<     println("y is ", y);
<     }
---
>     (inspect f)
>     (inspect x)
>     (inspect y)
>     )
12c11
< f(3);
---
> (f 3)
13a13
> gc:1, 6173 cells
------------------------------------------
g.s
------------------------------------------
1,3c1,2
< function g(n)
<     {
<     var total = 1;
---
> (define (g n)
>     (define total 1)
5,9c4,7
<     while (n > 1)
<         {
<         total = total * n;
<         n = n - 1;
<         }
---
>     (while (> n 1)
>         (set! 'total (* total n))
>         (set! 'n (- n 1))
>         )
11,12c9,10
<     total;
<     }
---
>     total
>     )
14c12
< var x = 10;
---
> (define x 10)
16c14
< print("g(",x,") is ", g(x), "\n");
---
> (print "g(" x ") is " (g x) "\n")
18c16,17
< g(10) is 3628800
---
> EXCEPTION: generalException
> file g.s,line 5: set identifier resolved to type CONS, not SYMBOL
------------------------------------------
heapsort.s
------------------------------------------
1c1,2
< include("basics");
---
> (define (heap items op)
>     (define size (length items))
3,21c4,17
< function heap(items,op)
<     {
<     var size = length(items);
< 
<     function leftChild(x) { 2 * x + 1; }
<     function rightChild(x) { 2 * x + 2; }
<     function deleteMin()
<         {
<         var temp = items[0];
<         items[0] = items[size - 1];
<         items[size - 1] = temp;
<         size = size - 1;
<         heapify(0);
<         temp;
<         }
<     function heapify(root)
<         {
<         var extreme;
<         var newRoot;
---
>     (define (leftChild x) (+ (* 2 x) 1))
>     (define (rightChild x) (+ (* 2 x) 2))
>     (define (deleteExtreme)
>         (define temp (getElement items 0))
>         (setElement! items 0 (getElement items (- size 1)))
>         (setElement! items (- size 1) temp)
>         (set! 'size (- size 1))
>         (heapify 0)
>         temp
>         )
> 
>     (define (heapify root)
>         (define extreme nil)
>         (define newRoot nil)
23c19
<         if (leaf?(root)) { return :ok; }
---
>         (if (leaf? root) (return 'ok))
25c21
<         extreme = findExtremalChild(root);
---
>         (set! 'extreme (findExtremalChild root))
27c23
<         if (extreme == items[root]) { return :ok; }
---
>         (if (== extreme (getElement items root)) (return 'ok))
29,92c25,79
<         if (extreme == items[leftChild(root)])
<             {
<             newRoot = leftChild(root);
<             }
<         else
<             {
<             newRoot = rightChild(root);
<             }
<         items[newRoot] = items[root];
<         items[root] = extreme;
<         heapify(newRoot);
<         }
<     function findExtremalChild(root)
<         {
<         var extreme;
< 
<         extreme = extremal(op,items[root],items[leftChild(root)]);
< 
<         if (rightChild(root) >= size)
<             {
<             extreme;
<             }
<         else
<             {
<             extremal(op,extreme,items[rightChild(root)]);
<             }
<         }
<     function build-heap()
<         {
<         var i;
< 
<         for (i = size - 1, i >= 0, i = i - 1)
<             {
<             heapify(i);
<             }
<         }
< 
<     function leaf?(x)
<         {
<         leftChild(x) >= size;
<         }
< 
<     build-heap();
<     this;
<     }
< 
< function heap-sort(items,op)
<     {
<     var i;
<     var h;
< 
<     h = heap(items,op);
< 
<     while (h . size > 0)
<         {
<         print(h . deleteMin());
<         if (h . size > 0,print(" "));
<         }
<     }
< 
< function extremal(op,a,b)
<     {
<     if (a op b,a,b);
<     }
---
>         (if (== extreme (getElement items (leftChild root)))
>             (set! 'newRoot (leftChild root))
>             (set! 'newRoot (rightChild root))
>             )
> 
>         (setElement! items newRoot (getElement items root))
>         (setElement! items root extreme)
>         (heapify newRoot)
>         )
> 
>     (define (findExtremalChild root)
>         (define extreme nil)
>         (set! 'extreme 
>             (extremal op
>                 (getElement items root)
>                 (getElement items (leftChild root))))
> 
>         (if (>= (rightChild root) size)
>             extreme
>             (extremal op extreme (getElement items (rightChild root)))
>             )
>         )
> 
>     (define (build-heap)
>         (define i nil)
>         (for (set! 'i (- size 1)) (>= i 0) (set! 'i (- i 1))
>             (println "heapifying element " i)
>             (heapify i)
>             (println "element " i " has been heapified")
>             )
>         )
> 
>     (define (leaf? x) (>= (leftChild x) size))
> 
>     (println "about to build-heap...")
>     (build-heap)
>     this
>     )
> 
> (define (heap-sort items op)
>     (define i nil)
>     (define h nil)
> 
>     (set! 'h (heap items op))
> 
>     (while (> (get 'size h) 0)
>         (print ((get 'deleteExtreme h)))
>         (if (> (get 'size h) 0) (print " "))
>         )
>     (println "\n")
>     )
> 
> (define (extremal op a b)
>     (if (op a b) a b)
>     )
94c81
< var a = array(3,6,3,9,4,10,5,29,4,6,0,20,25,16,88,0,31);
---
> (define a (array 3 6 3 9 4 10 5 29 4 6 0 20 25 16 88 0 31))
96,97c83
< heap-sort(a,>);
< println("\n");
---
> (heap-sort a >)
99,100c85,86
< inspect(a);
< inspect(extremal . parameters);
---
> (inspect a)
> (inspect (get 'parameters extremal))
102,105c88,90
< 88 31 29 25 20 16 10 9 6 6 5 4 4 3 3 0 0
< 
< a is [0,0,3,3,4,4,5,6,6,9,10,16,20,25,29,31,88]
< extremal . parameters is (op,a,b)
---
> about to build-heap...
> EXCEPTION: generalException
> file heapsort.s,line 50: set identifier resolved to type CONS, not SYMBOL
------------------------------------------
hide.s
------------------------------------------
37,41c37,38
< EVALUATION ERROR: :restrictedAssignment
< hide.s,line 7: you are only allowed to assign to simple variables
< 4
< 13
< 13
---
> EXCEPTION: nonFunction
> file hide.s,line 1: attempted to call STRING as a function
------------------------------------------
hook2.s
------------------------------------------
16,18c16,17
< about to greet...
< intercepted! initializer is hello, world!
< hello, world!
---
> EXCEPTION: undefinedVariable
> file hook2.s,line 1: variable function is undefined
------------------------------------------
hook.s
------------------------------------------
15,17c15,16
< Intercepted!
< about to greet...
< hello, world!
---
> EXCEPTION: undefinedVariable
> file hook.s,line 1: variable function is undefined
------------------------------------------
if2.s
------------------------------------------
27c27,28
< three *is* less than 4!
---
> EXCEPTION: undefinedVariable
> file if2.s,line 1: variable var is undefined
------------------------------------------
if3.s
------------------------------------------
47,63c47,48
< EVALUATION ERROR: :argumentCountError
< if3.s,line 8: too many arguments to if
< the test is true
< naughts!
< the test is false
< the test is true
< onesies!
< the test is false
< the test is false
< the test is true
< binary!
< the test is false
< the test is false
< the test is false
< the test is true
< trinary!
< call if with too many arguments
---
> EXCEPTION: undefinedVariable
> file if3.s,line 1: variable var is undefined
------------------------------------------
if4.s
------------------------------------------
26,45c26,27
< function (test,$tBranch,$fBranch)
<     {
<     var oldIf = context . context . if;
<     print("the test is ",test,"
< ");
<     oldIf (test)
<         {
<         while (:false)
<             {
<             println("huh");
<             }
<         force($tBranch);
<         }
<     else
<         {
<         force($fBranch);
<         }
<     }
< the test is true
< three *is* less than 4!
---
> EXCEPTION: undefinedVariable
> file if4.s,line 1: variable var is undefined
------------------------------------------
if5.s
------------------------------------------
24c24,25
< 3 is less than 4!
---
> EXCEPTION: undefinedVariable
> file if5.s,line 1: variable var is undefined
------------------------------------------
if.s
------------------------------------------
33,35c33,34
< enter 0, 1, or 2: 
< you entered 3
< can't follow directions, can you?
---
> EXCEPTION: undefinedVariable
> file if.s,line 1: variable //overload is undefined
------------------------------------------
lhs.s
------------------------------------------
30,33c30,31
< z is 3 (should be 3)
< xobj's a is z (should be z)
< z now is 5 (should be 5)
< xobj's a now is q (should be q)
---
> EXCEPTION: undefinedVariable
> file lhs.s,line 1: variable var is undefined
------------------------------------------
linecheck.s
------------------------------------------
186,188c186,187
< done
< even
< cleaning up...
---
> EXCEPTION: lexicalException
> file linecheck.s,line 64: misformed number (1])
------------------------------------------
list.s
------------------------------------------
98,113c98,99
< [ ]
< [ 4 ]
< [ 3 ]
< [ 3 4 ]
< [ 2 ]
< [ 2 4 ]
< [ 2 3 ]
< [ 2 3 4 ]
< [ 1 ]
< [ 1 4 ]
< [ 1 3 ]
< [ 1 3 4 ]
< [ 1 2 ]
< [ 1 2 4 ]
< [ 1 2 3 ]
< [ 1 2 3 4 ]
---
> EXCEPTION: syntaxException
> file list.s,line 97: expecting CLOSE_PARENTHESIS, found END_OF_INPUT instead
------------------------------------------
logic.s
------------------------------------------
1,62c1,42
< function AND(in1, in2, out, agenda)
<     {
<     var delay = 4; //milliseconds
<     function recalculate()
<         {
<         if (in1 . get() == 1 && in2 . get() == 1)
<             {
<             agenda . schedule(out . set(1), delay);
<             }
<         else
<             {
<             agenda . schedule(out . set(0), delay);
<             }
<         }
< 
<     in1 . register(this);
<     in2 . register(this);
<     recalculate();
<     this;
<     }
< 
< 
< function OR(in1, in2, out, agenda)
<     {
<     var delay = 3; //milliseconds
<     function recalculate()
<         {
<         if (in1 . get() == 1 || in2 . get() == 1)
<             {
<             agenda . schedule(out . set(1), delay);
<             }
<         else
<             {
<             agenda . schedule(out . set(0), delay);
<             }
<         }
< 
<     in1 . register(this);
<     in2 . register(this);
<     this;
<     }
< 
< 
< function NOT(in, out, agenda)
<     {
<     var delay = 1; //milliseconds
<     function recalculate()
<         {
<         if (in . get() == 0)
<             {
<             agenda . schedule(out . set(1), delay);
<             }
<         else
<             {
<             //println("output is 0");
<             agenda . schedule(out . set(0), delay);
<             }
<         }
< 
<     in . register(this);
<     this;
<     }
---
> (define (AND in1 in2 out agenda)
>     (define delay 4)  ;milliseconds
>     (define (recalculate)
>         (if (and (== ((. in1 get)) 1) (== ((. in2 get)) 1))
>             ((. agenda schedule) ((. out set) 1) delay)
>             ((. agenda schedule) ((. out set) 0) delay)
>             )
>         )
> 
>     ((. in1 register) this)
>     ((. in2 register) this)
>     (recalculate)
>     this
>     )
> 
> 
> (define (OR in1 in2 out agenda)
>     (define delay 3) ;milliseconds
>     (define (recalculate)
>         (if (or (== ((. in1 get)) 1) (== ((. in2 get)) 1))
>             ((. agenda schedule) ((. out set) 1) delay)
>             ((. agenda schedule) ((. out set) 0) delay)
>             )
>         )
> 
>     ((. in1 register) this)
>     ((. in2 register) this)
>     this
>     )
> 
> (define (NOT in out agenda)
>     (define delay 1)  ;milliseconds
>     (define (recalculate)
>         (if (== ((. in get)) 0)
>             ((. agenda schedule) ((. out set) 1) delay)
>             ((. agenda schedule) ((. out set) 0) delay)
>             )
>         )
> 
>     ((. in register) this)
>     this
>     )
------------------------------------------
map.s
------------------------------------------
45,56c45,46
< mapping [ 1 2 3 4 ] 
< mapping [ 2 3 4 ] 
< mapping [ 3 4 ] 
< mapping [ 4 ] 
< mapping [ ] 
< returning null
< joining 16 with null
< joining 9 with (16)
< joining 4 with (9,16)
< joining 1 with (4,9,16)
< [ 1 2 3 4 ] 
< [ 1 4 9 16 ] 
---
> EXCEPTION: undefinedVariable
> file map.s,line 1: variable var is undefined
------------------------------------------
matrixproblem.s
------------------------------------------
27,28c27,28
< length(mat) is 10
< length(mat) is 20
---
> EXCEPTION: nonFunction
> file matrixproblem.s,line 1: attempted to call STRING as a function
------------------------------------------
object3.s
------------------------------------------
49,68c49,56
< (locals b) is (__label __context __level __constructor this parent x)
< (local? parent b) is #t
< (local? Parent b) is #f
< a . x is 4
< (. a x) is 4
< <object 10983>
<              __label  : closure
<            __context  : <object 9029>
<                 name  : alpha
<           parameters  : (x)
<                 code  : (begin (define parent nil) this)
< (. (. a __constructor) name) is alpha
< (. b x) is 5
< (. (. b __constructor) name) is alpha
< (is? a (quote alpha)) is #t
< (is? b (quote alpha)) is #t
< (is? b (quote beta)) is #f
< (is? c (quote beta)) is #t
< (is? c (quote alpha)) is #t
< (is? c (quote gamma)) is #f
---
> (locals b) is <object 25378>
>              __label  : throw
>                 code  : undefinedVariable
>                value  : "file object3.s,line 25: variable locals is undefined"
>                trace  : ((locals b))
> 
> EXCEPTION: undefinedVariable
> file object3.s,line 25: variable locals is undefined
------------------------------------------
object.s
------------------------------------------
36c36
< z is <object 9629>
---
> z is <object 13258>
38c38
<            __context  : <object 9516>
---
>            __context  : <object 11655>
41c41
<                 this  : <object 9629>
---
>                 this  : <object 13258>
------------------------------------------
obj.s
------------------------------------------
------------------------------------------
overlay.s
------------------------------------------
------------------------------------------
overload.s
------------------------------------------
15,19c15,16
< local + is <function +(x,y)>
< non-local + is <function +(x,y)>
< non-non-local + is <function +(a,b)>
< shadowed + is <function +(a,b)>
< x is 7
---
> EXCEPTION: nonFunction
> file overload.s,line 1: attempted to call STRING as a function
------------------------------------------
p1.s
------------------------------------------
16,18c16,17
< in overridden +
< 3
< hello, world
---
> EXCEPTION: undefinedVariable
> file p1.s,line 1: variable var is undefined
------------------------------------------
pp.s
------------------------------------------
54,99c54,55
< function f(a,b,c)
<     {
<     var x;
<     if (true)
<         {
<         var x = 3;
<         var y = 4;
<         print(x);
<         print(y);
<         while (x > y)
<             {
<             x = x - 1;
<             y = y + 1;
<             }
<         }
<     else if (false)
<         {
<         :ok;
<         }
<     else if (true)
<         {
<         :ok;
<         }
<     else
<         {
<         print("huh?");
<         }
<     return :oops;
<     }
< function mv(m,v)
<     {
<     function q()
<         {
<         x;
<         }
<     function h()
<         {
<         3 * 3;
<         }
<     map(function (r) { r dot-product v; },m);
<     }
< ["pp.s"]
< <THUNK 7272>:
<     context: <OBJECT 984>
<     code: hello + goodbye
< 
---
> EXCEPTION: syntaxException
> file pp.s,line 53: expecting CLOSE_PARENTHESIS, found END_OF_INPUT instead
------------------------------------------
pq.s
------------------------------------------
32,52c32,33
< enqueueing: 3
<     first item is 3
<     first rank is 6
< enqueueing: 2
<     first item is 2
<     first rank is 4
< enqueueing: 0
<     first item is 0
<     first rank is 0
< enqueueing: 1
<     first item is 0
<     first rank is 0
< enqueueing: 4
<     first item is 0
<     first rank is 0
< 
< dequeueing: 0
< dequeueing: 1
< dequeueing: 2
< dequeueing: 3
< dequeueing: 4
---
> EXCEPTION: nonFunction
> file pq.s,line 1: attempted to call STRING as a function
------------------------------------------
priorityQueue.s
------------------------------------------
1,7c1,5
< function priorityQueue()
<     {
<     var items;
<     function bundle(data,rank,next) { return this; }
<     function dequeue()
<         {
<         var item;
---
> (define (priorityQueue)
>     (define items)
>     (define (bundle data rank next) this)
>     (define (dequeue)
>         (define item)
9,17c7,14
<         item = items . next . data;
<         items . next = items . next . next;
<         return item;
<         }
<     function enqueue(item,rank)
<         {
<         var prefix = items;
<         var suffix = items . next;
<         var package = bundle(item,rank,:null);
---
>         (assign item (. items next data))
>         (assign (. items next) (. items next next))
>         item
>         )
>     (define (enqueue item rank)
>         (define prefix items)
>         (define suffix (. items next))
>         (define package (bundle item rank nil))
19,23c16,19
<         while (suffix != :null && rank >= suffix . rank)
<             {
<             prefix = suffix;
<             suffix = suffix . next;
<             }
---
>         (while (and (valid? suffix) (>= rank (. suffix rank)))
>             (assign prefix suffix)
>             (assign suffix (. suffix next))
>             )
25,30c21,26
<         prefix . next = package;
<         package . next = suffix;
<         }
<     function peekItem() { return items . next . data; }
<     function peekRank() { return items . next . rank; }
<     function empty()    { return items . next == :null; }
---
>         (assign (. prefix next) package)
>         (assign (. package next) suffix)
>         )
>     (define (peekItem) (. items next data))
>     (define (peekRank) (. items next rank))
>     (define (empty)    (null? (. items next)))
32,34c28,30
<     items = bundle(:null,:null,:null); //dummy head node
<     this;
<     }
---
>     (assign items (bundle nil nil nil))  ;dummy head node
>     this
>     )
------------------------------------------
prior.s
------------------------------------------
19,20c19,20
< well, hello there!
< hi,all!
---
> EXCEPTION: undefinedVariable
> file prior.s,line 1: variable function is undefined
------------------------------------------
rb.s
------------------------------------------
1,365c1,330
< include("debug");
< 
< var root = :null;
< 
< function node(value,left,right)
<     {
<     var parent;
<     var color;
< 
<     function display()
<         {
<         println("value:  ", value);
<         println("left:   ", left);
<         println("right:  ", right);
<         println("parent: ", parent);
<         println("color:  ", color);
<         }
< 
<     this;
<     }
< 
< function printTree(t)
<     {
<     function iter(r, indent)
<         {
<         if (r == :null)
<             {
<             println("null");
<             }
<         else
<             {
<             println(r . value, "(", r . color, ")");
<             print(indent, "left:  ");
<             iter(r . left,indent + "    ");
<             print(indent, "right: ");
<             iter(r . right,indent + "    ");
<             }
<         }
< 
<     iter(t, "   ");
<     }
< 
< function insert(t, v, op)
<     {
<     if (t == :null)
<         {
<         root = node(v,:null,:null);
<         root . parent = root;
<         insertionFixup(root);
<         }
<     else
<         {
<         var lessThan = v op t . value;
< 
<         if (lessThan && t . left != :null)
<             {
<             insert(t . left, v, op);
<             }
<         else if (lessThan)
<             {
<             t . left = node(v,:null,:null);
<             t . left . parent = t;
<             insertionFixup(t . left);
<             }
<         else if (t . right != :null)
<             {
<             insert(t . right, v, op);
<             }
<         else
<             {
<             t . right = node(v, :null, :null);
<             t . right . parent = t;
<             insertionFixup(t . right);
<             }
<         }
<     }
< 
< function prune(x)
<     {
<     assert(leaf?(x) == :true);
<     if (leftChild?(x))
<         {
<         parent(x) . left = :null;
<         }
<     else if (rightChild?(x))
<         {
<         parent(x) . right = :null;
<         }
<     else
<         {
<         root = :null;
<         }
<     }
< 
< function swapToLeaf(x)
<     {
<     if (leaf?(x) == :false)
<         {
<         var y;
<         var temp;
< 
<         if (x . right != :null)
<             {
<             y = findMin(x . right);
<             }
<         else
<             {
<             y = findMax(x . left);
<             }
< 
<         temp = x . value;
<         x . value = y . value;
<         y . value = temp;
< 
<         swapToLeaf(y);
<         }
<     else
<         {
<         x;
<         }
<     }
< function findMin(x)
<     {
<     while (x . left != :null)
<         {
<         x = x . left;
<         }
<     return x;
<     }
< function findMax(x)
<     {
<     while (x . right != :null)
<         {
<         x = x . right;
<         }
<     return x;
<     }
< function delete(x)
<     {
<     x = swapToLeaf(x);
<     deletionFixup(x);
<     //println("pruning ", x . value);
<     prune(x);
<     }
< 
< function deletionFixup(x)
<     {
<     while (root?(x) == :false && x . color == :black)
<         {
<         if (red?(sibling(x)))
<             {
<             parent(x) . color = :red;
<             sibling(x) . color = :black;
<             rotate(sibling(x),parent(x));
<             // should have black sibling now
<             assert(sibling(x) . color == :black);
<             }
<         else if (red?(nephew(x)))
<             {
<             sibling(x) . color = parent(x) . color;
<             parent(x) . color = :black;
<             nephew(x) . color = :black;
<             rotate(sibling(x),parent(x));
<             x = root;
<             // subtree is bh balanced
<             // with proper bh contribution
<             }
<         else if (red?(niece(x)))
<             {
<             // nephew must be black
<             niece(x) = :black;
<             sibling(x) = :red;
<             rotate(neice(x),sibling(x));
<             // should have red nephew now
<             assert(nephew(x) . color == :red);
<             }
<         else
<             {
<             // sibling, niece, and nephew must be black
<             sibling(x) . color = :red;
<             x = parent(x);
<             // subtree is bh balanced
<             // but has deficit in bh contribution
<             }
<         }
< 
<     x . color = :black;
<     }
< 
< function insertionFixup(x)
<     {
<     x . color = :red;
< 
<     while (root?(x) == :false && x . parent . color == :red)
<         {
<         if (red?(uncle(x)))
<             {
<             parent(x) . color = :black;
<             uncle(x) . color = :black;
<             grandparent(x) . color = :red;
<             x = grandparent(x);
<             }
<         else
<             {
<             // uncle must be black
< 
<             if (linear?(x, parent(x), grandparent(x)) == :false)
<                 {
<                 var oldParent = parent(x);
<                 rotate(x,parent(x));
<                 x = oldParent;
<                 }
< 
<             parent(x) . color = :black;
<             assert(x . parent . color == :black);
<             grandparent(x) . color = :red;
<             rotate(parent(x),grandparent(x));
<             }
<         }
< 
<     root . color = :black;
<     }
< 
< function root?(x) { x == x . parent; }
< function leftChild?(x) { return parent(x) . left == x; }
< function rightChild?(x) { return parent(x) . right == x; }
< function leaf?(x) { x . left == :null && x . right == :null; }
< function red?(x) { return x != :null && x . color == :red; }
< function black?(x) { return x == :null || x . color == :black; }
< 
< function sibling(x)
<     {
<     if (leftChild?(x))
<         {
<         x . parent . right;
<         }
<     else if (rightChild?(x))
<         {
<         x . parent . left;
<         }
<     else
<         {
<         :null;
<         }
<     }
< function niece(x)       //precondition: sibling exists
<     {
<     if (leftChild?(x))
<         {
<         sibling(x) . left;
<         }
<     else
<         {
<         sibling(x) . right;
<         }
<     }
< function nephew(x)      //precondition: sibling exists
<     {
<     if (leftChild?(x))
<         {
<         sibling(x) . right;
<         }
<     else
<         {
<         sibling(x) . left;
<         }
<     }
< function parent(x) { x . parent; }
< function grandparent(x) { parent(x) . parent; }
< function uncle(x)
<     {
<     if (leftChild?(parent(x)))
<         {
<         return grandparent(x) . right;
<         }
<     else if (rightChild?(parent(x)))
<         {
<         return grandparent(x) . left;
<         }
<     else
<         {
<         return :null;
<         }
<     }
< function linear?(x,y,z)
<     {
<     return
<         ((leftChild?(x)  && leftChild?(y)) ||
<          (rightChild?(x) && rightChild?(y)));
<     }
< 
< 
< function rotate(x,p)
<     {
<     if (p . left == x) 
<         {
<         //rotate right
<         rotator(x,p,:right,:left);
<         }
<     else if (p . right == x)
<         {
<         //rotate left
<         rotator(x,p,:left,:right);
<         }
<     else
<         {
<         throw("rotate error");
<         }
<     }
< function rotator(x,p,direction,oppositeDirection)
<     {
<     var gp = parent(p);
<     var beta = x . (direction);
< 
<     p . (oppositeDirection) = beta;
<     if (beta != :null) { beta . parent = p; }
< 
<     x . (direction) = p;
<     p . parent = x;
< 
<     if (p == gp)
<         {
<         root = x;
<         x . parent = x;
<         }
<     else {
<         if (gp . (direction) == p) { gp . (direction) = x; }
<         else { gp . (oppositeDirection) = x; }
<         x . parent = gp;
<         }
<     }
< 
< function findNode(t, v, op)
<     {
<     if (t == :null || v == t . value)
<         {
<         t;
<         }
<     else if (v op t . value)
<         {
<         findNode(t . left, v, op);
<         }
<     else
<         {
<         findNode(t . right, v, op);
<         }
<     }
< 
< function main()
<     {
<     var i;
<     var num = :null;
<     var x;
<     var input = array(1, 2, 9, 3, 6, 4, 7, 8, 5);
< 
<     i = 0;
<     while (i < length(input))
<         {
<         num = input . i;
<         println("inserting!");
<         insert(root, num, <);
<         print(num," inserted.\n");
<         printTree(root);
<         i = i + 1;
<         }
---
> (define root nil)
> (define (assert # $x)
>     (if (not (eval $x #))
>         (throw 'assertionError $x)
>         )
>     )
> 
> (define (node value left right)
>     (define parent nil)
>     (define color nil)
> 
>     (define (display)
>         (println "value:  "  value)
>         (println "left:   "  left)
>         (println "right:  "  right)
>         (println "parent: "  parent)
>         (println "color:  "  color)
>         )
> 
>     this
>     )
> 
> (define (printTree t)
>     (define (iter r indent)
>         (if (null? r)
>             (println "null")
>             (begin
>                 (println (. r value)  "("  (. r color)  ")")
>                 (print indent "left:  ")
>                 (iter (. r left) (string+ indent "    "))
>                 (print indent  "right: ")
>                 (iter (. r right) (string+ indent "    "))
>                 )
>             )
>         )
> 
>     (iter t "   ")
>     )
> 
> (define (insert t v op)
>     (if (null? t)
>         (begin
>             (assign root (node v nil nil))
>             (assign (. root parent) root)
>             (insertionFixup root)
>             )
>         (begin
>             (define lessThan (op v (. t value)))
> 
>             (cond
>                 ((and lessThan (valid? (. t left)))
>                     (insert (. t left)  v  op)
>                     )
>                 (lessThan
>                     (assign (. t left) (node v nil nil))
>                     (assign (. (. t left) parent) t)
>                     (insertionFixup (. t left))
>                     )
>                 ((valid? (. t right))
>                     (insert (. t right)  v  op)
>                     )
>                 (else
>                     (assign (. t right) (node v nil nil))
>                     (assign (. (. t right) parent) t)
>                     (insertionFixup (. t right))
>                     )
>                 )
>             )
>         )
>     )
> (define (prune x)
>     (assert (leaf? x))
>     (cond
>         ((leftChild? x)
>             (assign (. (parent x) left) nil)
>             )
>         ((rightChild? x)
>             (assign (. (parent x) right) nil)
>             )
>         (else
>             (assign root nil)
>             )
>         )
>     )
> 
> (define (swapToLeaf x)
>     (if (not (leaf? x))
>         (begin
>             (define y nil)
>             (define temp nil)
> 
>             (if (valid? (. x right))
>                 (assign y (findMin (. x right)))
>                 (assign y (findMax (. x left)))
>                 )
> 
>             (assign temp (. x value))
>             (assign (. x value) (. y value))
>             (assign (. y value) temp)
> 
>             (swapToLeaf y)
>             )
>         x
>         )
>     )
> 
> (define (findMin x)
>     (while (valid? (. x left))
>         (assign x (. x left))
>         )
>     x
>     )
> 
> (define (findMax x)
>     (while (valid? (. x right))
>         (assign x (. x right))
>         )
>     x
>     )
> 
> (define (delete x)
>     (assign x (swapToLeaf x))
>     (deletionFixup x)
>     ; (println "pruning "  (. x value))
>     (prune x)
>     )
> 
> (define (deletionFixup x)
>     (while (and (false? (root? x)) (eq? (. x color) 'black))
>         (cond
>             ((red? (sibling x))
>                 (assign (. (parent x) color) 'red)
>                 (assign (. (sibling x) color) 'black)
>                 (rotate (sibling x) (parent x))
>                 ; should have black sibling now
>                 (assert (eq? (. (sibling x) color) 'black))
>                 )
>             ((red? (nephew x))
>                 (assign (. (sibling x) color) (. (parent x) color))
>                 (assign (. (parent x) color) 'black)
>                 (assign (. (nephew x) color) 'black)
>                 (rotate (sibling x) (parent x))
>                 (assign x root)
>                 ; subtree is bh balanced
>                 ; with proper bh contribution
>                 )
>             ((red? (niece x))
>                 ; nephew must be black
>                 (assign (. (niece x) color) 'black)
>                 (assign (. (sibling x) color) 'red)
>                 (rotate (niece x) (sibling x))
>                 ; should have red nephew now
>                 (assert (eq? (. (nephew x) color) 'red))
>                 )
>             (else
>                 ; sibling  niece  and nephew must be black
>                 (assign (. (sibling x) color) 'red)
>                 (assign x (parent x))
>                 ; subtree is bh balanced
>                 ; but has deficit in bh contribution
>                 )
>             )
> 
>         (assign (. x color) 'black)
>         )
>     )
> 
> (define (insertionFixup x)
>     (assign (. x color) 'red)
> 
>     (while (and (not (root? x)) (eq? (. (. x parent) color) 'red))
>         (if (red? (uncle x))
>             (begin
>                 (assign (. (parent x) color) 'black)
>                 (assign (. (uncle x) color) 'black)
>                 (assign (. (grandparent x) color) 'red)
>                 (assign x (grandparent x))
>                 )
>             (begin
>                 ; uncle must be black
> 
>                 (if (not (linear? x (parent x) (grandparent x)))
>                     (begin
>                         (define oldParent (parent x))
>                         (rotate x (parent x))
>                         (assign x oldParent)
>                         )
>                     )
> 
>                 (assign (. (parent x) color) 'black)
>                 ;(inspect (. (parent x) color))
>                 (assert (eq? (. (. x parent) color) 'black))
>                 (assign (. (grandparent x) color) 'red)
>                 (rotate (parent x) (grandparent x))
>                 )
>             )
>         )
>     (assign (. root color) 'black)
>     )
> 
> (define (root? x) (eq? x (. x parent)))
> (define (leftChild? x) (eq? (. (parent x) left) x))
> (define (rightChild? x) (eq? (. (parent x) right) x))
> (define (leaf? x) (and (null? (. x left))(null? (. x right))))
> (define (red? x) (and (valid? x) (eq? (. x color) 'red)))
> (define (black? x) (or  (null? x) (eq? (. x color) 'black)))
> 
> (define (sibling x)
>     (cond
>         ((leftChild? x)
>             (. (. x parent) right)
>             )
>         ((rightChild? x)
>             (. (. x parent) left)
>             )
>         (else
>             nil
>             )
>         )
>     )
> 
> (define (niece x)       ; precondition: sibling exists
>     (if (leftChild? x)
>         (. (sibling x) left)
>         (. (sibling x) right)
>         )
>     )
> 
> (define (nephew x)      ; precondition: sibling exists
>     ;(inspect (sibling x))
>     (if (leftChild? x)
>         (. (sibling x) right)
>         (. (sibling x) left)
>         )
>     )
> 
> (define (parent x) (. x parent))
> (define (grandparent x) (parent (parent x)))
> (define (uncle x)
>     (cond
>         ((leftChild? (parent x))
>             (. (grandparent x) right))
>         ((rightChild? (parent x))
>             (. (grandparent x) left))
>         (else
>             nil)
>         )
>     )
> 
> (define (linear? x y z)
>     (or
>         (and (leftChild? x) (leftChild? y))
>         (and (rightChild? x) (rightChild? y))
>         )
>     )
> 
> (define (rotate x p)
>     (cond
>         ((eq? (. p left) x) 
>             ; rotate right
>             (println "rotating right")
>             (rotator x p 'right 'left)
>             )
>         ((eq? (. p right) x)
>             ; rotate left
>             (println "rotating left")
>             (rotator x p 'left 'right)
>             )
>         (else
>             (throw 'redBlackException "rotate error")
>             )
>         )
>     )
> 
> (define (id x) x)
> 
> (define (rotator x p direction oppositeDirection)
>     (define gp (parent p))
>     (define beta (. x (id direction)))
> 
>     (assign (. p (id oppositeDirection)) beta)
>     (if (valid? beta) (assign (. beta parent) p))
> 
>     (assign (. x (id direction)) p)
>     (assign (. p parent) x)
> 
>     (if (eq? p gp)
>         (begin
>             (assign root x)
>             (assign (. x parent) x)
>             )
>         (begin
>             (if (eq? (. gp (id direction)) p)
>                 (assign (. gp (id direction)) x)
>                 (assign (. gp (id oppositeDirection)) x)
>                 )
>             (assign (. x parent) gp)
>             )
>         )
>     )
> 
> (define (findNode t v op)
>     (cond
>         ((or (null? t) (eq? v (. t value)))
>             t
>             )
>         ((op v (. t value))
>             (findNode (. t left) v op)
>             )
>         (else
>             (findNode (. t right) v op)
>             )
>         )
>     )
> 
> (define (main)
>     (define i nil)
>     (define num nil)
>     (define x nil)
>     (define input (array 1  2  9  3  6  4  7  8  5))
> 
>     (assign i 0)
>     (while (< i (length input))
>         (assign num (getElement input i))
>         (println "inserting!")
>         (insert root num <)
>         (println num " inserted.")
>         (printTree root)
>         (assign i (+ i 1))
>         )
367,384c332,348
<     println("insertion phase complete, tree is...");
<     printTree(root);
<     println("deletion phase begins...");
< 
<     i = 0;
<     while (i < length(input))
<         {
<         num = input . i;
<         x = findNode(root,num,<);
<         delete(x);
<         print(num," deleted.\n");
<         printTree(root);
<         i = i + 1;
<         }
< 
<     println("deletion phase complete, tree is...");
<     print("good-bye!\n");
<     }
---
>     (println "insertion phase complete  tree is...")
>     (printTree root)
>     (println "deletion phase begins...")
> 
>     (assign i 0)
>     (while (< i (length input))
>         (assign num (getElement input i))
>         (assign x (findNode root num <))
>         (delete x)
>         (println num " deleted.")
>         (printTree root)
>         (assign i (+ i 1))
>         )
> 
>     (println "deletion phase complete  tree is...")
>     (println "good-bye!")
>     )
386,387c350,351
< print("hello\n");
< main();
---
> (println "hello");
> (main)
403,619c367,369
< 9 inserted.
< 2(black)
<    left:  1(red)
<        left:  null
<        right: null
<    right: 9(red)
<        left:  null
<        right: null
< inserting!
< 3 inserted.
< 2(black)
<    left:  1(black)
<        left:  null
<        right: null
<    right: 9(black)
<        left:  3(red)
<            left:  null
<            right: null
<        right: null
< inserting!
< 6 inserted.
< 2(black)
<    left:  1(black)
<        left:  null
<        right: null
<    right: 6(black)
<        left:  3(red)
<            left:  null
<            right: null
<        right: 9(red)
<            left:  null
<            right: null
< inserting!
< 4 inserted.
< 2(black)
<    left:  1(black)
<        left:  null
<        right: null
<    right: 6(red)
<        left:  3(black)
<            left:  null
<            right: 4(red)
<                left:  null
<                right: null
<        right: 9(black)
<            left:  null
<            right: null
< inserting!
< 7 inserted.
< 2(black)
<    left:  1(black)
<        left:  null
<        right: null
<    right: 6(red)
<        left:  3(black)
<            left:  null
<            right: 4(red)
<                left:  null
<                right: null
<        right: 9(black)
<            left:  7(red)
<                left:  null
<                right: null
<            right: null
< inserting!
< 8 inserted.
< 2(black)
<    left:  1(black)
<        left:  null
<        right: null
<    right: 6(red)
<        left:  3(black)
<            left:  null
<            right: 4(red)
<                left:  null
<                right: null
<        right: 8(black)
<            left:  7(red)
<                left:  null
<                right: null
<            right: 9(red)
<                left:  null
<                right: null
< inserting!
< 5 inserted.
< 2(black)
<    left:  1(black)
<        left:  null
<        right: null
<    right: 6(red)
<        left:  4(black)
<            left:  3(red)
<                left:  null
<                right: null
<            right: 5(red)
<                left:  null
<                right: null
<        right: 8(black)
<            left:  7(red)
<                left:  null
<                right: null
<            right: 9(red)
<                left:  null
<                right: null
< insertion phase complete, tree is...
< 2(black)
<    left:  1(black)
<        left:  null
<        right: null
<    right: 6(red)
<        left:  4(black)
<            left:  3(red)
<                left:  null
<                right: null
<            right: 5(red)
<                left:  null
<                right: null
<        right: 8(black)
<            left:  7(red)
<                left:  null
<                right: null
<            right: 9(red)
<                left:  null
<                right: null
< deletion phase begins...
< 1 deleted.
< 6(black)
<    left:  4(red)
<        left:  2(black)
<            left:  null
<            right: 3(red)
<                left:  null
<                right: null
<        right: 5(black)
<            left:  null
<            right: null
<    right: 8(black)
<        left:  7(red)
<            left:  null
<            right: null
<        right: 9(red)
<            left:  null
<            right: null
< 2 deleted.
< 6(black)
<    left:  4(red)
<        left:  3(black)
<            left:  null
<            right: null
<        right: 5(black)
<            left:  null
<            right: null
<    right: 8(black)
<        left:  7(red)
<            left:  null
<            right: null
<        right: 9(red)
<            left:  null
<            right: null
< 9 deleted.
< 6(black)
<    left:  4(red)
<        left:  3(black)
<            left:  null
<            right: null
<        right: 5(black)
<            left:  null
<            right: null
<    right: 8(black)
<        left:  7(red)
<            left:  null
<            right: null
<        right: null
< 3 deleted.
< 6(black)
<    left:  4(black)
<        left:  null
<        right: 5(red)
<            left:  null
<            right: null
<    right: 8(black)
<        left:  7(red)
<            left:  null
<            right: null
<        right: null
< 6 deleted.
< 7(black)
<    left:  4(black)
<        left:  null
<        right: 5(red)
<            left:  null
<            right: null
<    right: 8(black)
<        left:  null
<        right: null
< 4 deleted.
< 7(black)
<    left:  5(black)
<        left:  null
<        right: null
<    right: 8(black)
<        left:  null
<        right: null
< 7 deleted.
< 8(black)
<    left:  5(red)
<        left:  null
<        right: null
<    right: null
< 8 deleted.
< 5(black)
<    left:  null
<    right: null
< 5 deleted.
< null
< deletion phase complete, tree is...
< good-bye!
---
> rotating left
> EXCEPTION: generalException
> file rb.s,line 281: set identifier resolved to type CONS, not SYMBOL
------------------------------------------
recur.s
------------------------------------------
32c32,33
< 5050
---
> EXCEPTION: undefinedVariable
> file recur.s,line 1: variable function is undefined
------------------------------------------
recursion.s
------------------------------------------
23,423c23,24
< 399
< 398
< 397
< 396
< 395
< 394
< 393
< 392
< 391
< 390
< 389
< 388
< 387
< 386
< 385
< 384
< 383
< 382
< 381
< 380
< 379
< 378
< 377
< 376
< 375
< 374
< 373
< 372
< 371
< 370
< 369
< 368
< 367
< 366
< 365
< 364
< 363
< 362
< 361
< 360
< 359
< 358
< 357
< 356
< 355
< 354
< 353
< 352
< 351
< 350
< 349
< 348
< 347
< 346
< 345
< 344
< 343
< 342
< 341
< 340
< 339
< 338
< 337
< 336
< 335
< 334
< 333
< 332
< 331
< 330
< 329
< 328
< 327
< 326
< 325
< 324
< 323
< 322
< 321
< 320
< 319
< 318
< 317
< 316
< 315
< 314
< 313
< 312
< 311
< 310
< 309
< 308
< 307
< 306
< 305
< 304
< 303
< 302
< 301
< 300
< 299
< 298
< 297
< 296
< 295
< 294
< 293
< 292
< 291
< 290
< 289
< 288
< 287
< 286
< 285
< 284
< 283
< 282
< 281
< 280
< 279
< 278
< 277
< 276
< 275
< 274
< 273
< 272
< 271
< 270
< 269
< 268
< 267
< 266
< 265
< 264
< 263
< 262
< 261
< 260
< 259
< 258
< 257
< 256
< 255
< 254
< 253
< 252
< 251
< 250
< 249
< 248
< 247
< 246
< 245
< 244
< 243
< 242
< 241
< 240
< 239
< 238
< 237
< 236
< 235
< 234
< 233
< 232
< 231
< 230
< 229
< 228
< 227
< 226
< 225
< 224
< 223
< 222
< 221
< 220
< 219
< 218
< 217
< 216
< 215
< 214
< 213
< 212
< 211
< 210
< 209
< 208
< 207
< 206
< 205
< 204
< 203
< 202
< 201
< 200
< 199
< 198
< 197
< 196
< 195
< 194
< 193
< 192
< 191
< 190
< 189
< 188
< 187
< 186
< 185
< 184
< 183
< 182
< 181
< 180
< 179
< 178
< 177
< 176
< 175
< 174
< 173
< 172
< 171
< 170
< 169
< 168
< 167
< 166
< 165
< 164
< 163
< 162
< 161
< 160
< 159
< 158
< 157
< 156
< 155
< 154
< 153
< 152
< 151
< 150
< 149
< 148
< 147
< 146
< 145
< 144
< 143
< 142
< 141
< 140
< 139
< 138
< 137
< 136
< 135
< 134
< 133
< 132
< 131
< 130
< 129
< 128
< 127
< 126
< 125
< 124
< 123
< 122
< 121
< 120
< 119
< 118
< 117
< 116
< 115
< 114
< 113
< 112
< 111
< 110
< 109
< 108
< 107
< 106
< 105
< 104
< 103
< 102
< 101
< 100
< 99
< 98
< 97
< 96
< 95
< 94
< 93
< 92
< 91
< 90
< 89
< 88
< 87
< 86
< 85
< 84
< 83
< 82
< 81
< 80
< 79
< 78
< 77
< 76
< 75
< 74
< 73
< 72
< 71
< 70
< 69
< 68
< 67
< 66
< 65
< 64
< 63
< 62
< 61
< 60
< 59
< 58
< 57
< 56
< 55
< 54
< 53
< 52
< 51
< 50
< 49
< 48
< 47
< 46
< 45
< 44
< 43
< 42
< 41
< 40
< 39
< 38
< 37
< 36
< 35
< 34
< 33
< 32
< 31
< 30
< 29
< 28
< 27
< 26
< 25
< 24
< 23
< 22
< 21
< 20
< 19
< 18
< 17
< 16
< 15
< 14
< 13
< 12
< 11
< 10
< 9
< 8
< 7
< 6
< 5
< 4
< 3
< 2
< 1
< 0
< bottom
---
> EXCEPTION: undefinedVariable
> file recursion.s,line 1: variable var is undefined
------------------------------------------
reflect.s
------------------------------------------
38,49c38,39
< x: a is 2, b is 3, c is 5
< n is constructed via m's constructor
< x: a is 2, b is 3, c is 8
< 
< m . constructor . name is x
< n . constructor . name is x
< 
< changing m . a to 10
< changing n . b to 10
< 
< x: a is 10, b is 3, c is 5
< x: a is 2, b is 10, c is 8
---
> EXCEPTION: nonFunction
> file reflect.s,line 1: attempted to call STRING as a function
------------------------------------------
reify.s
------------------------------------------
29,31c29,30
< calling superclass:a
< superclass:a: calling virtual function b
< subclass:b
---
> EXCEPTION: undefinedVariable
> file reify.s,line 1: variable function is undefined
------------------------------------------
return3.s
------------------------------------------
42,58c42,43
< g executing...
< r is <ERROR 5300>
< i is 0 and j is 1
< i is 0 and j is 2
< i is 0 and j is 3
< i is 0 and j is 4
< i is 1 and j is 1
< i is 1 and j is 2
< i is 1 and j is 3
< i is 1 and j is 4
< i is 2 and j is 1
< i is 2 and j is 2
< trying to leave f...
< g's z is 6
< g done.
< 6
< done
---
> EXCEPTION: nonFunction
> file return3.s,line 1: attempted to call STRING as a function
------------------------------------------
return.s
------------------------------------------
1,10c1,9
< function f()
<     {
<     var x;
<     print("entering f\n");
<     x = {
<         print("entering block\n");
<         return 3;
<         print("leaving block (this should not be displayed)\n");
<         5;
<         };
---
> (define (f)
>     (define x)
>     (println "entering f...")
>     (if #t
>         (print("entering block")
>         //(return 3)
>         (println "leaving block (this should not be displayed)")
>         5
>         }
11a11,12
>     //return 22;
>     print("really leaving f (this should not be displayed)\n");
14a16
> var z = 0;
16c18,20
< print("f() returns ",f(),"\n");
---
> z = f();
> print("f() returns ",z,"\n");
> println("done");
18,21c22,23
< f() should return 3
< entering f
< entering block
< f() returns 3
---
> EXCEPTION: syntaxException
> file return.s,line 21: expecting CLOSE_PARENTHESIS, found END_OF_INPUT instead
------------------------------------------
reverse.s
------------------------------------------
