OLD vs. NEW
adders.s
------------------------------------------
------------------------------------------
agenda.s
------------------------------------------
------------------------------------------
apply.s
------------------------------------------
------------------------------------------
a.s
------------------------------------------
------------------------------------------
bad.s
------------------------------------------
------------------------------------------
block.s
------------------------------------------
------------------------------------------
call.s
------------------------------------------
------------------------------------------
catch.s
------------------------------------------
------------------------------------------
chain.s
------------------------------------------
0a1,15
> (define (a x y)
>     this
>     )
> 
> (define (b m n)
>     (define o (a 'one 'two))
>     this
>     )
> 
> (define obj (b 'red 'green))
> 
> (inspect (. obj o x))
> 
> ------------------------------------------
> (. obj o x) is one
------------------------------------------
common2.s
------------------------------------------
6,7c6,7
< ((label environment) (context <object 4685>) (level 0) (constructor nil) (this <object 8372>) (common <object 8450>) (__included_common2.s #t))
< ((label environment) (context <object 8372>) (level 0) (constructor nil) (this <object 8450>) (count 0))
---
> ((__label environment) (__context <object 4500>) (__level 0) (__constructor nil) (this <object 10507>) (common <object 10585>) (__included_common2.s #t))
> ((__label environment) (__context <object 10507>) (__level 0) (__constructor nil) (this <object 10585>) (count 0))
------------------------------------------
common3.s
------------------------------------------
------------------------------------------
common4.s
------------------------------------------
------------------------------------------
common5.s
------------------------------------------
------------------------------------------
common.s
------------------------------------------
------------------------------------------
defined.s
------------------------------------------
21c21
< ++ is not defined.
---
> ++ is defined!
------------------------------------------
env.s
------------------------------------------
11c11
< TERM
---
> GPG_AGENT_INFO
12a13
> TERM
13a15
> GTK_RC_FILES
15d16
< GNOME_KEYRING_CONTROL
20c21
< SESSION_MANAGER
---
> GNOME_KEYRING_SOCKET
22,23c23
< DEFAULTS_PATH
< XDG_CONFIG_DIRS
---
> SESSION_MANAGER
27a28
> EDITOR
31,32d31
< MANDATORY_PATH
< UBUNTU_MENUPROXY
33a33
> HISTCONTROL
35d34
< SHLVL
37c36
< LANGUAGE
---
> SHLVL
40d38
< XDG_DATA_DIRS
41a40
> XDG_DATA_DIRS
44,45d42
< VIMRUNTIME
< WINDOWPATH
47d43
< VIM
------------------------------------------
error0.s
------------------------------------------
0a1,34
> (println "starting error0.s")
> (println "including fact.s")
> (include "fact.s")
> 
> (define (fib n)
>     (if (< n 2)
>         n
>         (+ (fib (- n 1)) (fib (- n 2)))
>         )
>         )
> (define x 0)
> (define result)
> (define t (time))
> 
> (define x 20)
> 
> (define result (fib x))
> (println "fib(" x ") is " result)
> (println (- (time) t) " seconds")
> ------------------------------------------
> starting error0.s
> including fact.s
> starting fact.s
> including fib.s
> starting fib.s
> including fact.s
> fib: fib(10) is 55
> 0 seconds
> fib.s included - SHOULD ONLY SEE THIS ONCE
> fact: fib(5) is 5
> fact: fact(5) is 120
> fact.s included - SHOULD ONLY SEE THIS ONCE
> fib(20) is 6765
> 2 seconds
------------------------------------------
except2.s
------------------------------------------
------------------------------------------
except3.s
------------------------------------------
------------------------------------------
except4.s
------------------------------------------
------------------------------------------
except.s
------------------------------------------
------------------------------------------
extend.s
------------------------------------------
------------------------------------------
extension.s
------------------------------------------
------------------------------------------
fact.s
------------------------------------------
------------------------------------------
fib-opt.s
------------------------------------------
1,2d0
< include("fact.s");
< 
4,16c2,10
<     {
<     if (n < 2)
<         {
<         n;
<         }
<     else
<         {
<         fib(n - 1) + fib(n - 2);
<         }
<     }
< var x = 0;
< var result;
< var t = time();
---
>     (if (< n 2)
>         n
>         (+ (fib (- n 1)) (fib (- n 2)))
>         )
>     )
> 
> (define x 0)
> (define result)
> (define t (time))
18c12
< x = 22;
---
> x = 26;
36,37c30,31
< fib(22) is 17711
< 1 seconds
---
> EXCEPTION: syntaxException
> file fib-opt.s,line 6: expecting END_OF_INPUT, found CLOSE_PARENTHESIS instead
------------------------------------------
fib.s
------------------------------------------
------------------------------------------
foreach.s
------------------------------------------
25,32c25,26
< i is 1
< i is 2
< i is 3
< i is 4
< a[2] is 1
< a[2] is 2
< a[2] is 3
< a[2] is 4
---
> EXCEPTION: undefinedVariable
> file foreach.s,line 1: variable function is undefined
------------------------------------------
for.s
------------------------------------------
35,44c35,36
< the value of i is 1
< the value of i is 3
< the value of i is 5
< the value of i is 7
< the value of i is 9
< the value of i is 1
< the value of i is 3
< the value of i is 5
< the value of i is 7
< the value of i is 9
---
> EXCEPTION: undefinedVariable
> file for.s,line 1: variable var is undefined
------------------------------------------
f.s
------------------------------------------
23,24c23,24
< f(10) is 3628800
< g(10) is 3628800
---
> EXCEPTION: nonFunction
> file f.s,line 1: attempted to call STRING as a function
------------------------------------------
function.s
------------------------------------------
1,55c1,36
< function parameterListMaker($)
<     {
<     var vars = :null;
< 
<     while ($ != :null)
<         {
<         vars = vars + list($ . 0 . code);
<         $ = tail($);
<         }
< 
<     vars;
<     }
< 
< function named-lambda($name,params,$body)
<     {
<     var $p = thunk(0,$name . context);
< 
<     $p . code = params;
< 
<     __function__($name,$p,$body);
<     }
< 
< function loadAndgo($name,params,values,$body)
<     {
<     var f = named-lambda($name,params,$body);
< 
<     apply(f,values);
<     }
< 
< loadAndgo(countdown,parameterListMaker(a),list(4))
<     {
<     inspect(a);
<     if (a > 0)
<         {
<         countdown(a - 1);
<         }
<     }
< 
< loadAndgo(countdown,list(:a),list(4))
<     {
<     inspect(a);
<     if (a > 0)
<         {
<         countdown(a - 1);
<         }
<     }
< 
< (named-lambda(countdown,list(:a),
<     {
<     inspect(a);
<     if (a > 0)
<         {
<         countdown(a - 1);
<         }
<     }))(4);
---
> (define (define-function name params body env)
>     (define donor (lambda () 1))
>     (set! 'name name donor)
>     (set! 'parameters params donor)
>     (set! 'code body donor)
>     (addSymbol name donor env)
>     )
> 
> (define (loadAndgo # $name params values $body)
>     (define f (define-function $name params $body #))
>     (apply f values)
>     )
> 
> (println "first load and go...");
> (loadAndgo countdown '(a) '(4)
>     (begin
>         (inspect a)
>         (if (> a 0) (countdown (- a 1)))
>         )
>     )
> 
> (println "second load and go...")
> (loadAndgo countdown '(b) '(3)
>     (begin
>         (inspect b)
>         (if (> b 0) (countdown (- b 1)))
>         )
>     )
> 
> (println "calling define-function directly...")
> ((define-function 'countdown '(a)
>     '(begin
>         (inspect a)
>         (if (> a 0) (countdown (- a 1)))
>         )
>     this) 4)
56a38
> first load and go...
62,66c44,49
< a is 4
< a is 3
< a is 2
< a is 1
< a is 0
---
> second load and go...
> b is 3
> b is 2
> b is 1
> b is 0
> calling define-function directly...
------------------------------------------
gc.s
------------------------------------------
1,3c1,2
< function f(x)
<     {
<     var y = x * x;
---
> (define (f x)
>     (define y (* x x))
5c4
<     gc();
---
>     (gc)
7,10c6,9
<     println("f is ", f);
<     println("x is ", x);
<     println("y is ", y);
<     }
---
>     (inspect f)
>     (inspect x)
>     (inspect y)
>     )
12c11
< f(3);
---
> (f 3)
13a13
> gc:1, 5845 cells
------------------------------------------
g.s
------------------------------------------
1,3c1,2
< function g(n)
<     {
<     var total = 1;
---
> (define (g n)
>     (define total 1)
5,9c4,7
<     while (n > 1)
<         {
<         total = total * n;
<         n = n - 1;
<         }
---
>     (while (> n 1)
>         (set! 'total (* total n))
>         (set! 'n (- n 1))
>         )
11,12c9,10
<     total;
<     }
---
>     total
>     )
14c12
< var x = 10;
---
> (define x 10)
16c14
< print("g(",x,") is ", g(x), "\n");
---
> (print "g(" x ") is " (g x) "\n")
------------------------------------------
heapsort.s
------------------------------------------
1c1,2
< include("basics");
---
> (define (heap items op)
>     (define size (length items))
3,21c4,17
< function heap(items,op)
<     {
<     var size = length(items);
< 
<     function leftChild(x) { 2 * x + 1; }
<     function rightChild(x) { 2 * x + 2; }
<     function deleteMin()
<         {
<         var temp = items[0];
<         items[0] = items[size - 1];
<         items[size - 1] = temp;
<         size = size - 1;
<         heapify(0);
<         temp;
<         }
<     function heapify(root)
<         {
<         var extreme;
<         var newRoot;
---
>     (define (leftChild x) (+ (* 2 x) 1))
>     (define (rightChild x) (+ (* 2 x) 2))
>     (define (deleteExtreme)
>         (define temp (getElement items 0))
>         (setElement! items 0 (getElement items (- size 1)))
>         (setElement! items (- size 1) temp)
>         (set! 'size (- size 1))
>         (heapify 0)
>         temp
>         )
> 
>     (define (heapify root)
>         (define extreme nil)
>         (define newRoot nil)
23c19
<         if (leaf?(root)) { return :ok; }
---
>         (if (leaf? root) (return 'ok))
25c21
<         extreme = findExtremalChild(root);
---
>         (set! 'extreme (findExtremalChild root))
27c23
<         if (extreme == items[root]) { return :ok; }
---
>         (if (== extreme (getElement items root)) (return 'ok))
29,92c25,79
<         if (extreme == items[leftChild(root)])
<             {
<             newRoot = leftChild(root);
<             }
<         else
<             {
<             newRoot = rightChild(root);
<             }
<         items[newRoot] = items[root];
<         items[root] = extreme;
<         heapify(newRoot);
<         }
<     function findExtremalChild(root)
<         {
<         var extreme;
< 
<         extreme = extremal(op,items[root],items[leftChild(root)]);
< 
<         if (rightChild(root) >= size)
<             {
<             extreme;
<             }
<         else
<             {
<             extremal(op,extreme,items[rightChild(root)]);
<             }
<         }
<     function build-heap()
<         {
<         var i;
< 
<         for (i = size - 1, i >= 0, i = i - 1)
<             {
<             heapify(i);
<             }
<         }
< 
<     function leaf?(x)
<         {
<         leftChild(x) >= size;
<         }
< 
<     build-heap();
<     this;
<     }
< 
< function heap-sort(items,op)
<     {
<     var i;
<     var h;
< 
<     h = heap(items,op);
< 
<     while (h . size > 0)
<         {
<         print(h . deleteMin());
<         if (h . size > 0,print(" "));
<         }
<     }
< 
< function extremal(op,a,b)
<     {
<     if (a op b,a,b);
<     }
---
>         (if (== extreme (getElement items (leftChild root)))
>             (set! 'newRoot (leftChild root))
>             (set! 'newRoot (rightChild root))
>             )
> 
>         (setElement! items newRoot (getElement items root))
>         (setElement! items root extreme)
>         (heapify newRoot)
>         )
> 
>     (define (findExtremalChild root)
>         (define extreme nil)
>         (set! 'extreme 
>             (extremal op
>                 (getElement items root)
>                 (getElement items (leftChild root))))
> 
>         (if (>= (rightChild root) size)
>             extreme
>             (extremal op extreme (getElement items (rightChild root)))
>             )
>         )
> 
>     (define (build-heap)
>         (define i nil)
>         (for (set! 'i (- size 1)) (>= i 0) (set! 'i (- i 1))
>             (println "heapifying element " i)
>             (heapify i)
>             (println "element " i " has been heapified")
>             )
>         )
> 
>     (define (leaf? x) (>= (leftChild x) size))
> 
>     (println "about to build-heap...")
>     (build-heap)
>     this
>     )
> 
> (define (heap-sort items op)
>     (define i nil)
>     (define h nil)
> 
>     (set! 'h (heap items op))
> 
>     (while (> (get 'size h) 0)
>         (print ((get 'deleteExtreme h)))
>         (if (> (get 'size h) 0) (print " "))
>         )
>     (println "\n")
>     )
> 
> (define (extremal op a b)
>     (if (op a b) a b)
>     )
94c81
< var a = array(3,6,3,9,4,10,5,29,4,6,0,20,25,16,88,0,31);
---
> (define a (array 3 6 3 9 4 10 5 29 4 6 0 20 25 16 88 0 31))
96,97c83
< heap-sort(a,>);
< println("\n");
---
> (heap-sort a >)
99,100c85,86
< inspect(a);
< inspect(extremal . parameters);
---
> (inspect a)
> (inspect (get 'parameters extremal))
102,105c88,124
< 88 31 29 25 20 16 10 9 6 6 5 4 4 3 3 0 0
< 
< a is [0,0,3,3,4,4,5,6,6,9,10,16,20,25,29,31,88]
< extremal . parameters is (op,a,b)
---
> about to build-heap...
> heapifying element 16
> element 16 has been heapified
> heapifying element 15
> element 15 has been heapified
> heapifying element 14
> element 14 has been heapified
> heapifying element 13
> element 13 has been heapified
> heapifying element 12
> element 12 has been heapified
> heapifying element 11
> element 11 has been heapified
> heapifying element 10
> element 10 has been heapified
> heapifying element 9
> element 9 has been heapified
> heapifying element 8
> element 8 has been heapified
> heapifying element 7
> element 7 has been heapified
> heapifying element 6
> element 6 has been heapified
> heapifying element 5
> element 5 has been heapified
> heapifying element 4
> element 4 has been heapified
> heapifying element 3
> element 3 has been heapified
> heapifying element 2
> element 2 has been heapified
> heapifying element 1
> element 1 has been heapified
> heapifying element 0
> element 0 has been heapified
> EXCEPTION: undefinedVariable
> file heapsort.s,line 8: variable setElement! is undefined
------------------------------------------
hide.s
------------------------------------------
37,41c37,38
< EVALUATION ERROR: :restrictedAssignment
< hide.s,line 7: you are only allowed to assign to simple variables
< 4
< 13
< 13
---
> EXCEPTION: nonFunction
> file hide.s,line 1: attempted to call STRING as a function
------------------------------------------
hook2.s
------------------------------------------
16,18c16,17
< about to greet...
< intercepted! initializer is hello, world!
< hello, world!
---
> EXCEPTION: undefinedVariable
> file hook2.s,line 1: variable function is undefined
------------------------------------------
hook.s
------------------------------------------
15,17c15,16
< Intercepted!
< about to greet...
< hello, world!
---
> EXCEPTION: undefinedVariable
> file hook.s,line 1: variable function is undefined
------------------------------------------
if2.s
------------------------------------------
27c27,28
< three *is* less than 4!
---
> EXCEPTION: undefinedVariable
> file if2.s,line 1: variable var is undefined
------------------------------------------
if3.s
------------------------------------------
47,63c47,48
< EVALUATION ERROR: :argumentCountError
< if3.s,line 8: too many arguments to if
< the test is true
< naughts!
< the test is false
< the test is true
< onesies!
< the test is false
< the test is false
< the test is true
< binary!
< the test is false
< the test is false
< the test is false
< the test is true
< trinary!
< call if with too many arguments
---
> EXCEPTION: undefinedVariable
> file if3.s,line 1: variable var is undefined
------------------------------------------
if4.s
------------------------------------------
26,45c26,27
< function (test,$tBranch,$fBranch)
<     {
<     var oldIf = context . context . if;
<     print("the test is ",test,"
< ");
<     oldIf (test)
<         {
<         while (:false)
<             {
<             println("huh");
<             }
<         force($tBranch);
<         }
<     else
<         {
<         force($fBranch);
<         }
<     }
< the test is true
< three *is* less than 4!
---
> EXCEPTION: undefinedVariable
> file if4.s,line 1: variable var is undefined
------------------------------------------
if5.s
------------------------------------------
24c24,25
< 3 is less than 4!
---
> EXCEPTION: undefinedVariable
> file if5.s,line 1: variable var is undefined
------------------------------------------
if.s
------------------------------------------
33,35c33,34
< enter 0, 1, or 2: 
< you entered 3
< can't follow directions, can you?
---
> EXCEPTION: undefinedVariable
> file if.s,line 1: variable //overload is undefined
------------------------------------------
lhs.s
------------------------------------------
30,33c30,31
< z is 3 (should be 3)
< xobj's a is z (should be z)
< z now is 5 (should be 5)
< xobj's a now is q (should be q)
---
> EXCEPTION: undefinedVariable
> file lhs.s,line 1: variable var is undefined
------------------------------------------
linecheck.s
------------------------------------------
186,188c186,187
< done
< even
< cleaning up...
---
> EXCEPTION: lexicalException
> file linecheck.s,line 64: misformed number (1])
------------------------------------------
list.s
------------------------------------------
98,113c98,99
< [ ]
< [ 4 ]
< [ 3 ]
< [ 3 4 ]
< [ 2 ]
< [ 2 4 ]
< [ 2 3 ]
< [ 2 3 4 ]
< [ 1 ]
< [ 1 4 ]
< [ 1 3 ]
< [ 1 3 4 ]
< [ 1 2 ]
< [ 1 2 4 ]
< [ 1 2 3 ]
< [ 1 2 3 4 ]
---
> EXCEPTION: syntaxException
> file list.s,line 97: expecting CLOSE_PARENTHESIS, found END_OF_INPUT instead
------------------------------------------
logic.s
------------------------------------------
1,62c1,42
< function AND(in1, in2, out, agenda)
<     {
<     var delay = 4; //milliseconds
<     function recalculate()
<         {
<         if (in1 . get() == 1 && in2 . get() == 1)
<             {
<             agenda . schedule(out . set(1), delay);
<             }
<         else
<             {
<             agenda . schedule(out . set(0), delay);
<             }
<         }
< 
<     in1 . register(this);
<     in2 . register(this);
<     recalculate();
<     this;
<     }
< 
< 
< function OR(in1, in2, out, agenda)
<     {
<     var delay = 3; //milliseconds
<     function recalculate()
<         {
<         if (in1 . get() == 1 || in2 . get() == 1)
<             {
<             agenda . schedule(out . set(1), delay);
<             }
<         else
<             {
<             agenda . schedule(out . set(0), delay);
<             }
<         }
< 
<     in1 . register(this);
<     in2 . register(this);
<     this;
<     }
< 
< 
< function NOT(in, out, agenda)
<     {
<     var delay = 1; //milliseconds
<     function recalculate()
<         {
<         if (in . get() == 0)
<             {
<             agenda . schedule(out . set(1), delay);
<             }
<         else
<             {
<             //println("output is 0");
<             agenda . schedule(out . set(0), delay);
<             }
<         }
< 
<     in . register(this);
<     this;
<     }
---
> (define (AND in1 in2 out agenda)
>     (define delay 4)  ;milliseconds
>     (define (recalculate)
>         (if (and (== ((. in1 get)) 1) (== ((. in2 get)) 1))
>             ((. agenda schedule) ((. out set) 1) delay)
>             ((. agenda schedule) ((. out set) 0) delay)
>             )
>         )
> 
>     ((. in1 register) this)
>     ((. in2 register) this)
>     (recalculate)
>     this
>     )
> 
> 
> (define (OR in1 in2 out agenda)
>     (define delay 3) ;milliseconds
>     (define (recalculate)
>         (if (or (== ((. in1 get)) 1) (== ((. in2 get)) 1))
>             ((. agenda schedule) ((. out set) 1) delay)
>             ((. agenda schedule) ((. out set) 0) delay)
>             )
>         )
> 
>     ((. in1 register) this)
>     ((. in2 register) this)
>     this
>     )
> 
> (define (NOT in out agenda)
>     (define delay 1)  ;milliseconds
>     (define (recalculate)
>         (if (== ((. in get)) 0)
>             ((. agenda schedule) ((. out set) 1) delay)
>             ((. agenda schedule) ((. out set) 0) delay)
>             )
>         )
> 
>     ((. in register) this)
>     this
>     )
------------------------------------------
map.s
------------------------------------------
45,56c45,46
< mapping [ 1 2 3 4 ] 
< mapping [ 2 3 4 ] 
< mapping [ 3 4 ] 
< mapping [ 4 ] 
< mapping [ ] 
< returning null
< joining 16 with null
< joining 9 with (16)
< joining 4 with (9,16)
< joining 1 with (4,9,16)
< [ 1 2 3 4 ] 
< [ 1 4 9 16 ] 
---
> EXCEPTION: undefinedVariable
> file map.s,line 1: variable var is undefined
------------------------------------------
matrixproblem.s
------------------------------------------
27,28c27,28
< length(mat) is 10
< length(mat) is 20
---
> EXCEPTION: nonFunction
> file matrixproblem.s,line 1: attempted to call STRING as a function
------------------------------------------
object3.s
------------------------------------------
49,68c49,56
< (locals b) is (__label __context __level __constructor this parent x)
< (local? parent b) is #t
< (local? Parent b) is #f
< a . x is 4
< (. a x) is 4
< <object 10983>
<              __label  : closure
<            __context  : <object 9029>
<                 name  : alpha
<           parameters  : (x)
<                 code  : (begin (define parent nil) this)
< (. (. a __constructor) name) is alpha
< (. b x) is 5
< (. (. b __constructor) name) is alpha
< (is? a (quote alpha)) is #t
< (is? b (quote alpha)) is #t
< (is? b (quote beta)) is #f
< (is? c (quote beta)) is #t
< (is? c (quote alpha)) is #t
< (is? c (quote gamma)) is #f
---
> (locals b) is <object 20460>
>              __label  : throw
>                 code  : undefinedVariable
>                value  : "file object3.s,line 25: variable locals is undefined"
>                trace  : ((locals b))
> 
> EXCEPTION: undefinedVariable
> file object3.s,line 25: variable locals is undefined
------------------------------------------
object.s
------------------------------------------
36c36
< z is <object 9629>
---
> z is <object 11107>
38c38
<            __context  : <object 9516>
---
>            __context  : <object 10994>
41c41
<                 this  : <object 9629>
---
>                 this  : <object 11107>
------------------------------------------
obj.s
------------------------------------------
------------------------------------------
overlay.s
------------------------------------------
0a1,41
> function stack()
>     {
>     var store = :null;
>     function pop()
>         {
>         var p = head(store);
>         store = tail(store);
>         p;
>         }
>     function push(item)
>         {
>         store = item join store;
>         item;
>         }
>     function empty?()
>         {
>         return store == :null;
>         }
>     this;
>     }
> 
> function stack()
>     {
>     function pop()
>         {
>         if (empty?(),throw(:stackException,"popped an empty stack"));
>         pop . prior();
>         }
>     extends(stack . prior());
>     this;
>     }
> 
> var s = stack();
> 
> pp(stack);
> inspect(s . push(5));
> inspect(s . pop());
> inspect(s . pop());
> ------------------------------------------
> EXCEPTION: undefinedVariable
> file overlay.s,line 1: variable function is undefined
------------------------------------------
overload.s
------------------------------------------
15,19c15,16
< local + is <function +(x,y)>
< non-local + is <function +(x,y)>
< non-non-local + is <function +(a,b)>
< shadowed + is <function +(a,b)>
< x is 7
---
> EXCEPTION: nonFunction
> file overload.s,line 1: attempted to call STRING as a function
------------------------------------------
p1.s
------------------------------------------
16,18c16,17
< in overridden +
< 3
< hello, world
---
> EXCEPTION: undefinedVariable
> file p1.s,line 1: variable var is undefined
------------------------------------------
pp.s
------------------------------------------
54,99c54,55
< function f(a,b,c)
<     {
<     var x;
<     if (true)
<         {
<         var x = 3;
<         var y = 4;
<         print(x);
<         print(y);
<         while (x > y)
<             {
<             x = x - 1;
<             y = y + 1;
<             }
<         }
<     else if (false)
<         {
<         :ok;
<         }
<     else if (true)
<         {
<         :ok;
<         }
<     else
<         {
<         print("huh?");
<         }
<     return :oops;
<     }
< function mv(m,v)
<     {
<     function q()
<         {
<         x;
<         }
<     function h()
<         {
<         3 * 3;
<         }
<     map(function (r) { r dot-product v; },m);
<     }
< ["pp.s"]
< <THUNK 7272>:
<     context: <OBJECT 984>
<     code: hello + goodbye
< 
---
> EXCEPTION: syntaxException
> file pp.s,line 53: expecting CLOSE_PARENTHESIS, found END_OF_INPUT instead
------------------------------------------
pq.s
------------------------------------------
32,52c32,33
< enqueueing: 3
<     first item is 3
<     first rank is 6
< enqueueing: 2
<     first item is 2
<     first rank is 4
< enqueueing: 0
<     first item is 0
<     first rank is 0
< enqueueing: 1
<     first item is 0
<     first rank is 0
< enqueueing: 4
<     first item is 0
<     first rank is 0
< 
< dequeueing: 0
< dequeueing: 1
< dequeueing: 2
< dequeueing: 3
< dequeueing: 4
---
> EXCEPTION: nonFunction
> file pq.s,line 1: attempted to call STRING as a function
------------------------------------------
priorityQueue.s
------------------------------------------
1,34d0
< function priorityQueue()
<     {
<     var items;
<     function bundle(data,rank,next) { return this; }
<     function dequeue()
<         {
<         var item;
<         
<         item = items . next . data;
<         items . next = items . next . next;
<         return item;
<         }
<     function enqueue(item,rank)
<         {
<         var prefix = items;
<         var suffix = items . next;
<         var package = bundle(item,rank,:null);
< 
<         while (suffix != :null && rank >= suffix . rank)
<             {
<             prefix = suffix;
<             suffix = suffix . next;
<             }
< 
<         prefix . next = package;
<         package . next = suffix;
<         }
<     function peekItem() { return items . next . data; }
<     function peekRank() { return items . next . rank; }
<     function empty()    { return items . next == :null; }
< 
<     items = bundle(:null,:null,:null); //dummy head node
<     this;
<     }
------------------------------------------
prior.s
------------------------------------------
19,20c19,20
< well, hello there!
< hi,all!
---
> EXCEPTION: undefinedVariable
> file prior.s,line 1: variable function is undefined
------------------------------------------
rb.s
------------------------------------------
1,365c1,330
< include("debug");
< 
< var root = :null;
< 
< function node(value,left,right)
<     {
<     var parent;
<     var color;
< 
<     function display()
<         {
<         println("value:  ", value);
<         println("left:   ", left);
<         println("right:  ", right);
<         println("parent: ", parent);
<         println("color:  ", color);
<         }
< 
<     this;
<     }
< 
< function printTree(t)
<     {
<     function iter(r, indent)
<         {
<         if (r == :null)
<             {
<             println("null");
<             }
<         else
<             {
<             println(r . value, "(", r . color, ")");
<             print(indent, "left:  ");
<             iter(r . left,indent + "    ");
<             print(indent, "right: ");
<             iter(r . right,indent + "    ");
<             }
<         }
< 
<     iter(t, "   ");
<     }
< 
< function insert(t, v, op)
<     {
<     if (t == :null)
<         {
<         root = node(v,:null,:null);
<         root . parent = root;
<         insertionFixup(root);
<         }
<     else
<         {
<         var lessThan = v op t . value;
< 
<         if (lessThan && t . left != :null)
<             {
<             insert(t . left, v, op);
<             }
<         else if (lessThan)
<             {
<             t . left = node(v,:null,:null);
<             t . left . parent = t;
<             insertionFixup(t . left);
<             }
<         else if (t . right != :null)
<             {
<             insert(t . right, v, op);
<             }
<         else
<             {
<             t . right = node(v, :null, :null);
<             t . right . parent = t;
<             insertionFixup(t . right);
<             }
<         }
<     }
< 
< function prune(x)
<     {
<     assert(leaf?(x) == :true);
<     if (leftChild?(x))
<         {
<         parent(x) . left = :null;
<         }
<     else if (rightChild?(x))
<         {
<         parent(x) . right = :null;
<         }
<     else
<         {
<         root = :null;
<         }
<     }
< 
< function swapToLeaf(x)
<     {
<     if (leaf?(x) == :false)
<         {
<         var y;
<         var temp;
< 
<         if (x . right != :null)
<             {
<             y = findMin(x . right);
<             }
<         else
<             {
<             y = findMax(x . left);
<             }
< 
<         temp = x . value;
<         x . value = y . value;
<         y . value = temp;
< 
<         swapToLeaf(y);
<         }
<     else
<         {
<         x;
<         }
<     }
< function findMin(x)
<     {
<     while (x . left != :null)
<         {
<         x = x . left;
<         }
<     return x;
<     }
< function findMax(x)
<     {
<     while (x . right != :null)
<         {
<         x = x . right;
<         }
<     return x;
<     }
< function delete(x)
<     {
<     x = swapToLeaf(x);
<     deletionFixup(x);
<     //println("pruning ", x . value);
<     prune(x);
<     }
< 
< function deletionFixup(x)
<     {
<     while (root?(x) == :false && x . color == :black)
<         {
<         if (red?(sibling(x)))
<             {
<             parent(x) . color = :red;
<             sibling(x) . color = :black;
<             rotate(sibling(x),parent(x));
<             // should have black sibling now
<             assert(sibling(x) . color == :black);
<             }
<         else if (red?(nephew(x)))
<             {
<             sibling(x) . color = parent(x) . color;
<             parent(x) . color = :black;
<             nephew(x) . color = :black;
<             rotate(sibling(x),parent(x));
<             x = root;
<             // subtree is bh balanced
<             // with proper bh contribution
<             }
<         else if (red?(niece(x)))
<             {
<             // nephew must be black
<             niece(x) = :black;
<             sibling(x) = :red;
<             rotate(neice(x),sibling(x));
<             // should have red nephew now
<             assert(nephew(x) . color == :red);
<             }
<         else
<             {
<             // sibling, niece, and nephew must be black
<             sibling(x) . color = :red;
<             x = parent(x);
<             // subtree is bh balanced
<             // but has deficit in bh contribution
<             }
<         }
< 
<     x . color = :black;
<     }
< 
< function insertionFixup(x)
<     {
<     x . color = :red;
< 
<     while (root?(x) == :false && x . parent . color == :red)
<         {
<         if (red?(uncle(x)))
<             {
<             parent(x) . color = :black;
<             uncle(x) . color = :black;
<             grandparent(x) . color = :red;
<             x = grandparent(x);
<             }
<         else
<             {
<             // uncle must be black
< 
<             if (linear?(x, parent(x), grandparent(x)) == :false)
<                 {
<                 var oldParent = parent(x);
<                 rotate(x,parent(x));
<                 x = oldParent;
<                 }
< 
<             parent(x) . color = :black;
<             assert(x . parent . color == :black);
<             grandparent(x) . color = :red;
<             rotate(parent(x),grandparent(x));
<             }
<         }
< 
<     root . color = :black;
<     }
< 
< function root?(x) { x == x . parent; }
< function leftChild?(x) { return parent(x) . left == x; }
< function rightChild?(x) { return parent(x) . right == x; }
< function leaf?(x) { x . left == :null && x . right == :null; }
< function red?(x) { return x != :null && x . color == :red; }
< function black?(x) { return x == :null || x . color == :black; }
< 
< function sibling(x)
<     {
<     if (leftChild?(x))
<         {
<         x . parent . right;
<         }
<     else if (rightChild?(x))
<         {
<         x . parent . left;
<         }
<     else
<         {
<         :null;
<         }
<     }
< function niece(x)       //precondition: sibling exists
<     {
<     if (leftChild?(x))
<         {
<         sibling(x) . left;
<         }
<     else
<         {
<         sibling(x) . right;
<         }
<     }
< function nephew(x)      //precondition: sibling exists
<     {
<     if (leftChild?(x))
<         {
<         sibling(x) . right;
<         }
<     else
<         {
<         sibling(x) . left;
<         }
<     }
< function parent(x) { x . parent; }
< function grandparent(x) { parent(x) . parent; }
< function uncle(x)
<     {
<     if (leftChild?(parent(x)))
<         {
<         return grandparent(x) . right;
<         }
<     else if (rightChild?(parent(x)))
<         {
<         return grandparent(x) . left;
<         }
<     else
<         {
<         return :null;
<         }
<     }
< function linear?(x,y,z)
<     {
<     return
<         ((leftChild?(x)  && leftChild?(y)) ||
<          (rightChild?(x) && rightChild?(y)));
<     }
< 
< 
< function rotate(x,p)
<     {
<     if (p . left == x) 
<         {
<         //rotate right
<         rotator(x,p,:right,:left);
<         }
<     else if (p . right == x)
<         {
<         //rotate left
<         rotator(x,p,:left,:right);
<         }
<     else
<         {
<         throw("rotate error");
<         }
<     }
< function rotator(x,p,direction,oppositeDirection)
<     {
<     var gp = parent(p);
<     var beta = x . (direction);
< 
<     p . (oppositeDirection) = beta;
<     if (beta != :null) { beta . parent = p; }
< 
<     x . (direction) = p;
<     p . parent = x;
< 
<     if (p == gp)
<         {
<         root = x;
<         x . parent = x;
<         }
<     else {
<         if (gp . (direction) == p) { gp . (direction) = x; }
<         else { gp . (oppositeDirection) = x; }
<         x . parent = gp;
<         }
<     }
< 
< function findNode(t, v, op)
<     {
<     if (t == :null || v == t . value)
<         {
<         t;
<         }
<     else if (v op t . value)
<         {
<         findNode(t . left, v, op);
<         }
<     else
<         {
<         findNode(t . right, v, op);
<         }
<     }
< 
< function main()
<     {
<     var i;
<     var num = :null;
<     var x;
<     var input = array(1, 2, 9, 3, 6, 4, 7, 8, 5);
< 
<     i = 0;
<     while (i < length(input))
<         {
<         num = input . i;
<         println("inserting!");
<         insert(root, num, <);
<         print(num," inserted.\n");
<         printTree(root);
<         i = i + 1;
<         }
---
> (define root nil)
> (define (assert # $x)
>     (if (not (eval $x #))
>         (throw 'assertionError $x)
>         )
>     )
> 
> (define (node value left right)
>     (define parent nil)
>     (define color nil)
> 
>     (define (display)
>         (println "value:  "  value)
>         (println "left:   "  left)
>         (println "right:  "  right)
>         (println "parent: "  parent)
>         (println "color:  "  color)
>         )
> 
>     this
>     )
> 
> (define (printTree t)
>     (define (iter r indent)
>         (if (null? r)
>             (println "null")
>             (begin
>                 (println (. r value)  "("  (. r color)  ")")
>                 (print indent "left:  ")
>                 (iter (. r left) (string+ indent "    "))
>                 (print indent  "right: ")
>                 (iter (. r right) (string+ indent "    "))
>                 )
>             )
>         )
> 
>     (iter t "   ")
>     )
> 
> (define (insert t v op)
>     (if (null? t)
>         (begin
>             (assign root (node v nil nil))
>             (assign (. root parent) root)
>             (insertionFixup root)
>             )
>         (begin
>             (define lessThan (op v (. t value)))
> 
>             (cond
>                 ((and lessThan (valid? (. t left)))
>                     (insert (. t left)  v  op)
>                     )
>                 (lessThan
>                     (assign (. t left) (node v nil nil))
>                     (assign (. (. t left) parent) t)
>                     (insertionFixup (. t left))
>                     )
>                 ((valid? (. t right))
>                     (insert (. t right)  v  op)
>                     )
>                 (else
>                     (assign (. t right) (node v nil nil))
>                     (assign (. (. t right) parent) t)
>                     (insertionFixup (. t right))
>                     )
>                 )
>             )
>         )
>     )
> (define (prune x)
>     (assert (leaf? x))
>     (cond
>         ((leftChild? x)
>             (assign (. (parent x) left) nil)
>             )
>         ((rightChild? x)
>             (assign (. (parent x) right) nil)
>             )
>         (else
>             (assign root nil)
>             )
>         )
>     )
> 
> (define (swapToLeaf x)
>     (if (not (leaf? x))
>         (begin
>             (define y nil)
>             (define temp nil)
> 
>             (if (valid? (. x right))
>                 (assign y (findMin (. x right)))
>                 (assign y (findMax (. x left)))
>                 )
> 
>             (assign temp (. x value))
>             (assign (. x value) (. y value))
>             (assign (. y value) temp)
> 
>             (swapToLeaf y)
>             )
>         x
>         )
>     )
> 
> (define (findMin x)
>     (while (valid? (. x left))
>         (assign x (. x left))
>         )
>     x
>     )
> 
> (define (findMax x)
>     (while (valid? (. x right))
>         (assign x (. x right))
>         )
>     x
>     )
> 
> (define (delete x)
>     (assign x (swapToLeaf x))
>     (deletionFixup x)
>     ; (println "pruning "  (. x value))
>     (prune x)
>     )
> 
> (define (deletionFixup x)
>     (while (and (false? (root? x)) (eq? (. x color) 'black))
>         (cond
>             ((red? (sibling x))
>                 (assign (. (parent x) color) 'red)
>                 (assign (. (sibling x) color) 'black)
>                 (rotate (sibling x) (parent x))
>                 ; should have black sibling now
>                 (assert (eq? (. (sibling x) color) 'black))
>                 )
>             ((red? (nephew x))
>                 (assign (. (sibling x) color) (. (parent x) color))
>                 (assign (. (parent x) color) 'black)
>                 (assign (. (nephew x) color) 'black)
>                 (rotate (sibling x) (parent x))
>                 (assign x root)
>                 ; subtree is bh balanced
>                 ; with proper bh contribution
>                 )
>             ((red? (niece x))
>                 ; nephew must be black
>                 (assign (. (niece x) color) 'black)
>                 (assign (. (sibling x) color) 'red)
>                 (rotate (niece x) (sibling x))
>                 ; should have red nephew now
>                 (assert (eq? (. (nephew x) color) 'red))
>                 )
>             (else
>                 ; sibling  niece  and nephew must be black
>                 (assign (. (sibling x) color) 'red)
>                 (assign x (parent x))
>                 ; subtree is bh balanced
>                 ; but has deficit in bh contribution
>                 )
>             )
> 
>         (assign (. x color) 'black)
>         )
>     )
> 
> (define (insertionFixup x)
>     (assign (. x color) 'red)
> 
>     (while (and (not (root? x)) (eq? (. (. x parent) color) 'red))
>         (if (red? (uncle x))
>             (begin
>                 (assign (. (parent x) color) 'black)
>                 (assign (. (uncle x) color) 'black)
>                 (assign (. (grandparent x) color) 'red)
>                 (assign x (grandparent x))
>                 )
>             (begin
>                 ; uncle must be black
> 
>                 (if (not (linear? x (parent x) (grandparent x)))
>                     (begin
>                         (define oldParent (parent x))
>                         (rotate x (parent x))
>                         (assign x oldParent)
>                         )
>                     )
> 
>                 (assign (. (parent x) color) 'black)
>                 ;(inspect (. (parent x) color))
>                 (assert (eq? (. (. x parent) color) 'black))
>                 (assign (. (grandparent x) color) 'red)
>                 (rotate (parent x) (grandparent x))
>                 )
>             )
>         )
>     (assign (. root color) 'black)
>     )
> 
> (define (root? x) (eq? x (. x parent)))
> (define (leftChild? x) (eq? (. (parent x) left) x))
> (define (rightChild? x) (eq? (. (parent x) right) x))
> (define (leaf? x) (and (null? (. x left))(null? (. x right))))
> (define (red? x) (and (valid? x) (eq? (. x color) 'red)))
> (define (black? x) (or  (null? x) (eq? (. x color) 'black)))
> 
> (define (sibling x)
>     (cond
>         ((leftChild? x)
>             (. (. x parent) right)
>             )
>         ((rightChild? x)
>             (. (. x parent) left)
>             )
>         (else
>             nil
>             )
>         )
>     )
> 
> (define (niece x)       ; precondition: sibling exists
>     (if (leftChild? x)
>         (. (sibling x) left)
>         (. (sibling x) right)
>         )
>     )
> 
> (define (nephew x)      ; precondition: sibling exists
>     ;(inspect (sibling x))
>     (if (leftChild? x)
>         (. (sibling x) right)
>         (. (sibling x) left)
>         )
>     )
> 
> (define (parent x) (. x parent))
> (define (grandparent x) (parent (parent x)))
> (define (uncle x)
>     (cond
>         ((leftChild? (parent x))
>             (. (grandparent x) right))
>         ((rightChild? (parent x))
>             (. (grandparent x) left))
>         (else
>             nil)
>         )
>     )
> 
> (define (linear? x y z)
>     (or
>         (and (leftChild? x) (leftChild? y))
>         (and (rightChild? x) (rightChild? y))
>         )
>     )
> 
> (define (rotate x p)
>     (cond
>         ((eq? (. p left) x) 
>             ; rotate right
>             (println "rotating right")
>             (rotator x p 'right 'left)
>             )
>         ((eq? (. p right) x)
>             ; rotate left
>             (println "rotating left")
>             (rotator x p 'left 'right)
>             )
>         (else
>             (throw 'redBlackException "rotate error")
>             )
>         )
>     )
> 
> (define (id x) x)
> 
> (define (rotator x p direction oppositeDirection)
>     (define gp (parent p))
>     (define beta (. x (id direction)))
> 
>     (assign (. p (id oppositeDirection)) beta)
>     (if (valid? beta) (assign (. beta parent) p))
> 
>     (assign (. x (id direction)) p)
>     (assign (. p parent) x)
> 
>     (if (eq? p gp)
>         (begin
>             (assign root x)
>             (assign (. x parent) x)
>             )
>         (begin
>             (if (eq? (. gp (id direction)) p)
>                 (assign (. gp (id direction)) x)
>                 (assign (. gp (id oppositeDirection)) x)
>                 )
>             (assign (. x parent) gp)
>             )
>         )
>     )
> 
> (define (findNode t v op)
>     (cond
>         ((or (null? t) (eq? v (. t value)))
>             t
>             )
>         ((op v (. t value))
>             (findNode (. t left) v op)
>             )
>         (else
>             (findNode (. t right) v op)
>             )
>         )
>     )
> 
> (define (main)
>     (define i nil)
>     (define num nil)
>     (define x nil)
>     (define input (array 1  2  9  3  6  4  7  8  5))
> 
>     (assign i 0)
>     (while (< i (length input))
>         (assign num (getElement input i))
>         (println "inserting!")
>         (insert root num <)
>         (println num " inserted.")
>         (printTree root)
>         (assign i (+ i 1))
>         )
367,384c332,348
<     println("insertion phase complete, tree is...");
<     printTree(root);
<     println("deletion phase begins...");
< 
<     i = 0;
<     while (i < length(input))
<         {
<         num = input . i;
<         x = findNode(root,num,<);
<         delete(x);
<         print(num," deleted.\n");
<         printTree(root);
<         i = i + 1;
<         }
< 
<     println("deletion phase complete, tree is...");
<     print("good-bye!\n");
<     }
---
>     (println "insertion phase complete  tree is...")
>     (printTree root)
>     (println "deletion phase begins...")
> 
>     (assign i 0)
>     (while (< i (length input))
>         (assign num (getElement input i))
>         (assign x (findNode root num <))
>         (delete x)
>         (println num " deleted.")
>         (printTree root)
>         (assign i (+ i 1))
>         )
> 
>     (println "deletion phase complete  tree is...")
>     (println "good-bye!")
>     )
386,387c350,351
< print("hello\n");
< main();
---
> (println "hello");
> (main)
402a367
> rotating left
422a388,389
> rotating left
> rotating right
467a435,436
> rotating left
> rotating right
486a456
> rotating left
507c477
< insertion phase complete, tree is...
---
> insertion phase complete  tree is...
527a498,499
> rotating left
> rotating left
575a548,549
> rotating right
> rotating left
577,588d550
< 6(black)
<    left:  4(black)
<        left:  null
<        right: 5(red)
<            left:  null
<            right: null
<    right: 8(black)
<        left:  7(red)
<            left:  null
<            right: null
<        right: null
< 6 deleted.
590,592c552,553
<    left:  4(black)
<        left:  null
<        right: 5(red)
---
>    left:  6(black)
>        left:  4(black)
594c555,558
<            right: null
---
>            right: 5(red)
>                left:  null
>                right: null
>        right: null
598c562
< 4 deleted.
---
> 6 deleted.
601c565,567
<        left:  null
---
>        left:  4(black)
>            left:  null
>            right: null
606,619c572,573
< 7 deleted.
< 8(black)
<    left:  5(red)
<        left:  null
<        right: null
<    right: null
< 8 deleted.
< 5(black)
<    left:  null
<    right: null
< 5 deleted.
< null
< deletion phase complete, tree is...
< good-bye!
---
> EXCEPTION: undefinedVariable
> file rb.s,line 232: variable right is undefined
------------------------------------------
recur.s
------------------------------------------
32c32,33
< 5050
---
> EXCEPTION: undefinedVariable
> file recur.s,line 1: variable function is undefined
------------------------------------------
recursion.s
------------------------------------------
23,423c23,24
< 399
< 398
< 397
< 396
< 395
< 394
< 393
< 392
< 391
< 390
< 389
< 388
< 387
< 386
< 385
< 384
< 383
< 382
< 381
< 380
< 379
< 378
< 377
< 376
< 375
< 374
< 373
< 372
< 371
< 370
< 369
< 368
< 367
< 366
< 365
< 364
< 363
< 362
< 361
< 360
< 359
< 358
< 357
< 356
< 355
< 354
< 353
< 352
< 351
< 350
< 349
< 348
< 347
< 346
< 345
< 344
< 343
< 342
< 341
< 340
< 339
< 338
< 337
< 336
< 335
< 334
< 333
< 332
< 331
< 330
< 329
< 328
< 327
< 326
< 325
< 324
< 323
< 322
< 321
< 320
< 319
< 318
< 317
< 316
< 315
< 314
< 313
< 312
< 311
< 310
< 309
< 308
< 307
< 306
< 305
< 304
< 303
< 302
< 301
< 300
< 299
< 298
< 297
< 296
< 295
< 294
< 293
< 292
< 291
< 290
< 289
< 288
< 287
< 286
< 285
< 284
< 283
< 282
< 281
< 280
< 279
< 278
< 277
< 276
< 275
< 274
< 273
< 272
< 271
< 270
< 269
< 268
< 267
< 266
< 265
< 264
< 263
< 262
< 261
< 260
< 259
< 258
< 257
< 256
< 255
< 254
< 253
< 252
< 251
< 250
< 249
< 248
< 247
< 246
< 245
< 244
< 243
< 242
< 241
< 240
< 239
< 238
< 237
< 236
< 235
< 234
< 233
< 232
< 231
< 230
< 229
< 228
< 227
< 226
< 225
< 224
< 223
< 222
< 221
< 220
< 219
< 218
< 217
< 216
< 215
< 214
< 213
< 212
< 211
< 210
< 209
< 208
< 207
< 206
< 205
< 204
< 203
< 202
< 201
< 200
< 199
< 198
< 197
< 196
< 195
< 194
< 193
< 192
< 191
< 190
< 189
< 188
< 187
< 186
< 185
< 184
< 183
< 182
< 181
< 180
< 179
< 178
< 177
< 176
< 175
< 174
< 173
< 172
< 171
< 170
< 169
< 168
< 167
< 166
< 165
< 164
< 163
< 162
< 161
< 160
< 159
< 158
< 157
< 156
< 155
< 154
< 153
< 152
< 151
< 150
< 149
< 148
< 147
< 146
< 145
< 144
< 143
< 142
< 141
< 140
< 139
< 138
< 137
< 136
< 135
< 134
< 133
< 132
< 131
< 130
< 129
< 128
< 127
< 126
< 125
< 124
< 123
< 122
< 121
< 120
< 119
< 118
< 117
< 116
< 115
< 114
< 113
< 112
< 111
< 110
< 109
< 108
< 107
< 106
< 105
< 104
< 103
< 102
< 101
< 100
< 99
< 98
< 97
< 96
< 95
< 94
< 93
< 92
< 91
< 90
< 89
< 88
< 87
< 86
< 85
< 84
< 83
< 82
< 81
< 80
< 79
< 78
< 77
< 76
< 75
< 74
< 73
< 72
< 71
< 70
< 69
< 68
< 67
< 66
< 65
< 64
< 63
< 62
< 61
< 60
< 59
< 58
< 57
< 56
< 55
< 54
< 53
< 52
< 51
< 50
< 49
< 48
< 47
< 46
< 45
< 44
< 43
< 42
< 41
< 40
< 39
< 38
< 37
< 36
< 35
< 34
< 33
< 32
< 31
< 30
< 29
< 28
< 27
< 26
< 25
< 24
< 23
< 22
< 21
< 20
< 19
< 18
< 17
< 16
< 15
< 14
< 13
< 12
< 11
< 10
< 9
< 8
< 7
< 6
< 5
< 4
< 3
< 2
< 1
< 0
< bottom
---
> EXCEPTION: undefinedVariable
> file recursion.s,line 1: variable var is undefined
------------------------------------------
reflect.s
------------------------------------------
38,49c38,39
< x: a is 2, b is 3, c is 5
< n is constructed via m's constructor
< x: a is 2, b is 3, c is 8
< 
< m . constructor . name is x
< n . constructor . name is x
< 
< changing m . a to 10
< changing n . b to 10
< 
< x: a is 10, b is 3, c is 5
< x: a is 2, b is 10, c is 8
---
> EXCEPTION: nonFunction
> file reflect.s,line 1: attempted to call STRING as a function
------------------------------------------
reify.s
------------------------------------------
29,31c29,30
< calling superclass:a
< superclass:a: calling virtual function b
< subclass:b
---
> EXCEPTION: undefinedVariable
> file reify.s,line 1: variable function is undefined
------------------------------------------
return3.s
------------------------------------------
42,58c42,43
< g executing...
< r is <ERROR 5300>
< i is 0 and j is 1
< i is 0 and j is 2
< i is 0 and j is 3
< i is 0 and j is 4
< i is 1 and j is 1
< i is 1 and j is 2
< i is 1 and j is 3
< i is 1 and j is 4
< i is 2 and j is 1
< i is 2 and j is 2
< trying to leave f...
< g's z is 6
< g done.
< 6
< done
---
> EXCEPTION: nonFunction
> file return3.s,line 1: attempted to call STRING as a function
------------------------------------------
return.s
------------------------------------------
1,10c1,9
< function f()
<     {
<     var x;
<     print("entering f\n");
<     x = {
<         print("entering block\n");
<         return 3;
<         print("leaving block (this should not be displayed)\n");
<         5;
<         };
---
> (define (f)
>     (define x)
>     (println "entering f...")
>     (if #t
>         (print("entering block")
>         //(return 3)
>         (println "leaving block (this should not be displayed)")
>         5
>         }
11a11,12
>     //return 22;
>     print("really leaving f (this should not be displayed)\n");
14a16
> var z = 0;
16c18,20
< print("f() returns ",f(),"\n");
---
> z = f();
> print("f() returns ",z,"\n");
> println("done");
18,21c22,23
< f() should return 3
< entering f
< entering block
< f() returns 3
---
> EXCEPTION: syntaxException
> file return.s,line 21: expecting CLOSE_PARENTHESIS, found END_OF_INPUT instead
------------------------------------------
reverse.s
------------------------------------------
35,46c35,36
< reversing hello
< reversing ello
< reversing llo
< reversing lo
< reversing o
< reversing hello
< reversing ello
< reversing llo
< reversing lo
< reversing o
< reverse(hello) is olleh
< reverse2(hello) is olleh
---
> EXCEPTION: undefinedVariable
> file reverse.s,line 1: variable function is undefined
------------------------------------------
right.s
------------------------------------------
33,35c33,34
< items . item is 1
< items . item is 2
< items . item is 3
---
> EXCEPTION: nonFunction
> file right.s,line 1: attempted to call STRING as a function
------------------------------------------
sicp1.s
------------------------------------------
0a1,1115
> ;;;;CODE FROM CHAPTER 1 OF STRUCTURE AND INTERPRETATION OF COMPUTER PROGRAMS
> 
> ;;; Examples from the book are commented out with ;: so that they
> ;;;  are easy to find and so that they will be omitted if you evaluate a
> ;;;  chunk of the file (programs with intervening examples) in Scheme.
> 
> ;;; BEWARE: Although the whole file can be loaded into Scheme,
> ;;;  don't expect the programs to work if you do so.  For example,
> ;;;  the redefinition of + in exercise 1.9 wreaks havoc with the
> ;;;  last version of square defined here.
> 
> 
> (define original-+ +)
> (define original-* *)
> 
> ;;;SECTION 1.1.1
> 
> ;; interpreter examples
> 
> (define items '(
> 486
> 
> (+ 137 349)
> (- 1000 334)
> (* 5 99)
> (/ 10 5)
> (+ 2.7 10)
> 
> (+ 21 35 12 7)
> (- 21 35 12 7)
> (- 21)
> (* 25 4 12)
> 
> (+ (* 3 5) (- 10 6))
> 
> (+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))
> 
> (+ (* 3
>      (+ (* 2 4)
>         (+ 3 5)))
>   (+ (- 10 7)
>      6))
>    
> 
> 
> ;;;SECTION 1.1.2
> 
> (define size 2)
> size
> (* 5 size)
> 
> (define pi 3.14159)
> (define radius 10)
> (* pi (* radius radius))
> (define circumference (* 2 pi radius))
> circumference
> 
> 
> ;;;SECTION 1.1.3
> 
> (* (+ 2 (* 4 6)))
> (+ 3 5 7)
> 
> 
> ;;;SECTION 1.1.4
> 
> (define (square x) (* x x))
> 
> (square 21)
> (square (+ 2 5))
> (square (square 3))
> 
> 
> (define (sum-of-squares x y)
>     (+ (square x) (square y)))
> 
> (sum-of-squares 3 4)
> 
> (define (f a)
>     (sum-of-squares (+ a 1) (* a 2)))
> 
> (f 5)
> 
> 
> ;;;SECTION 1.1.5
> 
> (f 5)
> (sum-of-squares (+ 5 1) (* 5 2))
> (+ (square 6) (square 10))
> (+ (* 6 6) (* 10 10))
> (+ 36 100)
> 
> (f 5)
> (sum-of-squares (+ 5 1) (* 5 2))
> (+    (square (+ 5 1))      (square (* 5 2))  )
> (+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))
> (+         (* 6 6)             (* 10 10))
> (+           36                   100)
> 136
> 
> ;;;SECTION 1.1.6
> 
> (define (abs x)
>     (cond
>         ((> x 0) x)
>         ((= x 0) 0)
>         ((< x 0) (- x))))
> 
> (define (abs x)
>   (cond ((< x 0) (- x))
>         (else x)))
> 
> (define (abs x)
>   (if (< x 0)
>       (- x)
>       x))
> 
> (define x 7)
> (and (> x 5) (< x 10))
> 
> (define (>= x y)
>   (or (> x y) (= x y)))
> 
> (define (>= x y)
>   (not (< x y)))
> 
> 
> ;;EXERCISE 1.1
> 10
> 
> (+ 5 3 4)
> 
> (- 9 1)
> 
> (/ 6 2)
> 
> (+ (* 2 4) (- 4 6))
> 
> (define a 3)
> 
> (define b (+ a 1))
> 
> (+ a b (* a b))
> 
> (= a b)
> 
> (if (and (> b a) (< b (* a b)))
>     b
>     a)
> 
> (cond ((= a 4) 6)
>     ((= b 4) (+ 6 7 a))
>     (else 25))
> 
> (+ 2 (if (> b a) b a))
> 
> (* (cond ((> a b) a)
>      ((< a b) b)
>      (else -1))
>     (+ a 1))
> 
> ;;EXERCISE 1.4
> (define (a-plus-abs-b a b)
>   ((if (> b 0) + -) a b))
> 
> ;;EXERCISE 1.5
> (define (p x) (if (< x 10000) (p (+ x 1)) x))
> 
> (define (test x y)
>   (if (= x 0)
>       0
>       y))
> 
> (if (= 0 0) 0 (p 0))
> ;:(test 0 (p 0))
> 
> ;;;SECTION 1.1.7
> 
> (define (sqrt-iter guess x)
>   (if (good-enough? guess x)
>       guess
>       (sqrt-iter (improve guess x)
>                  x)))
> 
> (define (improve guess x)
>   (average guess (/ x guess)))
> 
> (define (average x y)
>   (/ (+ x y) 2))
> 
> (define (good-enough? guess x)
>   (< (abs (- (square guess) x)) 0.001))
> 
> (define (sqrt x)
>   (sqrt-iter 1.0 x))
> 
> 
> (sqrt 9)
> (sqrt (+ 100 37))
> (sqrt (+ (sqrt 2) (sqrt 3)))
> (square (sqrt 1000))
> 
> 
> ;;EXERCISE 1.6
> (define (new-if predicate then-clause else-clause)
>   (cond (predicate then-clause)
>         (else else-clause)))
> 
> (new-if (= 2 3) 0 5)
> 
> (new-if (= 1 1) 0 5)
> 
> (define (sqrt-iter guess x)
>   (new-if (good-enough? guess x)
>           guess
>           (sqrt-iter (improve guess x)
>                      x)))
> 
> 
> ;;;SECTION 1.1.8
> 
> (define (square x) (* x x))
> 
> (define (square x) 
>   (exp (double (log x))))
> 
> (define (double x) (+ x x))
> 
> 
> ;; As in 1.1.7
> (define (sqrt x)
>   (sqrt-iter 1.0 x))
> 
> (define (sqrt-iter guess x)
>   (if (good-enough? guess x)
>       guess
>       (sqrt-iter (improve guess x) x)))
> 
> (define (good-enough? guess x)
>   (< (abs (- (square guess) x)) 0.001))
> 
> (define (improve guess x)
>   (average guess (/ x guess)))
> 
> 
> ;; Block-structured
> (define (sqrt x)
>   (define (good-enough? guess x)
>     (< (abs (- (square guess) x)) 0.001))
>   (define (improve guess x)
>     (average guess (/ x guess)))
>   (define (sqrt-iter guess x)
>     (if (good-enough? guess x)
>         guess
>         (sqrt-iter (improve guess x) x)))
>   (sqrt-iter 1.0 x))
> 
> ;; Taking advantage of lexical scoping
> (define (sqrt x)
>   (define (good-enough? guess)
>     (< (abs (- (square guess) x)) 0.001))
>   (define (improve guess)
>     (average guess (/ x guess)))
>   (define (sqrt-iter guess)
>     (if (good-enough? guess)
>         guess
>         (sqrt-iter (improve guess))))
>   (sqrt-iter 1.0))
> 
> 
> ;;;SECTION 1.2.1
> 
> ;; Recursive
> 
> (define (factorial n)
>   (if (= n 1)
>       1
>       (* n (factorial (- n 1)))))
> 
> 
> ;; Iterative
> 
> (define (factorial n)
>   (fact-iter 1 1 n))
> 
> (define (fact-iter product counter max-count)
>   (if (> counter max-count)
>       product
>       (fact-iter (* counter product)
>                  (+ counter 1)
>                  max-count)))
> 
> ;; Iterative, block-structured (from footnote)
> (define (factorial n)
>   (define (iter product counter)
>     (if (> counter n)
>         product
>         (iter (* counter product)
>               (+ counter 1))))
>   (iter 1 1))
> 
> ;;EXERCISE 1.9
> (define (+ a b)
>   (if (= a 0)
>       b
>       (inc (+ (dec a) b))))
> 
> (define (+ a b)
>   (if (= a 0)
>       b
>       (+ (dec a) (inc b))))
> 
> ;;EXERCISE 1.10
> (define (A x y)
>   (cond ((= y 0) 0)
>         ((= x 0) (* 2 y))
>         ((= y 1) 2)
>         (else (A (- x 1)
>                  (A x (- y 1))))))
> 
> (A 1 10)
> 
> (A 2 4)
> 
> (A 3 3)
> 
> (define (f n) (A 0 n))
> 
> (define (g n) (A 1 n))
> 
> (define (h n) (A 2 n))
> 
> (define (k n) (* 5 n n))
> 
> 
> ;;;SECTION 1.2.2
> 
> ;; Recursive
> 
> (define (fib n)
>   (cond ((= n 0) 0)
>         ((= n 1) 1)
>         (else (+ (fib (- n 1))
>                  (fib (- n 2))))))
> 
> ;; Iterative
> 
> (define (fib n)
>   (fib-iter 1 0 n))
> 
> (define (fib-iter a b count)
>   (if (= count 0)
>       b
>       (fib-iter (+ a b) a (- count 1))))
> 
> ;; Counting change
> 
> (define + original-+)
> 
> (define (count-change amount)
>   (cc amount 5))
> 
> (define (cc amount kinds-of-coins)
>   (inspect (list 'cc amount kinds-of-coins))
>   (inspect (stack-depth))
>   (cond ((= amount 0) 1)
>         ((or (< amount 0) (= kinds-of-coins 0)) 0)
>         (else (+ (cc amount
>                      (- kinds-of-coins 1))
>                  (cc (- amount
>                         (first-denomination kinds-of-coins))
>                      kinds-of-coins)))))
> 
> (define (first-denomination kinds-of-coins)
>   (cond ((= kinds-of-coins 1) 1)
>         ((= kinds-of-coins 2) 5)
>         ((= kinds-of-coins 3) 10)
>         ((= kinds-of-coins 4) 25)
>         ((= kinds-of-coins 5) 50)))
> 
> (count-change 10)
> 
> ;;;SECTION 1.2.3
> 
> ;;EXERCISE 1.15
> (define (cube x) (* x x x))
> 
> (define (p x) (- (* 3 x) (* 4 (cube x))))
> 
> (define (sine angle)
>    (if (not (> (abs angle) 0.1))
>        angle
>        (p (sine (/ angle 3.0)))))
> 
> 
> ;;;SECTION 1.2.4
> 
> ;; Linear recursion
> (define (expt b n)
>   (if (= n 0)
>       1
>       (* b (expt b (- n 1)))))
> 
> 
> ;; Linear iteration
> (define (expt b n)
>   (expt-iter b n 1))
> 
> (define (expt-iter b counter product)
>   (if (= counter 0)
>       product
>       (expt-iter b
>                 (- counter 1)
>                 (* b product)))) 
> 
> ;; Logarithmic iteration
> (define (fast-expt b n)
>   (cond ((= n 0) 1)
>         ((even? n) (square (fast-expt b (/ n 2))))
>         (else (* b (fast-expt b (- n 1))))))
> 
> (define (even? n)
>   (= (remainder n 2) 0))
> 
> 
> ;;EXERCISE 1.17
> (define (* a b)
>   (if (= b 0)
>       0
>       (+ a (* a (- b 1)))))
> 
> ;;EXERCISE 1.19
> (define (fib n)
>   (fib-iter 1 0 0 1 n))
> 
> (define (fib-iter a b p q count)
>   (cond ((= count 0) b)
>         ((even? count)
>          (fib-iter a
>                    b
>                    ??FILL-THIS-IN?? ; compute p'
>                    ??FILL-THIS-IN?? ; compute q'
>                    (/ count 2)))
>         (else (fib-iter (+ (* b q) (* a q) (* a p))
>                         (+ (* b p) (* a q))
>                         p
>                         q
>                         (- count 1)))))
> 
> 
> ;;;SECTION 1.2.5
> 
> (define (gcd a b)
>   (if (= b 0)
>       a
>       (gcd b (remainder a b))))
> 
> 
> ;;;SECTION 1.2.6
> 
> ;; prime?
> 
> (define (smallest-divisor n)
>   (find-divisor n 2))
> 
> (define (find-divisor n test-divisor)
>   (cond ((> (square test-divisor) n) n)
>         ((divides? test-divisor n) test-divisor)
>         (else (find-divisor n (+ test-divisor 1)))))
> 
> (define (divides? a b)
>   (= (remainder b a) 0))
> 
> (define (prime? n)
>   (= n (smallest-divisor n)))
> 
> 
> ;; fast-prime?
> 
> (define (expmod base exp m)
>   (cond ((= exp 0) 1)
>         ((even? exp)
>          (remainder (square (expmod base (/ exp 2) m))
>                     m))
>         (else
>          (remainder (* base (expmod base (- exp 1) m))
>                     m))))        
> 
> (define (fermat-test n)
>   (define (try-it a)
>     (= (expmod a n n) a))
>   (try-it (+ 1 (random (- n 1)))))
> 
> (define (fast-prime? n times)
>   (cond ((= times 0) true)
>         ((fermat-test n) (fast-prime? n (- times 1)))
>         (else false)))
> 
> 
> ;;EXERCISE 1.22
> (define (timed-prime-test n)
>   (newline)
>   (display n)
>   (start-prime-test n (runtime)))
> 
> (define (start-prime-test n start-time)
>   (if (prime? n)
>       (report-prime (- (runtime) start-time))))
> 
> (define (report-prime elapsed-time)
>   (display " *** ")
>   (display elapsed-time))
> 
> ;;EXERCISE 1.25
> (define (expmod base exp m)
>   (remainder (fast-expt base exp) m))
> 
> ;;EXERCISE 1.26
> (define (expmod base exp m)
>   (cond ((= exp 0) 1)
>         ((even? exp)
>          (remainder (* (expmod base (/ exp 2) m)
>                        (expmod base (/ exp 2) m))
>                     m))
>         (else
>          (remainder (* base (expmod base (- exp 1) m))
>                     m))))
> 
> ;;;SECTION 1.3
> 
> (define * original-*)
> (define (cube x) (* x x x))
> 
> ;;;SECTION 1.3.1
> 
> (define (sum-integers a b)
>   (if (> a b)
>       0
>       (+ a (sum-integers (+ a 1) b))))
> 
> (define (sum-cubes a b)
>   (if (> a b)
>       0
>       (+ (cube a) (sum-cubes (+ a 1) b))))
> 
> (define (pi-sum a b)
>   (if (> a b)
>       0
>       (+ (/ 1.0 (* a (+ a 2))) (pi-sum (+ a 4) b))))
> 
> (define (sum term a next b)
>   (if (> a b)
>       0
>       (+ (term a)
>          (sum term (next a) next b))))
> 
> 
> ;; Using sum
> 
> (define (inc n) (+ n 1))
> 
> (define (sum-cubes a b)
>   (sum cube a inc b))
> 
> (sum-cubes 1 10)
> 
> 
> (define (identity x) x)
> 
> (define (sum-integers a b)
>   (sum identity a inc b))
> 
> (sum-integers 1 10)
> 
> 
> (define (pi-sum a b)
>   (define (pi-term x)
>     (/ 1.0 (* x (+ x 2))))
>   (define (pi-next x)
>     (+ x 4))
>   (sum pi-term a pi-next b))
> 
> (* 8 (pi-sum 1 100))
> 
> 
> (define (integral f a b dx)
>   (define (add-dx x) (+ x dx))
>   (* (sum f (+ a (/ dx 2)) add-dx b)
>      dx))
> 
> (integral cube 0 1 0.01)
> 
> (integral cube 0 1 0.008)
> 
> 
> ;;EXERCISE 1.32
> ;:(accumulate combiner null-value term a next b)
> 
> ;;;SECTION 1.3.2
> 
> (define (pi-sum a b)
>   (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
>        a
>        (lambda (x) (+ x 4))
>        b))
> 
> (define (integral f a b dx)
>   (* (sum f
>           (+ a (/ dx 2.0))
>           (lambda (x) (+ x dx))
>           b)
>      dx))
> 
> (define (plus4 x) (+ x 4))
> 
> (define plus4 (lambda (x) (+ x 4)))
> 
> ((lambda (x y z) (+ x y (square z))) 1 2 3)
> 
> (log 10)
> 
> ;; Using let
> 
> (define (f x y)
>   (define (f-helper a b)
>     (+ (* x (square a))
>        (* y b)
>        (* a b)))
>   (f-helper (+ 1 (* x y)) 
>             (- 1 y)))
> 
> (define (f x y)
>   ((lambda (a b)
>      (+ (* x (square a))
>         (* y b)
>         (* a b)))
>    (+ 1 (* x y))
>    (- 1 y)))
> 
> (define (f x y)
>   (let ((a (+ 1 (* x y)))
>         (b (- 1 y)))
>     (+ (* x (square a))
>        (* y b)
>        (* a b))))
> 
> (+ (let ((x 3))
>       (+ x (* x 10)))
>     x)
> 
> (let ((x 3)
>       (y (+ x 2)))
>   (* x y))
> 
> (define (f x y)
>   (define a (+ 1 (* x y)))
>   (define b (- 1 y))
>   (+ (* x (square a))
>      (* y b)
>      (* a b)))
> 
> 
> ;;EXERCISE 1.34
> (define (f g)
>   (g 2))
> 
> (f square)
> 
> (f (lambda (z) (* z (+ z 1))))
> 
> 
> ;;;SECTION 1.3.3
> 
> ;; Half-interval method
> 
> (define (search f neg-point pos-point)
>   (let ((midpoint (average neg-point pos-point)))
>     (if (close-enough? neg-point pos-point)
>         midpoint
>         (let ((test-value (f midpoint)))
>           (cond ((positive? test-value)
>                  (search f neg-point midpoint))
>                 ((negative? test-value)
>                  (search f midpoint pos-point))
>                 (else midpoint))))))
> 
> (define (close-enough? x y)
>   (< (abs (- x y)) 0.001))
> 
> (define (half-interval-method f a b)
>   (let ((a-value (f a))
>         (b-value (f b)))
>     (cond ((and (negative? a-value) (positive? b-value))
>            (search f a b))
>           ((and (negative? b-value) (positive? a-value))
>            (search f b a))
>           (else
>            (error "Values are not of opposite sign" a b)))))
> 
> 
> (half-interval-method sin 2.0 4.0)
> 
> (half-interval-method (lambda (x) (- (* x x x) (* 2 x) 3))
>                       1.0
>                       2.0)
> 
> 
> ;; Fixed points
> 
> (define tolerance 0.00001)
> 
> (define (fixed-point f first-guess)
>   (define (close-enough? v1 v2)
>     (< (abs (- v1 v2)) tolerance))
>   (define (try guess)
>     (let ((next (f guess)))
>       (if (close-enough? guess next)
>           next
>           (try next))))
>   (try first-guess))
> 
> 
> (sin .707)
> (cos .707)
> 
> (fixed-point cos 1.0)
> 
> (fixed-point (lambda (y) (+ (sin y) (cos y)))
>              1.0)
> 
> 
> (define (sqrt x)
>   (fixed-point (lambda (y) (/ x y))
>                1.0))
> 
> (define (sqrt x)
>   (fixed-point (lambda (y) (average y (/ x y)))
>                1.0))
> 
> 
> ;;EXERCISE 1.37
> ;:(cont-frac (lambda (i) 1.0)
> ;:           (lambda (i) 1.0)
> ;:           k)
> 
> 
> ;;;SECTION 1.3.4
> 
> (define (average-damp f)
>   (lambda (x) (average x (f x))))
> 
> ((average-damp square) 10)
> 
> (define (sqrt x)
>   (fixed-point (average-damp (lambda (y) (/ x y)))
>                1.0))
> 
> (define (cube-root x)
>   (fixed-point (average-damp (lambda (y) (/ x (square y))))
>                1.0))
> 
> 
> ;; Newton's method
> 
> (define (deriv g)
>   (lambda (x)
>     (/ (- (g (+ x dx)) (g x))
>        dx)))
> (define dx 0.00001)
> 
> 
> (define (cube x) (* x x x))
> 
> ((deriv cube) 5)
> 
> (define (newton-transform g)
>   (lambda (x)
>     (- x (/ (g x) ((deriv g) x)))))
> 
> (define (newtons-method g guess)
>   (fixed-point (newton-transform g) guess))
> 
> 
> (define (sqrt x)
>   (newtons-method (lambda (y) (- (square y) x))
>                   1.0))
> 
> 
> ;; Fixed point of transformed function
> 
> (define (fixed-point-of-transform g transform guess)
>   (fixed-point (transform g) guess))
> 
> (define (sqrt x)
>   (fixed-point-of-transform (lambda (y) (/ x y))
>                             average-damp
>                             1.0))
> 
> (define (sqrt x)
>   (fixed-point-of-transform (lambda (y) (- (square y) x))
>                             newton-transform
>                             1.0))
> 
> 
> ;;EXERCISE 1.40
> ;:(newtons-method (cubic a b c) 1)
> 
> 
> ;;EXERCISE 1.41
> ;:(((double (double double)) inc) 5)
> 
> 
> ;;EXERCISE 1.42
> ;:((compose square inc) 6)
> 
> 
> ;;EXERCISE 1.43
> ;:((repeated square 2) 5)
> 
> )) ;end of items
> 
> (define (process items #)
>     (define (iter items)
>         (cond
>             ((null? items) 'done)
>             (else
>                 (define result (eval (car items) #))
>                 (println (car items) " is " result)
>                 ;(inspect (stack-depth))
>                 (iter (cdr items))
>                 )
>             )
>         )
>     (iter items)
>     )
> 
> (process items)
> 
> ------------------------------------------
> 486 is 486
> (+ 137 349) is 486
> (- 1000 334) is 666
> (* 5 99) is 495
> (/ 10 5) is 2
> (+ 2.700000 10) is 12.700000
> (+ 21 35 12 7) is 75
> (- 21 35 12 7) is -33
> (- 21) is -21
> (* 25 4 12) is 1200
> (+ (* 3 5) (- 10 6)) is 19
> (+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6)) is 57
> (+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6)) is 57
> (define size 2) is 2
> size is 2
> (* 5 size) is 10
> (define pi 3.141590) is 3.141590
> (define radius 10) is 10
> (* pi (* radius radius)) is 314.159000
> (define circumference (* 2 pi radius)) is 62.831800
> circumference is 62.831800
> (* (+ 2 (* 4 6))) is 26
> (+ 3 5 7) is 15
> (define (square x) (* x x)) is <function square(x)>
> (square 21) is 441
> (square (+ 2 5)) is 49
> (square (square 3)) is 81
> (define (sum-of-squares x y) (+ (square x) (square y))) is <function sum-of-squares(x y)>
> (sum-of-squares 3 4) is 25
> (define (f a) (sum-of-squares (+ a 1) (* a 2))) is <function f(a)>
> (f 5) is 136
> (f 5) is 136
> (sum-of-squares (+ 5 1) (* 5 2)) is 136
> (+ (square 6) (square 10)) is 136
> (+ (* 6 6) (* 10 10)) is 136
> (+ 36 100) is 136
> (f 5) is 136
> (sum-of-squares (+ 5 1) (* 5 2)) is 136
> (+ (square (+ 5 1)) (square (* 5 2))) is 136
> (+ (* (+ 5 1) (+ 5 1)) (* (* 5 2) (* 5 2))) is 136
> (+ (* 6 6) (* 10 10)) is 136
> (+ 36 100) is 136
> 136 is 136
> (define (abs x) (cond ((> x 0) x) ((= x 0) 0) ((< x 0) (- x)))) is <function abs(x)>
> (define (abs x) (cond ((< x 0) (- x)) (else x))) is <function abs(x)>
> (define (abs x) (if (< x 0) (- x) x)) is <function abs(x)>
> (define x 7) is 7
> (and (> x 5) (< x 10)) is #t
> (define (>= x y) (or (> x y) (= x y))) is <function >=(x y)>
> (define (>= x y) (not (< x y))) is <function >=(x y)>
> 10 is 10
> (+ 5 3 4) is 12
> (- 9 1) is 8
> (/ 6 2) is 3
> (+ (* 2 4) (- 4 6)) is 6
> (define a 3) is 3
> (define b (+ a 1)) is 4
> (+ a b (* a b)) is 19
> (= a b) is #f
> (if (and (> b a) (< b (* a b))) b a) is 4
> (cond ((= a 4) 6) ((= b 4) (+ 6 7 a)) (else 25)) is 16
> (+ 2 (if (> b a) b a)) is 6
> (* (cond ((> a b) a) ((< a b) b) (else -1)) (+ a 1)) is 16
> (define (a-plus-abs-b a b) ((if (> b 0) + -) a b)) is <function a-plus-abs-b(a b)>
> (define (p x) (if (< x 10000) (p (+ x 1)) x)) is <function p(x)>
> (define (test x y) (if (= x 0) 0 y)) is <function test(x y)>
> (if (= 0 0) 0 (p 0)) is 0
> (define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) is <function sqrt-iter(guess x)>
> (define (improve guess x) (average guess (/ x guess))) is <function improve(guess x)>
> (define (average x y) (/ (+ x y) 2)) is <function average(x y)>
> (define (good-enough? guess x) (< (abs (- (square guess) x)) 0.001000)) is <function good-enough?(guess x)>
> (define (sqrt x) (sqrt-iter 1.000000 x)) is <function sqrt(x)>
> (sqrt 9) is 3.000092
> (sqrt (+ 100 37)) is 11.704700
> (sqrt (+ (sqrt 2) (sqrt 3))) is 1.773928
> (square (sqrt 1000)) is 1000.000370
> (define (new-if predicate then-clause else-clause) (cond (predicate then-clause) (else else-clause))) is <function new-if(predicate then-clause else-clause)>
> (new-if (= 2 3) 0 5) is 5
> (new-if (= 1 1) 0 5) is 0
> (define (sqrt-iter guess x) (new-if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) is <function sqrt-iter(guess x)>
> (define (square x) (* x x)) is <function square(x)>
> (define (square x) (exp (double (log x)))) is <function square(x)>
> (define (double x) (+ x x)) is <function double(x)>
> (define (sqrt x) (sqrt-iter 1.000000 x)) is <function sqrt(x)>
> (define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) is <function sqrt-iter(guess x)>
> (define (good-enough? guess x) (< (abs (- (square guess) x)) 0.001000)) is <function good-enough?(guess x)>
> (define (improve guess x) (average guess (/ x guess))) is <function improve(guess x)>
> (define (sqrt x) (define (good-enough? guess x) (< (abs (- (square guess) x)) 0.001000)) (define (improve guess x) (average guess (/ x guess))) (define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) (sqrt-iter 1.000000 x)) is <function sqrt(x)>
> (define (sqrt x) (define (good-enough? guess) (< (abs (- (square guess) x)) 0.001000)) (define (improve guess) (average guess (/ x guess))) (define (sqrt-iter guess) (if (good-enough? guess) guess (sqrt-iter (improve guess)))) (sqrt-iter 1.000000)) is <function sqrt(x)>
> (define (factorial n) (if (= n 1) 1 (* n (factorial (- n 1))))) is <function factorial(n)>
> (define (factorial n) (fact-iter 1 1 n)) is <function factorial(n)>
> (define (fact-iter product counter max-count) (if (> counter max-count) product (fact-iter (* counter product) (+ counter 1) max-count))) is <function fact-iter(product counter max-count)>
> (define (factorial n) (define (iter product counter) (if (> counter n) product (iter (* counter product) (+ counter 1)))) (iter 1 1)) is <function factorial(n)>
> (define (+ a b) (if (= a 0) b (inc (+ (dec a) b)))) is <function +(a b)>
> (define (+ a b) (if (= a 0) b (+ (dec a) (inc b)))) is <function +(a b)>
> (define (A x y) (cond ((= y 0) 0) ((= x 0) (* 2 y)) ((= y 1) 2) (else (A (- x 1) (A x (- y 1)))))) is <function A(x y)>
> (A 1 10) is 1024
> (A 2 4) is 65536
> (A 3 3) is 65536
> (define (f n) (A 0 n)) is <function f(n)>
> (define (g n) (A 1 n)) is <function g(n)>
> (define (h n) (A 2 n)) is <function h(n)>
> (define (k n) (* 5 n n)) is <function k(n)>
> (define (fib n) (cond ((= n 0) 0) ((= n 1) 1) (else (+ (fib (- n 1)) (fib (- n 2)))))) is <function fib(n)>
> (define (fib n) (fib-iter 1 0 n)) is <function fib(n)>
> (define (fib-iter a b count) (if (= count 0) b (fib-iter (+ a b) a (- count 1)))) is <function fib-iter(a b count)>
> (define + original-+) is <builtIn +(@)>
> (define (count-change amount) (cc amount 5)) is <function count-change(amount)>
> (define (cc amount kinds-of-coins) (inspect (list (quote cc) amount kinds-of-coins)) (inspect (stack-depth)) (cond ((= amount 0) 1) ((or (< amount 0) (= kinds-of-coins 0)) 0) (else (+ (cc amount (- kinds-of-coins 1)) (cc (- amount (first-denomination kinds-of-coins)) kinds-of-coins))))) is <function cc(amount kinds-of-coins)>
> (define (first-denomination kinds-of-coins) (cond ((= kinds-of-coins 1) 1) ((= kinds-of-coins 2) 5) ((= kinds-of-coins 3) 10) ((= kinds-of-coins 4) 25) ((= kinds-of-coins 5) 50))) is <function first-denomination(kinds-of-coins)>
> (list (quote cc) amount kinds-of-coins) is (cc 10 5)
> (stack-depth) is 20
> (list (quote cc) amount kinds-of-coins) is (cc 10 4)
> (stack-depth) is 25
> (list (quote cc) amount kinds-of-coins) is (cc 10 3)
> (stack-depth) is 30
> (list (quote cc) amount kinds-of-coins) is (cc 10 2)
> (stack-depth) is 35
> (list (quote cc) amount kinds-of-coins) is (cc 10 1)
> (stack-depth) is 40
> (list (quote cc) amount kinds-of-coins) is (cc 10 0)
> (stack-depth) is 45
> (list (quote cc) amount kinds-of-coins) is (cc 9 1)
> (stack-depth) is 46
> (list (quote cc) amount kinds-of-coins) is (cc 9 0)
> (stack-depth) is 51
> (list (quote cc) amount kinds-of-coins) is (cc 8 1)
> (stack-depth) is 52
> (list (quote cc) amount kinds-of-coins) is (cc 8 0)
> (stack-depth) is 57
> (list (quote cc) amount kinds-of-coins) is (cc 7 1)
> (stack-depth) is 58
> (list (quote cc) amount kinds-of-coins) is (cc 7 0)
> (stack-depth) is 63
> (list (quote cc) amount kinds-of-coins) is (cc 6 1)
> (stack-depth) is 64
> (list (quote cc) amount kinds-of-coins) is (cc 6 0)
> (stack-depth) is 69
> (list (quote cc) amount kinds-of-coins) is (cc 5 1)
> (stack-depth) is 70
> (list (quote cc) amount kinds-of-coins) is (cc 5 0)
> (stack-depth) is 75
> (list (quote cc) amount kinds-of-coins) is (cc 4 1)
> (stack-depth) is 76
> (list (quote cc) amount kinds-of-coins) is (cc 4 0)
> (stack-depth) is 81
> (list (quote cc) amount kinds-of-coins) is (cc 3 1)
> (stack-depth) is 82
> (list (quote cc) amount kinds-of-coins) is (cc 3 0)
> (stack-depth) is 87
> (list (quote cc) amount kinds-of-coins) is (cc 2 1)
> (stack-depth) is 88
> (list (quote cc) amount kinds-of-coins) is (cc 2 0)
> (stack-depth) is 93
> (list (quote cc) amount kinds-of-coins) is (cc 1 1)
> (stack-depth) is 94
> (list (quote cc) amount kinds-of-coins) is (cc 1 0)
> (stack-depth) is 99
> (list (quote cc) amount kinds-of-coins) is (cc 0 1)
> (stack-depth) is 100
> (list (quote cc) amount kinds-of-coins) is (cc 5 2)
> (stack-depth) is 41
> (list (quote cc) amount kinds-of-coins) is (cc 5 1)
> (stack-depth) is 46
> (list (quote cc) amount kinds-of-coins) is (cc 5 0)
> (stack-depth) is 51
> (list (quote cc) amount kinds-of-coins) is (cc 4 1)
> (stack-depth) is 52
> (list (quote cc) amount kinds-of-coins) is (cc 4 0)
> (stack-depth) is 57
> (list (quote cc) amount kinds-of-coins) is (cc 3 1)
> (stack-depth) is 58
> (list (quote cc) amount kinds-of-coins) is (cc 3 0)
> (stack-depth) is 63
> (list (quote cc) amount kinds-of-coins) is (cc 2 1)
> (stack-depth) is 64
> (list (quote cc) amount kinds-of-coins) is (cc 2 0)
> (stack-depth) is 69
> (list (quote cc) amount kinds-of-coins) is (cc 1 1)
> (stack-depth) is 70
> (list (quote cc) amount kinds-of-coins) is (cc 1 0)
> (stack-depth) is 75
> (list (quote cc) amount kinds-of-coins) is (cc 0 1)
> (stack-depth) is 76
> (list (quote cc) amount kinds-of-coins) is (cc 0 2)
> (stack-depth) is 47
> (list (quote cc) amount kinds-of-coins) is (cc 0 3)
> (stack-depth) is 36
> (list (quote cc) amount kinds-of-coins) is (cc -15 4)
> (stack-depth) is 31
> (list (quote cc) amount kinds-of-coins) is (cc -40 5)
> (stack-depth) is 26
> (count-change 10) is 4
> (define (cube x) (* x x x)) is <function cube(x)>
> (define (p x) (- (* 3 x) (* 4 (cube x)))) is <function p(x)>
> (define (sine angle) (if (not (> (abs angle) 0.100000)) angle (p (sine (/ angle 3.000000))))) is <function sine(angle)>
> (define (expt b n) (if (= n 0) 1 (* b (expt b (- n 1))))) is <function expt(b n)>
> (define (expt b n) (expt-iter b n 1)) is <function expt(b n)>
> (define (expt-iter b counter product) (if (= counter 0) product (expt-iter b (- counter 1) (* b product)))) is <function expt-iter(b counter product)>
> (define (fast-expt b n) (cond ((= n 0) 1) ((even? n) (square (fast-expt b (/ n 2)))) (else (* b (fast-expt b (- n 1)))))) is <function fast-expt(b n)>
> (define (even? n) (= (remainder n 2) 0)) is <function even?(n)>
> (define (* a b) (if (= b 0) 0 (+ a (* a (- b 1))))) is <function *(a b)>
> (define (fib n) (fib-iter 1 0 0 1 n)) is <function fib(n)>
> (define (fib-iter a b p q count) (cond ((= count 0) b) ((even? count) (fib-iter a b ??FILL-THIS-IN?? ??FILL-THIS-IN?? (/ count 2))) (else (fib-iter (+ (* b q) (* a q) (* a p)) (+ (* b p) (* a q)) p q (- count 1))))) is <function fib-iter(a b p q count)>
> (define (gcd a b) (if (= b 0) a (gcd b (remainder a b)))) is <function gcd(a b)>
> (define (smallest-divisor n) (find-divisor n 2)) is <function smallest-divisor(n)>
> (define (find-divisor n test-divisor) (cond ((> (square test-divisor) n) n) ((divides? test-divisor n) test-divisor) (else (find-divisor n (+ test-divisor 1))))) is <function find-divisor(n test-divisor)>
> (define (divides? a b) (= (remainder b a) 0)) is <function divides?(a b)>
> (define (prime? n) (= n (smallest-divisor n))) is <function prime?(n)>
> (define (expmod base exp m) (cond ((= exp 0) 1) ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m)) (else (remainder (* base (expmod base (- exp 1) m)) m)))) is <function expmod(base exp m)>
> (define (fermat-test n) (define (try-it a) (= (expmod a n n) a)) (try-it (+ 1 (random (- n 1))))) is <function fermat-test(n)>
> (define (fast-prime? n times) (cond ((= times 0) true) ((fermat-test n) (fast-prime? n (- times 1))) (else false))) is <function fast-prime?(n times)>
> (define (timed-prime-test n) (newline) (display n) (start-prime-test n (runtime))) is <function timed-prime-test(n)>
> (define (start-prime-test n start-time) (if (prime? n) (report-prime (- (runtime) start-time)))) is <function start-prime-test(n start-time)>
> (define (report-prime elapsed-time) (display " *** ") (display elapsed-time)) is <function report-prime(elapsed-time)>
> (define (expmod base exp m) (remainder (fast-expt base exp) m)) is <function expmod(base exp m)>
> (define (expmod base exp m) (cond ((= exp 0) 1) ((even? exp) (remainder (* (expmod base (/ exp 2) m) (expmod base (/ exp 2) m)) m)) (else (remainder (* base (expmod base (- exp 1) m)) m)))) is <function expmod(base exp m)>
> (define * original-*) is <builtIn *(@)>
> (define (cube x) (* x x x)) is <function cube(x)>
> (define (sum-integers a b) (if (> a b) 0 (+ a (sum-integers (+ a 1) b)))) is <function sum-integers(a b)>
> (define (sum-cubes a b) (if (> a b) 0 (+ (cube a) (sum-cubes (+ a 1) b)))) is <function sum-cubes(a b)>
> (define (pi-sum a b) (if (> a b) 0 (+ (/ 1.000000 (* a (+ a 2))) (pi-sum (+ a 4) b)))) is <function pi-sum(a b)>
> (define (sum term a next b) (if (> a b) 0 (+ (term a) (sum term (next a) next b)))) is <function sum(term a next b)>
> (define (inc n) (+ n 1)) is <function inc(n)>
> (define (sum-cubes a b) (sum cube a inc b)) is <function sum-cubes(a b)>
> (sum-cubes 1 10) is 3025
> (define (identity x) x) is <function identity(x)>
> (define (sum-integers a b) (sum identity a inc b)) is <function sum-integers(a b)>
> (sum-integers 1 10) is 55
> (define (pi-sum a b) (define (pi-term x) (/ 1.000000 (* x (+ x 2)))) (define (pi-next x) (+ x 4)) (sum pi-term a pi-next b)) is <function pi-sum(a b)>
> (* 8 (pi-sum 1 100)) is 3.121595
> (define (integral f a b dx) (define (add-dx x) (+ x dx)) (* (sum f (+ a (/ dx 2)) add-dx b) dx)) is <function integral(f a b dx)>
> (integral cube 0 1 0.010000) is 0.249988
> (integral cube 0 1 0.008000) is 0.249992
> (define (pi-sum a b) (sum <lambda ()> a <lambda ()> b)) is <function pi-sum(a b)>
> (define (integral f a b dx) (* (sum f (+ a (/ dx 2.000000)) <lambda ()> b) dx)) is <function integral(f a b dx)>
> (define (plus4 x) (+ x 4)) is <function plus4(x)>
> (define plus4 <lambda ()>) is <function anonymous(x)>
> (<lambda (square z)> 1 2 3) is 12.000000
> (log 10) is 2.302585
> (define (f x y) (define (f-helper a b) (+ (* x (square a)) (* y b) (* a b))) (f-helper (+ 1 (* x y)) (- 1 y))) is <function f(x y)>
> (define (f x y) (<lambda (* a b)> (+ 1 (* x y)) (- 1 y))) is <function f(x y)>
> (define (f x y) (let ((a (+ 1 (* x y))) (b (- 1 y))) (+ (* x (square a)) (* y b) (* a b)))) is <function f(x y)>
> (+ (let ((x 3)) (+ x (* x 10))) x) is 40
> (let ((x 3) (y (+ x 2))) (* x y)) is 27
> (define (f x y) (define a (+ 1 (* x y))) (define b (- 1 y)) (+ (* x (square a)) (* y b) (* a b))) is <function f(x y)>
> (define (f g) (g 2)) is <function f(g)>
> (f square) is 4.000000
> (f <lambda ()>) is 6
> (define (search f neg-point pos-point) (let ((midpoint (average neg-point pos-point))) (if (close-enough? neg-point pos-point) midpoint (let ((test-value (f midpoint))) (cond ((positive? test-value) (search f neg-point midpoint)) ((negative? test-value) (search f midpoint pos-point)) (else midpoint)))))) is <function search(f neg-point pos-point)>
> (define (close-enough? x y) (< (abs (- x y)) 0.001000)) is <function close-enough?(x y)>
> (define (half-interval-method f a b) (let ((a-value (f a)) (b-value (f b))) (cond ((and (negative? a-value) (positive? b-value)) (search f a b)) ((and (negative? b-value) (positive? a-value)) (search f b a)) (else (error "Values are not of opposite sign" a b))))) is <function half-interval-method(f a b)>
> (half-interval-method sin 2.000000 4.000000) is 3.141113
> (half-interval-method <lambda (__label)> 1.000000 2.000000) is 1.893066
> (define tolerance 0.000010) is 0.000010
> (define (fixed-point f first-guess) (define (close-enough? v1 v2) (< (abs (- v1 v2)) tolerance)) (define (try guess) (let ((next (f guess))) (if (close-enough? guess next) next (try next)))) (try first-guess)) is <function fixed-point(f first-guess)>
> (sin 0.707000) is 0.649556
> (cos 0.707000) is 0.760314
> (fixed-point cos 1.000000) is 0.739082
> (fixed-point <lambda ()> 1.000000) is 1.258732
> (define (sqrt x) (fixed-point <lambda ()> 1.000000)) is <function sqrt(x)>
> (define (sqrt x) (fixed-point <lambda ()> 1.000000)) is <function sqrt(x)>
> (define (average-damp f) <lambda ()>) is <function average-damp(f)>
> ((average-damp square) 10) is 55.000000
> (define (sqrt x) (fixed-point (average-damp <lambda ()>) 1.000000)) is <function sqrt(x)>
> (define (cube-root x) (fixed-point (average-damp <lambda ()>) 1.000000)) is <function cube-root(x)>
> (define (deriv g) <lambda ()>) is <function deriv(g)>
> (define dx 0.000010) is 0.000010
> (define (cube x) (* x x x)) is <function cube(x)>
> ((deriv cube) 5) is 75.000150
> (define (newton-transform g) <lambda ()>) is <function newton-transform(g)>
> (define (newtons-method g guess) (fixed-point (newton-transform g) guess)) is <function newtons-method(g guess)>
> (define (sqrt x) (newtons-method <lambda ()> 1.000000)) is <function sqrt(x)>
> (define (fixed-point-of-transform g transform guess) (fixed-point (transform g) guess)) is <function fixed-point-of-transform(g transform guess)>
> (define (sqrt x) (fixed-point-of-transform <lambda ()> average-damp 1.000000)) is <function sqrt(x)>
> (define (sqrt x) (fixed-point-of-transform <lambda ()> newton-transform 1.000000)) is <function sqrt(x)>
------------------------------------------
