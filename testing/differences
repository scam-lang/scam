OLD vs. NEW
adders.s
------------------------------------------
1,47c1,42
< include("basics");
< include("wire.s");
< include("logic.s");
< include("agenda.s");
< 
< function half-adder(a, b, sum, carry, simulator)
<     {
<     var or->and = wire();
<     var not->and = wire();
< 
<     AND(a,b,carry,simulator);
<     OR(a,b,or->and,simulator);
<     NOT(carry,not->and,simulator);
<     AND(or->and,not->and,sum,simulator);
<     }
< 
< function full-adder(a, b, carry-in, sum, carry-out, agenda)
<     {
<     var ha1->ha2 = wire();
<     var ha1->or = wire();
<     var ha2->or = wire();
< 
<     half-adder(b,carry-in,ha1->ha2,ha1->or,agenda);
<     half-adder(a,ha1->ha2,sum,ha2->or,agenda);
<     OR(ha1->or,ha2->or,carry-out,agenda);
<     }
< 
< function simulateHalfAdder()
<     {
<     var i;
<     var a = wire();
<     var b = wire();
<     var sum = wire();
<     var carry = wire();
<     var simulator = agenda();
<     var inputs = array(array(0,0), array(0,1), array(1,0), array(1,1));
< 
<     println("a\t\b\tsum\t\carry");
< 
<     half-adder(a, b, sum, carry, simulator);
< 
<     for (i = 0, i < length(inputs), i = i + 1)
<         {
<         a . set(inputs . i . 0);
<         b . set(inputs . i . 1);
<         simulator . run();
<         println(inputs . i . 0, "\t", inputs . i . 1,
---
> (include "wire.s")
> (include "logic.s")
> (include "agenda.s")
> 
> (define (half-adder a b sum carry simulator)
>     (define or->and (wire))
>     (define not->and (wire))
> 
>     (AND a b carry simulator)
>     (OR a b or->and simulator)
>     (NOT carry not->and simulator)
>     (AND or->and not->and sum simulator)
>     )
> 
> (define (full-adder a b carry-in sum carry-out agenda)
>     (define ha1->ha2 (wire))
>     (define ha1->or (wire))
>     (define ha2->or (wire))
> 
>     (half-adder b carry-in ha1->ha2,ha1->or agenda)
>     (half-adder a ha1->ha2 sum ha2->or agenda)
>     (OR ha1->or ha2->or carry-out agenda)
>     )
> 
> (define (simulateHalfAdder)
>     (define i)
>     (define a (wire))
>     (define b (wire))
>     (define sum (wire))
>     (define carry (wire))
>     (define simulator (agenda))
>     (define inputs (array (array 0 0) (array 0 1) (array 1 0) (array 1 1)))
> 
>     (println "a\t\b\tsum\t\carry")
> 
>     (half-adder a b sum carry simulator)
> 
>     (for (assign i 0) (< i (length inputs)) (assign i (+ i 1))
>         (a . set(inputs . i . 0);
>         (b . set(inputs . i . 1);
>             ((. simulator run))
>             (println (getElement (. inputs i) 0) "\t", inputs . i . 1,
49,50c44,45
<         }
<     }
---
>             )
>     )
87,101c82,83
< a       b       sum     carry
< 0       0       0       0
< 0       1       1       0
< 1       0       1       0
< 1       1       0       1
< 
< a       b       c-in    sum     c-out
< 0       0       0       0       0
< 0       0       1       1       0
< 0       1       0       1       0
< 0       1       1       0       1
< 1       0       0       1       0
< 1       0       1       0       1
< 1       1       0       0       1
< 1       1       1       1       1
---
> EXCEPTION: syntaxException
> file adders.s,line 81: expecting CLOSE_PARENTHESIS, found END_OF_INPUT instead
------------------------------------------
agenda.s
------------------------------------------
23a24,25
> EXCEPTION: nonFunction
> file agenda.s,line 1: attempted to call STRING as a function
------------------------------------------
apply.s
------------------------------------------
------------------------------------------
a.s
------------------------------------------
------------------------------------------
bad.s
------------------------------------------
------------------------------------------
block.s
------------------------------------------
------------------------------------------
call.s
------------------------------------------
------------------------------------------
catch.s
------------------------------------------
------------------------------------------
common2.s
------------------------------------------
1c1
< var common = { var count = 0; this; };
---
> (define common (scope (define count 0) this))
3c3
< println(bindings(common));
---
> (println (bindings common))
5c5
< ((context,<OBJECT 966>),(dynamicContext,null),(callDepth,0),(constructor,null),(this,<OBJECT 2824>),(count,0))
---
> ((label environment) (context <object 7540>) (level 0) (constructor nil) (this <object 7605>) (count 0))
------------------------------------------
common3.s
------------------------------------------
1c1
< include("basics");
---
> (include "inherit.s")
3c3,5
< var common = 0;
---
> (define (+= # $v value)
>     (set! $v (+ (eval $v #) value) #)
>     )
5,11c7
< function z()
<     {
<     var uncommon = 0;
<     common += 1;
<     uncommon += 1;
<     this;
<     }
---
> (define common 0)
13,17c9,15
< function x()
<     {
<     proxy(z());
<     this;
<     }
---
> (define (z)
>     (define parent nil)
>     (define uncommon 0)
>     (+= common 1)
>     (+= uncommon 1)
>     this
>     )
19,21c17,25
< inspect(x() . common);
< inspect(x() . uncommon);
< inspect(x() . common);
---
> (define (x)
>     (define parent (z))
>     this
>     )
> 
> (inspect (get 'common (new (x))))
> (inspect (get 'common (new (x))))
> (inspect (get 'uncommon (new (x))))
> (inspect (get 'uncommon (new (x))))
23,25c27,30
< x() . common is 1
< x() . uncommon is 1
< x() . common is 3
---
> (get (quote common) (new (x))) is 1
> (get (quote common) (new (x))) is 2
> (get (quote uncommon) (new (x))) is 1
> (get (quote uncommon) (new (x))) is 1
------------------------------------------
common4.s
------------------------------------------
1c1
< include("basics");
---
> (include "inherit.s")
3,7c3
< function helper() { println("oops!"); }
< var z =
< {
< var common = 0;
< function helper() { println("oops!"); }
---
> (define (helper) (println "oops!"))
9,17c5
< function z()
<     {
<     var uncommon = 0;
<     function getCommon() { helper(); common; }
<     common += 1;
<     uncommon += 1;
<     this;
<     }
< };
---
> (define common 10)
19,25c7,12
< function x()
<     {
<     var common = 4;
<     function helper() { println("help!"); }
<     proxy(z());
<     this;
<     }
---
> (define (z)
>     (define parent nil)
>     (define (getCommon) (helper) common)
>     (set! 'common (+ common 1))
>     this
>     )
27,29c14,24
< inspect(x() . getCommon());
< inspect(x() . uncommon);
< inspect(x() . getCommon());
---
> (define (x)
>     (define parent (z))
>     (define common 1)
>     (define (helper) (println "help!"))
>     this
>     )
> 
> (inspect ((get 'getCommon (new (x)))))
> (inspect ((get 'getCommon (new (x)))))
> (inspect ((get 'getCommon (new (z)))))
> (inspect ((get 'getCommon (new (z)))))
32,33c27
< x() . getCommon() is 4
< x() . uncommon is 1
---
> ((get (quote getCommon) (new (x)))) is 1
35c29,33
< x() . getCommon() is 4
---
> ((get (quote getCommon) (new (x)))) is 1
> oops!
> ((get (quote getCommon) (new (z)))) is 13
> oops!
> ((get (quote getCommon) (new (z)))) is 14
------------------------------------------
common5.s
------------------------------------------
1,34c1,38
< var z = 
< {
< var z_shared = { var shared_count = 0; this; };
< 
< function z()
<     {
<     var count = 0;
<     extends(z_shared);
<     count = count + 1;
<     shared_count = shared_count + 1;
<     this;
<     }
< };
< 
< function x()
<     {
<     extends(z());
<     }
< 
< function y()
<     {
<     extends(z());
<     }
< 
< var xish = x();
< var yish = y();
< var zish = z();
< 
< println("x's common count is ", xish . shared_count);
< println("y's common count is ", yish . shared_count);
< println("z's common count is ", zish . shared_count);
< println("x's count is ", xish . count);
< println("y's count is ", yish . count);
< println("z's count is ", zish . count);
---
> (include "inherit.s")
> 
> (define z
>     (scope
>         (define z_shared (scope (define shared-count 0) this))
> 
>         (define (z)
>             (define count 0)
>             (extend z_shared)
>             this
>             )
>         )
>     )
> 
> (define (x)
>     (extend (z))
>     )
> 
> (define (y)
>     (extend (z))
>     )
> 
> (define xish (x))
> (define yish (y))
> (define zish (z))
> 
> (set! 'count 1 yish)
> (set! 'count 2 zish)
> 
> (set! 'shared-count 11 yish)
> (set! 'shared-count 22 xish)
> 
> (println "x's count is " (get 'count xish))
> (println "y's count is " (get 'count yish))
> (println "z's count is " (get 'count zish))
> (println "x's common count is " (get 'shared-count xish))
> (println "y's common count is " (get 'shared-count yish))
> (println "z's common count is " (get 'shared-count zish))
36,39c40
< x's common count is 3
< y's common count is 3
< z's common count is 3
< x's count is 1
---
> x's count is 0
41c42,45
< z's count is 1
---
> z's count is 2
> x's common count is 22
> y's common count is 22
> z's common count is 22
------------------------------------------
common.s
------------------------------------------
0a1,2
> include("inherit.s");
> 
4a7
>     var parent = null;
9a13
> function code($x) { $x; }
12,15c16,18
<     proxy(z());
<     ppObject(this);
<     common . count = common . count + 1;
<     uncommon . count = uncommon . count + 1;
---
>     var parent = z();
>     parent . common . count = parent . common . count + 1;
>     parent . uncommon . count = parent . uncommon . count + 1;
21,23c24,26
<     proxy(z());
<     common . count = common . count + 1;
<     uncommon . count = uncommon . count + 1;
---
>     var parent = z();
>     parent . common . count = parent . common . count + 1;
>     parent . uncommon . count = parent . uncommon . count + 1;
27,29c30,32
< var xish = x();
< var yish = y();
< var zish = z();
---
> var xish = new(x());
> var yish = new(y());
> var zish = new(z());
36,48c39,40
< <OBJECT 3300>:
<     context: <OBJECT 966>
<     dynamicContext: <OBJECT 966>
<     callDepth: 1
<     constructor: <function x()>
<     this: <OBJECT 3300>
<     constructor: <function z()>
<     uncommon: <OBJECT 3338>
<     common: <OBJECT 3221>
< x's common count is 2
< y's common count is 2
< x's uncommon count is 1
< y's uncommon count is 1
---
> EXCEPTION: nonFunction
> file common.s,line 1: attempted to call STRING as a function
------------------------------------------
defined.s
------------------------------------------
1c1
< var methods = array(symbol("++"),:+);
---
> (include "reflection.s")
3c3,5
< var i = 0;
---
> (define methods (array (symbol "-") '+ (symbol "++")))
> (inspect (length methods))
> (inspect methods)
5,16c7,16
< while (i < length(methods))
<     {
<     if (defined?(methods . i,this))
<         {
<         println(methods . i, " is defined!");
<         }
<     else
<         {
<         println(methods . i, " is not defined");
<         }
<     i = i + 1;
<     }
---
> (define i 0)
> 
> (while (< i (length methods))
>     (define item (getElement methods i))
>     (if (defined? item this)
>         (println item " is defined!")
>         (println item " is not defined.")
>         )
>     (set! 'i (+ i 1))
>     )
18c18,20
< ++ is not defined
---
> (length methods) is 3
> methods is [-,+,++]
> - is defined!
19a22
> ++ is defined!
------------------------------------------
env.s
------------------------------------------
1,8c1
< var spot = SwayEnv;
< 
< while (spot != :null)
<     {
<     var s = head(spot);
<     println(prefix(s,stringUntil(s,"=")));
<     spot = tail(spot);
<     }
---
> (define spot ScamEnv)
9a3,7
> (while (!= spot nil)
>     (define s (car spot))
>     (println (prefix s (stringUntil s "=")))
>     (set! 'spot (cdr spot))
>     )
10a9
> ORBIT_SOCKETDIR
12d10
< KDE_MULTIHEAD
14d11
< TERM
16,17c13,14
< GTK2_RC_FILES
< GS_LIB
---
> TERM
> XDG_SESSION_COOKIE
19d15
< HUSHLOGIN
21c17
< KDE_FULL_SESSION
---
> GTK_MODULES
24a21,22
> GNOME_KEYRING_SOCKET
> USERNAME
26,27d23
< KONSOLE_DCOP
< MAIL
28a25
> DESKTOP_SESSION
30c27
< KONSOLE_DCOP_SESSION
---
> GDM_KEYBOARD_LAYOUT
31a29
> GNOME_KEYRING_PID
33,34c31,32
< KDE_SESSION_UID
< SONGDIR
---
> GDM_LANG
> GDMSESSION
36c34
< SHLVL
---
> SPEECHD_PORT
38c36,37
< XCURSOR_THEME
---
> SHLVL
> GNOME_DESKTOP_SESSION_ID
39a39,40
> DBUS_SESSION_BUS_ADDRESS
> XDG_DATA_DIRS
41c42
< VIMRUNTIME
---
> EMAIL
43d43
< VIM
45d44
< XAUTHORITY
46a46
> XAUTHORITY
------------------------------------------
error0.s
------------------------------------------
0a1,34
> 
> include("fact.s");
> 
> function fib(n)
>     {
>     if (n < 2)
>         {
>         n;
>         }
>     else
>         {
>         fib(n - 1) + fib(n - 2);
>         }
>     }
> var x = 0;
> var result;
> var t = time();
> 
> x = 26;
> 
> opt(fib . code,:<,3);
> 
> result = fib(x);
> display("fib(");
> display(x);
> display(") is ");
> display(result);
> display("\n");
> display(time() - t);
> display(" seconds");
> display("\n");
> ------------------------------------------
> EXCEPTION: nonFunction
> file error0.s,line 2: attempted to call STRING as a function
------------------------------------------
except2.s
------------------------------------------
1,13c1,10
< function try($error,$a,$b)
<     {
<     var result = catch(force($a));
<     if (type(result) == :ERROR)
<         {
<         $error = result;
<         force($b);
<         }
<     else
<         {
<         result;
<         }
<     }
---
> (define (try # $error $a $b)
>     (define result (catch (eval $a #)))
>     (if (== (type result) 'error)
>         (begin
>             (set! $error result #)
>             (set! 'result (eval $b #))
>             )
>         )
>     result
>     )
15,18c12,14
< function normalize(a,b)
<     {
<     return (a + b) * (a + b);
<     }
---
> (define (normalize a b)
>     (* (+ a b) (+ a b))
>     )
20,23c16,18
< function g()
<     {
<     var result;
<     var error;
---
> (define (g)
>     (define result)
>     (define error)
25,47c20,42
<     try(error) 
<         {
<         throw(:hiy,"ouch"); // comment this line out and a 2 should result
<         result = normalize(1,2);
<         }
<     else if (error . type == :nonFunction)
<         {
<         result = 2;
<         }
<     else if (error . type == :hey)
<         {
<         result = 100;
<         }
<     else if (error . type == :hay)
<         {
<         result = 33;
<         }
<     else
<         {
<         throw(error);
<         }
<     result;
<     }
---
>     (try error 
>         (begin
>             (println "starting")
>             ; comment the next uncommented line out and a 2 should result
>             ; change hiy to hey in the next uncommented line and you get 100
>             ; change hiy to hay in the next uncommented line and you get 33
>             (throw 'hiy "ouch")
>             (set! 'result (normalize 1 2))
>             )
>         (if (== (get 'code error) 'nonFunction)
>             (begin
>                 (println "not a function!")
>                 (set! 'result 2)
>                 )
>         (if (== (get 'code error) 'hey)
>             (set! 'result 100)
>         (if (== (get 'code error) 'hay)
>             (set! 'result 33)
>             (throw error)
>             )))
>         )
>     result
>     )
49,50c44,45
< var + = 3;
< println(g());
---
> (define + 3)
> (println (g))
52,53c47,49
< EVALUATION ERROR: :hiy
< except2.s,line 27: ouch
---
> starting
> EXCEPTION: hiy
> ouch
------------------------------------------
except3.s
------------------------------------------
1,4c1,3
< function f()
<     {
<     g() + 0;
<     }
---
> (define (f)
>     (+ (g) 0)
>     )
6,12c5,10
< function g()
<     {
<     var error;
<     error = catch(h());
<     println("rethrowing error");
<     throw(error);
<     }
---
> (define (g)
>     (define error)
>     (set! 'error (catch (h)))
>     (println "rethrowing error")
>     (throw error);
>     )
14,18c12,15
< function h()
<     {
<     throw(:ouch,"hey!");
<     2;
<     }
---
> (define (h)
>     (throw 'ouch "hey!")
>     2
>     )
20,21c17,18
< f() + 0;
< :ok;
---
> (+ (f) 0)
> 'ok
23,24d19
< EVALUATION ERROR: :ouch
< except3.s,line 16: hey!
25a21,22
> EXCEPTION: ouch
> hey!
------------------------------------------
except4.s
------------------------------------------
1,32c1,26
< var mnemon = 10;
< function f(x)
<     {
<     var result;
<     println("beginning f(",x,").");
<     result = catch(g(2 * x));
<     if (type(result) == :ERROR)
<         {
<         if (result . type == :undefinedVariable)
<             {
<             result = x;
<             }
<         else
<             {
<             println("rethrowing the error");
<             throw(result);
<             }
<         }
<     println("done with f(",x,").");
<     return result;
<     }
< function g(y)
<     {
<     var result;
<     println("beginning g(",y,").");
< 
<     throw(:myError,"take that!");
<     result = mnenom * y;
<     println("done with g(",y,").");
<     return result;
<     }
< println(f(4));
---
> (define (f x)
>     (define result nil)
>     (println "beginning f(" x ").")
>     (set! 'result (catch (g (* 2 x))))
>     (if (== (type result) 'error)
>         (if (== (get 'code result) 'undefinedVariable)
>             (set! 'result x)
>             (begin
>                 (println "rethrowing the error");
>                 (throw result)
>                 )
>             )
>         )
>     (println "done with f(" x ").")
>     result
>     )
> (define (g y)
>     (define result nil)
>     (println "beginning g(" y ").")
>     //(throw 'undefinedVariable "take that!")
>     (throw 'myError "take that!")
>     (set! 'result (* mnenom y))
>     (println "done with g(" y ").")
>     result
>     )
> (println (f 4))
34,35d27
< EVALUATION ERROR: :myError
< except4.s,line 27: take that!
38c30,31
< rethrowing the error
---
> done with f(4).
> 4
------------------------------------------
except.s
------------------------------------------
1,12c1,7
< function try($a,$b)
<     {
<     var result = catch(force($a));
<     if (type(result) == :ERROR)
<         {
<         force($b);
<         }
<     else
<         {
<         result;
<         }
<     }
---
> (define (try # $a $b)
>     (define result (catch (eval $a #)))
>     (if (== (type result) 'error)
>         (eval $b #)
>         result
>         )
>     )
14,32c9,20
< function fact(n)
<     {
<     if (n == 0)
<         {
<         try ()
<             {
<             zzz;
<             }
<         else
<             {
<             println("[ERROR]");
<             1;
<             }
<         }
<     else
<         {
<         return n * fact(n - 1);
<         }
<     }
---
> (define (fact n)
>     (if (== n 0)
>         (try
>             zzz ;change this line to 1
>             (begin
>                 (println "[ERROR]")
>                 1
>                 )
>             )
>         (* n (fact (- n 1)))
>         )
>     )
34c22
< print("fact(5) is ", fact(5), "\n");
---
> (print "fact(5) is "  (fact 5) "\n")
------------------------------------------
extend.s
------------------------------------------
35,38c35,36
< wow() is wow, wow, wow!
< obj . wow() is 16
< obj . yow() is 256
< obj . zow() is 65536
---
> EXCEPTION: undefinedVariable
> file extend.s,line 1: variable function is undefined
------------------------------------------
extension.s
------------------------------------------
20,22c20,21
< z = y(); z . a is 3
< (y()) . a is 3
< .(y(),a) is 3
---
> EXCEPTION: undefinedVariable
> file extension.s,line 1: variable function is undefined
------------------------------------------
