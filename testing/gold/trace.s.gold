(define (trace f)
    (define (traceBlock # $b)
        (define actions (cdr $b))
        (inspect actions)
        (define last nil)
        (define act)
        (while (valid? actions)
            (set! act (car actions))
            (println (fileName act) ", line " (lineNumber act) ": " act)
            (set! last (eval act #))
            (set! actions (cdr actions))
            )
        last
        )
    (set* f 'code (list traceBlock (get* f 'code)))
    (pp f)
    )

(define (f x)
    (define result x)
    (define y 0)
    (+= result x)
    (if (> x 0)
        (begin
            (define i 42)
            (g)
            )
        )
    result
    )

(define (g)
    (println "in g...")
    )

(trace f)
(println "f(5) is " (f 5))
------------------------------------------
<object 12155>
             __label  : closure
           __context  : <object 11785>
                name  : f
          parameters  : (x)
                code  : (<function traceBlock(# $b)> (begin (define result x) (define y 0) (+= result x) (if (> x 0) (begin (define i 42) (g))) result))
actions is ((define result x) (define y 0) (+= result x) (if (> x 0) (begin (define i 42) (g))) result)
trace.s, line 20: (define result x)
trace.s, line 21: (define y 0)
trace.s, line 22: (+= result x)
trace.s, line 23: (if (> x 0) (begin (define i 42) (g)))
in g...
trace.s, line 29: result
f(5) is 10
