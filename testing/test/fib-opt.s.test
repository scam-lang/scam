(include "compile.lib")
(include "pretty.lib")

(define (fib n)
    (if (< n 2)
        n
        (+ (fib (- n 1)) (fib (- n 2)))
        )
    )

(define x 25)
(define result)

(define s (time))
(define result (fib x))
(define f (time))
(println "(fib " x ") is " result ", " (- f s) " seconds.")

(println "compiling fib...")
(compile fib this)
(println "fib compiled.")

(define s (time))
(define result (fib x))
(define f (time))
(println "(fib " x ") is " result ", " (- f s) " seconds.")
------------------------------------------
def args: : (<object 4800> (else #t))
def args: : (<object 4800> (__builtin __context))
def args: : (<object 4800> (__main-lib this))
def args: : (<object 4800> (nil? null?))
def args: : (<object 4800> ((valid? x) (not (null? x))))
def args: : (<object 4800> ((head x) (car x)))
def args: : (<object 4800> ((tail x) (cdr x)))
def args: : (<object 4800> ((join x y) (cons x y)))
def args: : (<object 4800> (^ expt))
def args: : (<object 4800> (** expt))
def args: : (<object 4800> ((backquote # $items) (define (helper items) (inspect items) (inspect (get (quote __context) this)) (cond ((null? items) ) ((eq? (car items) (quote ,)) (cons (eval (cadr items) #) (helper (cddr items)))) (else (cons (car items) (helper (cdr items)))))) (helper $items)))
def args: : (<object 4800> ((set! # $x y @) (define env (if (null? @) # (car @))) (set $x y env)))
def args: : (<object 4800> ((set* @) (define obj (car @)) (define fields (cdr @)) (while (valid? (cddr fields)) (set (quote obj) (obj (car fields))) (set (quote fields) (cdr fields))) (set (car fields) (cadr fields) obj)))
def args: : (<object 4800> ((get* @) (define obj (car @)) (define fields (cdr @)) (while (valid? (cdr fields)) (set (quote obj) (obj (car fields))) (set (quote fields) (cdr fields))) (get (car fields) obj)))
def args: : (<object 4800> ((for # init $fortest $increment $) (define forresult ) (while (eval $fortest #) (set (quote forresult) (evalList $ #)) (eval $increment #)) forresult))
def args: : (<object 4800> ((for-each2 # $indexVar items $) (define result #f) (while (!= items ) (set $indexVar (car items) #) (set (quote result) (evalList $ #)) (set (quote items) (cdr items))) result))
def args: : (<object 4800> ((for-each f x) (define (iter items) (cond ((null? items) ) (else (f (car items)) (iter (cdr items))))) (iter x)))
def args: : (<object 4800> ((+= # $v value) (set $v (+ (eval $v #) value) #)))
def args: : (<object 4800> ((-= # $v value) (set $v (- (eval $v #) value) #)))
def args: : (<object 4800> ((*= # $v value) (set $v (* (eval $v #) value) #)))
def args: : (<object 4800> ((/= # $v value) (set $v (/ (eval $v #) value) #)))
def args: : (<object 4800> ((++ # $v) (set $v (+ (eval $v #) 1) #)))
def args: : (<object 4800> ((-- # $v) (set $v (- (eval $v #) 1) #)))
def args: : (<object 4800> (__type type))
def args: : (<object 4800> ((type x) (if (and (eq? (__type x) (quote CONS)) (eq? (car x) (quote __object))) (get (quote __label) x) (__type x))))
def args: : (<object 4800> ((class x) (get (quote __label) x)))
def args: : (<object 4800> ((is? x y) (cond ((null? x) #f) ((not (environment? x)) (eq? (type x) y)) ((and (environment? x) (or (eq? y (quote environment)) (eq? y (quote object)))) #t) ((and (valid? (get (quote __constructor) x)) (eq? (get* x (quote __constructor) (quote name)) y)) #t) (else (and (local? (quote parent) x) (is? (get (quote parent) x) y))))))
def args: : (<object 4800> ((object? x) (and (pair? x) (eq? (car x) (quote __object)))))
def args: : (<object 4800> ((closure? x) (and (object? x) (eq? (class x) (quote closure)))))
def args: : (<object 4800> ((builtin? x) (and (object? x) (eq? (class x) (quote builtIn)))))
def args: : (<object 4800> ((error? x) (and (object? x) (eq? (class x) (quote error)))))
def args: : (<object 4800> ((environment? x) (and (object? x) (eq? (class x) (quote environment)))))
def args: : (<object 4800> (function? closure?))
def args: : (<object 4800> ((and # $) (define (iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))) (iter $)))
def args: : (<object 4800> ((or # $) (define (iter items) (cond ((null? items) #f) ((eval (car items) #) #t) (else (iter (cdr items))))) (iter $)))
def args: : (<object 4800> ((dec x) (- x 1)))
def args: : (<object 4800> ((inc x) (+ x 1)))
def args: : (<object 4800> (__display display))
def args: : (<object 4800> ((print @) (while (valid? @) (display (car @)) (set! @ (cdr @))) (quote print-done)))
def args: : (<object 4800> ((println @) (apply print @) (print "
")))
def args: : (<object 4800> ((let # $inits $) (define v ) (define e (scope this)) (set (quote __context) # e) (for-each2 v $inits (addSymbol (car v) (eval (car (cdr v)) #) e)) (evalList $ e)))
def args: : (<object 4800> ((let* # $inits $) (define v ) (define e (scope this)) (set (quote __context) # e) (for-each2 v $inits (addSymbol (car v) (eval (car (cdr v)) e) e)) (evalList $ e)))
def args: : (<object 4800> ((evalList listOfitems env) (while (valid? (cdr listOfitems)) (eval (car listOfitems) env) (set (quote listOfitems) (cdr listOfitems))) (eval (car listOfitems) env)))
def args: : (<object 4800> ((negative? n) (< n 0)))
def args: : (<object 4800> ((positive? n) (> n 0)))
def args: : (<object 4800> ((newline) (println)))
def args: : (<object 4800> (remainder %))
def args: : (<object 4800> ((append a b) (cond ((null? a) b) (else (cons (car a) (append (cdr a) b))))))
def args: : (<object 4800> ((last-pair x) (cond ((null? x) ) ((null? (cdr x)) x) (else (last-pair (cdr x))))))
def args: : (<object 4800> ((reverse x) (define (iter store rest) (cond ((null? rest) store) (else (iter (cons (car rest) store) (cdr rest))))) (iter  x)))
def args: : (<object 4800> ((map op @) (define (map1 items) (cond ((null? items) ) (else (cons (op (car items)) (map1 (cdr items)))))) (define (iter items) (cond ((null? (car items)) ) (else (cons (apply op (map car items)) (iter (map cdr items)))))) (cond ((= (length @) 1) (map1 (car @))) (else (iter @)))))
def args: : (<object 4800> (integer int))
def args: : (<object 4800> ((abs x) (if (< x 0) (- x) x)))
def args: : (<object 4800> ((even? n) (= (% n 2) 0)))
def args: : (<object 4800> ((odd? n) (= (% n 2) 1)))
def args: : (<object 4800> ((integer? x) (eq? (type x) (quote INTEGER))))
def args: : (<object 4800> ((real? x) (eq? (type x) (quote REAL))))
def args: : (<object 4800> ((number? x) (or (integer? x) (real? x))))
def args: : (<object 4800> ((string? x) (eq? (type x) (quote STRING))))
def args: : (<object 4800> ((symbol? x) (eq? (type x) (quote SYMBOL))))
def args: : (<object 4800> ((array? x) (eq? (type x) (quote ARRAY))))
def args: : (<object 4800> ((true? x) x))
def args: : (<object 4800> ((false? x) (not x)))
def args: : (<object 4800> ((literal? x) (or (null? x) (eq? x #t) (eq? x #f) (string? x) (array? x) (integer? x) (real? x) (and (pair? x) (eq? (car x) (quote quote))))))
def args: : (<object 4800> ((atom? x) (not (or (pair? x) (string? x) (array? x)))))
def args: : (<object 4800> ((car-cdr items @) (while (valid? @) (cond ((= (car @) 0) (set (quote items) (car items))) (else (set (quote items) (cdr items)))) (set (quote @) (cdr @))) items))
def args: : (<object 4800> ((caar x) (car-cdr x 0 0)))
def args: : (<object 4800> ((cadr x) (car-cdr x 1 0)))
def args: : (<object 4800> ((caddr x) (car-cdr x 1 1 0)))
def args: : (<object 4800> ((cadddr x) (car-cdr x 1 1 1 0)))
def args: : (<object 4800> ((caddddr x) (car-cdr x 1 1 1 1 0)))
def args: : (<object 4800> ((cadddddr x) (car-cdr x 1 1 1 1 1 0)))
def args: : (<object 4800> ((cddr x) (cdr (cdr x))))
def args: : (<object 4800> ((cddr x) (car-cdr x 1 1)))
def args: : (<object 4800> ((cdddr x) (car-cdr x 1 1 1)))
def args: : (<object 4800> ((cddddr x) (car-cdr x 1 1 1 1)))
def args: : (<object 4800> ((cdddddr x) (car-cdr x 1 1 1 1 1)))
def args: : (<object 4800> ((equal? a b) (cond ((null? a) (null? b)) ((pair? a) (and (pair? b) (equal? (car a) (car b)) (equal? (cdr a) (cdr b)))) ((string? a) (string-equal? a b)) ((array? a) (array-equal? a b)) (else (eq? a b)))))
def args: : (<object 4800> ((array-equal? a b) (cond ((null? a) (null? b)) ((null? b) #f) (else (and (equal? (car a) (car b)) (array-equal? (cdr a) (cdr b)))))))
def args: : (<object 4800> ((string-compare a b) (cond ((and (null? a) (null? b)) 0) ((null? a) (- 0 (ascii (getElement b 0)))) ((null? b) (ascii (getElement a 0))) (else (if (== (ascii (getElement a 0)) (ascii (getElement b 0))) (string-compare (cdr a) (cdr b)) (- (ascii (getElement a 0)) (ascii (getElement b 0))))))))
def args: : (<object 4800> ((sqrt x) (expt x 0.500000)))
def args: : (<object 4800> ((stream-car s) (car s)))
def args: : (<object 4800> ((stream-cdr s) (define scdr (cdr s)) (define scddr (cdr scdr)) (cond ((null? (car scddr)) (car scdr)) (else (set-car! scdr (apply eval scdr)) (set-car! scddr ) (car scdr)))))
def args: : (<object 4800> ((cons-stream # a $b) (list a $b #)))
def args: : (<object 4800> ((stream-null? s) (null? s)))
def args: : (<object 4800> ((code $s) $s))
def args: : (<object 4800> ((member? x items) (valid? (member x items))))
def args: : (<object 4800> ((member x items) (cond ((null? items) ) ((eq? x (car items)) items) (else (member x (cdr items))))))
def args: : (<object 4800> ((nequal? a b) (not (equal? a b))))
def args: : (<object 4800> ((getElement items @) (define __getElement (get (quote getElement) (get (quote __context) __context))) (while (valid? @) (set (quote items) (__getElement items (car @))) (set (quote @) (cdr @))) items))
def args: : (<object 4800> (__string+ string+))
def args: : (<object 4800> ((string+ str @) (while (valid? @) (set (quote str) (__string+ str (string (car @)))) (set (quote @) (cdr @))) str))
def args: : (<object 4800> (__string string))
def args: : (<object 4800> ((string x) (cond ((pair? x) (list-to-string x)) (else (__string x)))))
def args: : (<object 4800> ((list-to-string x) (define (iter z) (cond ((null? (cdr z)) (string+ (string (car z)) ")")) ((pair? (cdr z)) (string+ (string (car z)) " " (iter (cdr z)))) (else (string+ (string (car z)) " . " (string (cdr z)) ")")))) (cond ((thunk? x) (string+ "<thunk " (address x) ">")) ((closure? x) (string+ "<closure " (address x) ">")) ((error? x) (string+ "<error " (address x) ">")) ((environment? x) (string+ "<environment " (address x) ">")) ((object? x) (string+ "<object " (address x) ">")) (else (string+ "(" (iter x))))))
def args: : (<object 4800> ((thunk code environment) (define memo #f) this))
def args: : (<object 4800> ((thunk? item) (is? item (quote thunk))))
def args: : (<object 4800> ((force item) (eval (get (quote code) item) (get (quote environment) item))))
def args: : (<object 4800> ((assoc x y) (cond ((null? y) #f) ((equal? x (caar y)) (car y)) (else (assoc x (cdr y))))))
def args: : (<object 4800> ((make-assoc xs ys) (cond ((null? xs) ) (else (cons (list (car xs) (car ys)) (make-assoc (cdr xs) (cdr ys)))))))
def args: : (<object 4800> ((local? id env) (member? id (localNames env))))
def args: : (<object 4800> ((localNames env) (cadr env)))
def args: : (<object 4800> ((localValues env) (caddr env)))
def args: : (<object 4800> ((defined? id env) (not (error? (catch (eval id env))))))
def args: : (<object 4800> ((dot obj $name) (get $name obj)))
def args: : (<object 4800> ((builtinFunctions) (define vars (cadr __builtin)) (define vals (caddr __builtin)) (println "-----Builtin Functions-----") (while (valid? vars) (if (neq? (car (string (car vars))) "_") (if (builtin? (car vals)) (println "    " (car vals)))) (set! vars (cdr vars)) (set! vals (cdr vals)))))
def args: : (<object 4800> ((mainLibraryFunctions) (define vars (cadr __main-lib)) (define vals (caddr __main-lib)) (println "-----Main Library Functions-----") (while (valid? vars) (if (neq? (car (string (car vars))) "_") (if (closure? (car vals)) (println "    " (car vals)))) (set! vars (cdr vars)) (set! vals (cdr vals)))))
def args: : (<object 12467> (else #t))
def args: : (<object 12467> ((rewrite expr names free) (define (rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))) (define (rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))) (define (rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))) (define (rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))) (define (rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new) (define (rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))) (define (rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))) (cond ((null? expr) expr) ((eq? expr #t) expr) ((eq? expr #f) expr) ((eq? (type expr) (quote STRING)) expr) ((eq? (type expr) (quote ARRAY)) expr) ((eq? (type expr) (quote INTEGER)) expr) ((eq? (type expr) (quote REAL)) expr) ((if (pair? expr) (eq? (car expr) (quote quote))) expr) ((eq? (type expr) (quote SYMBOL)) (rewrite-get expr names free)) ((eq? (car expr) (quote define)) (rewrite-definition expr names free)) ((eq? (car expr) (quote scope)) (rewrite-scope expr names free)) ((eq? (car expr) (quote environment)) expr) (else (cons (rewrite (car expr) names free) (rewrite (cdr expr) names free))))))
def args: : (<object 12467> ((compile # f @) (define env (if (valid? @) (car @) #)) (set (quote code) (rewrite (get (quote code) f) (cons (make-assoc (get (quote parameters) f) (get (quote parameters) f)) ) env) f) f))
def args: : (<object 12467> ((compile-env # @) (define env (if (valid? @) (car @) #)) (define vars (car (cdr env))) (define vals (car (cdr (cdr env)))) (while (valid? vars) (if (closure? (car vals)) (begin (display "compiling ") (display (car vars)) (display "...
") (compile (car vals) env))) (set! vars (cdr vars)) (set! vals (cdr vals)))))
def args: : (<object 12467> ((replace # f vars @) (define i) (define env (if (valid? @) (car @) #)) (define (helper var val expr) (cond ((null? expr) ) ((eq? (type expr) (quote CONS)) (if (eq? (car expr) var) (set-car! expr val) (helper var val (car expr))) (helper var val (cdr expr))))) (inspect vars) (for-each2 i vars (helper i (env i) (get (quote code) f))) (quote done)))
def args: : (<object 12467> ((macro # f $) (define names (list (make-assoc (get (quote parameters) f) $))) (define body (rewrite (get (quote code) f) names (get (quote context) f))) (eval body #)))
def args: : (<object 12467> ((make-assoc xs ys) (cond ((null? xs) ) (else (cons (list (car xs) (car ys)) (make-assoc (cdr xs) (cdr ys)))))))
def args: : (<object 12467> ((assoc x y) (cond ((null? y) #f) ((equal? x (car (car y))) (car y)) (else (assoc x (cdr y))))))
def args: : (<object 12467> ((equal? a b) (cond ((null? a) (null? b)) ((pair? a) (and (pair? b) (equal? (car a) (car b)) (equal? (cdr a) (cdr b)))) ((eq? (type a) (quote STRING)) (string-equal? a b)) ((eq? (type a) (quote ARRAY)) (array-equal? a b)) (else (eq? a b)))))
def args: : (<object 12467> ((defined? id env) (not (eq? (type (catch (get id env))) (quote error)))))
def args: : (<object 12467> ((closure? x) (and (object? x) (eq? (class x) (quote closure)))))
def args: : (<object 12467> ((builtin? x) (and (object? x) (eq? (class x) (quote builtIn)))))
def args: : (<object 12467> (__pretty-indent "    "))
def args: : (<object 12467> ((pretty expr) (prettyIndent expr )))
def args: : (<object 12467> ((prettyIndent expr indent) (define (ppTestBlock expr indent) (print indent "(" (car expr) " " (cadr expr) "
") (ppCodeList (cddr expr) (string+ indent __pretty-indent)) (print indent __pretty-indent ")
")) (define (ppBlock expr indent) (print indent "(" (car expr) "
") (ppCodeList (cdr expr) (string+ indent __pretty-indent)) (print indent __pretty-indent ")
")) (define (ppFunction expr indent) (define p) (print indent "(define (" (dot expr name)) (for-each2 p (dot expr parameters) (print " " p)) (print ")
") (ppCodeList (cdr (dot expr code)) (string+ indent __pretty-indent)) (print indent __pretty-indent ")
")) (define (ppFunctionDefinition expr indent) (define p) (println indent "(define " (cadr expr)) (ppCodeList (cddr expr) (string+ indent __pretty-indent)) (print indent __pretty-indent ")
")) (define (ppCodeList expr indent) (while (valid? expr) (if (prettyIndent (car expr) indent) (println)) (set (quote expr) (cdr expr)))) (define (ppCond expr indent) (define c) (print indent "(cond
") (for-each2 c (cdr expr) (print indent __pretty-indent "(" (car c) "
") (ppCodeList (cdr c) (string+ indent "        ")) (print indent __pretty-indent __pretty-indent ")
")) (print indent __pretty-indent ")
")) (cond ((not (pair? expr)) (print indent expr) #t) ((closure? expr) (ppFunction expr indent) #f) ((eq? (car expr) (quote begin)) (ppBlock expr indent) #f) ((eq? (car expr) (quote cond)) (ppCond expr indent) #f) ((eq? (car expr) (quote if)) (ppTestBlock expr indent) #f) ((eq? (car expr) (quote while)) (ppTestBlock expr indent) #f) ((eq? (car expr) (quote let)) (ppTestBlock expr indent) #f) ((and (eq? (car expr) (quote define)) (pair? (cadr expr))) (ppFunctionDefinition expr indent) #f) (else (print indent expr) #t))))
def args: : (<object 12467> ((compile-pretty #) (include "compile.lib") (compile pretty #) (compile prettyIndent #)))
def args: : (<object 12467> ((fib n) (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
def args: : (<object 12467> (x 25))
def args: : (<object 12467> (result))
def args: : (<object 12467> (s (time)))
def args: : (<object 12467> (result (fib x)))
def args: : (<object 147> (f (time)))
(fib def args: : (<object 1833690> (env (if (null? @) # (car @))))
25def args: : (<object 1833797> (env (if (null? @) # (car @))))
) is def args: : (<object 1833904> (env (if (null? @) # (car @))))
75025def args: : (<object 1834011> (env (if (null? @) # (car @))))
, def args: : (<object 1834118> (env (if (null? @) # (car @))))
2.807945def args: : (<object 1834225> (env (if (null? @) # (car @))))
 seconds.def args: : (<object 1834332> (env (if (null? @) # (car @))))

def args: : (<object 1834530> (env (if (null? @) # (car @))))
compiling fib...def args: : (<object 1834751> (env (if (null? @) # (car @))))

def args: : (<object 1834949> (env (if (null? @) # (car @))))
def args: : (<object 1835063> (env (if (valid? @) (car @) #)))
def args: : (<object 1835284> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1835284> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1835284> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1835284> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1835284> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1835284> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1835284> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1835534> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1835788> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1836042> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1836296> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1836569> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1836811> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1836811> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1836811> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1836811> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1836811> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1836811> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1836811> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1837061> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1837246> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1837431> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1837616> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1837806> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1837963> (value))
def args: : (<object 1837963> (target (assoc id (car names))))
def args: : (<object 1838147> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1838332> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1838583> (value))
def args: : (<object 1838723> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1838583> (value (get id free)))
def args: : (<object 1839071> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1839221> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1839634> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1839784> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1840213> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1840213> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1840213> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1840213> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1840213> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1840213> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1840213> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1840463> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1840717> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1840971> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1841225> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1841498> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1841740> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1841740> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1841740> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1841740> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1841740> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1841740> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1841740> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1841990> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1842244> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1842498> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1842752> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1843025> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1843267> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1843267> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1843267> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1843267> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1843267> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1843267> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1843267> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1843517> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1843702> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1843887> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1844072> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1844262> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1844419> (value))
def args: : (<object 1844419> (target (assoc id (car names))))
def args: : (<object 1844603> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1844788> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1845039> (value))
def args: : (<object 1845179> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1845039> (value (get id free)))
def args: : (<object 1845527> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1845677> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1846090> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1846240> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1846669> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1846669> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1846669> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1846669> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1846669> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1846669> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1846669> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1846919> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1847173> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1847427> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1847681> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1847954> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1848196> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1848196> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1848196> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1848196> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1848196> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1848196> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1848196> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1848446> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1848700> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1848954> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1849208> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1849481> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1849723> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1849723> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1849723> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1849723> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1849723> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1849723> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1849723> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1849973> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1850158> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1850343> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1850528> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1850718> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1850875> (value))
def args: : (<object 1850875> (target (assoc id (car names))))
def args: : (<object 1851059> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1851244> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1851495> (value))
def args: : (<object 1851635> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1851495> (value (get id free)))
def args: : (<object 1851983> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1852133> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1852546> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1852696> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1853125> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1853125> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1853125> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1853125> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1853125> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1853125> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1853125> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1853375> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1853629> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1853883> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1854137> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1854410> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1854652> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1854652> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1854652> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1854652> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1854652> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1854652> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1854652> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1854902> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1855087> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1855272> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1855457> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1855647> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1855804> (value))
def args: : (<object 1855804> (target (assoc id (car names))))
def args: : (<object 1855988> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1856173> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1856374> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1856374> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1856374> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1856374> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1856374> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1856374> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1856374> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1856624> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1856878> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1857132> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1857386> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1857659> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1857901> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1857901> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1857901> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1857901> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1857901> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1857901> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1857901> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1858151> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1858336> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1858521> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1858679> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1858679> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1858679> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1858679> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1858679> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1858679> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1858679> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1858905> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1858905> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1858905> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1858905> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1858905> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1858905> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1858905> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1859155> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1859409> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1859663> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1859917> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1860190> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1860432> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1860432> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1860432> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1860432> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1860432> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1860432> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1860432> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1860682> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1860867> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1861052> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1861237> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1861427> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1861584> (value))
def args: : (<object 1861584> (target (assoc id (car names))))
def args: : (<object 1861768> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1861953> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1862154> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1862154> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1862154> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1862154> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1862154> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1862154> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1862154> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1862404> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1862658> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1862912> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1863166> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1863439> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1863681> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1863681> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1863681> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1863681> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1863681> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1863681> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1863681> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1863931> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1864185> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1864439> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1864693> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1864966> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1865208> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1865208> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1865208> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1865208> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1865208> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1865208> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1865208> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1865458> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1865643> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1865828> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1866013> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1866203> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1866360> (value))
def args: : (<object 1866360> (target (assoc id (car names))))
def args: : (<object 1866544> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1866729> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1866980> (value))
def args: : (<object 1867120> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1866980> (value (get id free)))
def args: : (<object 1867468> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1867618> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1868031> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1868181> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1868610> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1868610> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1868610> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1868610> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1868610> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1868610> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1868610> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1868860> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1869114> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1869368> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1869622> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1869895> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1870137> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1870137> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1870137> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1870137> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1870137> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1870137> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1870137> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1870387> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1870641> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1870895> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1871149> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1871422> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1871664> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1871664> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1871664> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1871664> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1871664> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1871664> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1871664> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1871914> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1872099> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1872284> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1872469> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1872659> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1872816> (value))
def args: : (<object 1872816> (target (assoc id (car names))))
def args: : (<object 1873000> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1873185> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1873436> (value))
def args: : (<object 1873576> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1873436> (value (get id free)))
def args: : (<object 1873924> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1874074> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1874503> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1874503> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1874503> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1874503> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1874503> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1874503> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1874503> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1874753> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1875007> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1875261> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1875515> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1875788> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1876030> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1876030> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1876030> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1876030> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1876030> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1876030> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1876030> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1876280> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1876534> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1876788> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1877042> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1877315> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1877557> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1877557> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1877557> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1877557> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1877557> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1877557> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1877557> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1877807> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1877992> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1878177> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1878362> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1878552> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1878709> (value))
def args: : (<object 1878709> (target (assoc id (car names))))
def args: : (<object 1878893> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1879078> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1879329> (value))
def args: : (<object 1879469> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1879329> (value (get id free)))
def args: : (<object 1879817> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1879967> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1880380> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1880530> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1880959> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1880959> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1880959> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1880959> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1880959> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1880959> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1880959> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1881209> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1881463> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1881717> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1881971> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1882244> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1882486> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1882486> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1882486> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1882486> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1882486> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1882486> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1882486> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1882736> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1882921> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1883106> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1883291> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1883481> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1883638> (value))
def args: : (<object 1883638> (target (assoc id (car names))))
def args: : (<object 1883822> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1884007> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1884208> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1884208> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1884208> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1884208> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1884208> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1884208> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1884208> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1884458> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1884712> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1884966> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1885220> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1885493> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1885735> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1885735> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1885735> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1885735> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1885735> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1885735> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1885735> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1885985> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1886170> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1886355> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1886513> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1886513> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1886513> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1886513> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1886513> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1886513> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1886513> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1886739> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1886739> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1886739> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1886739> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1886739> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1886739> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1886739> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1886962> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1886962> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1886962> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1886962> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1886962> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1886962> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1886962> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1887212> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1887466> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1887720> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1887974> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1888247> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1888489> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1888489> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1888489> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1888489> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1888489> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1888489> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1888489> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1888739> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1888993> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1889247> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1889501> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1889774> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1890016> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1890016> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1890016> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1890016> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1890016> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1890016> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1890016> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1890266> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1890451> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1890636> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1890821> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1891011> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1891168> (value))
def args: : (<object 1891168> (target (assoc id (car names))))
def args: : (<object 1891352> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1891537> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1891788> (value))
def args: : (<object 1891928> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1891788> (value (get id free)))
def args: : (<object 1892276> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1892426> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1892855> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1892855> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1892855> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1892855> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1892855> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1892855> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1892855> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1893105> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1893359> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1893613> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1893867> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1894140> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1894382> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1894382> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1894382> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1894382> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1894382> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1894382> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1894382> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1894632> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1894886> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1895140> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1895394> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1895667> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1895909> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1895909> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1895909> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1895909> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1895909> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1895909> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1895909> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1896159> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1896344> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1896529> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1896714> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1896904> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1897061> (value))
def args: : (<object 1897061> (target (assoc id (car names))))
def args: : (<object 1897245> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1897430> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1897681> (value))
def args: : (<object 1897821> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1897681> (value (get id free)))
def args: : (<object 1898169> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1898319> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1898732> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1898882> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1899311> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1899311> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1899311> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1899311> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1899311> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1899311> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1899311> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1899561> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1899815> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1900069> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1900323> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1900596> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1900838> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1900838> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1900838> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1900838> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1900838> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1900838> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1900838> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1901088> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1901273> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1901458> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1901643> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1901833> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1901990> (value))
def args: : (<object 1901990> (target (assoc id (car names))))
def args: : (<object 1902174> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1902359> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1902560> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1902560> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1902560> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1902560> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1902560> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1902560> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1902560> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1902810> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1903064> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1903318> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1903572> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1903845> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1904087> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1904087> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1904087> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1904087> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1904087> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1904087> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1904087> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1904337> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1904522> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1904707> ((iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))))
def args: : (<object 1904865> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1904865> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1904865> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1904865> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1904865> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1904865> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1904865> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1905091> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1905091> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1905091> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1905091> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1905091> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1905091> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1905091> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1905314> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1905314> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1905314> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1905314> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1905314> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1905314> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1905314> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1905540> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1905540> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1905540> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1905540> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1905540> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1905540> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1905540> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
def args: : (<object 1905769> ((rewrite-definition expr names free) (if (symbol? (car (cdr expr))) (rewrite-variable-definition (car (cdr expr)) expr names free) (rewrite-function-definition (car (cdr expr)) expr names free))))
def args: : (<object 1905769> ((rewrite-function-definition sig expr names free) (define id (car sig)) (define newid (rewrite-identifier id names)) (define next (cons (make-assoc (cdr sig) (cdr sig)) names)) (cons (rewrite (quote define) names free) (cons (cons newid (rewrite (cdr sig) next free)) (rewrite (cddr expr) next free)))))
def args: : (<object 1905769> ((rewrite-scope expr names free) (cons (rewrite (quote scope) names free) (rewrite (cdr expr) (cons (make-assoc  ) names) free))))
def args: : (<object 1905769> ((rewrite-identifier id names) (cond ((gensym? id) id) ((neq? (assoc id (car names)) #f) (cadr (assoc id (car names)))) (else (rewrite-add-identifier id (gensym id) names)))))
def args: : (<object 1905769> ((rewrite-add-identifier old new names) (set-car! names (cons (list old new) (car names))) new))
def args: : (<object 1905769> ((rewrite-variable-definition id expr names free) (define newid (rewrite-identifier id names)) (cons (rewrite (quote define) names free) (cons newid (rewrite (cddr expr) names free)))))
def args: : (<object 1905769> ((rewrite-get id names free) (define value) (cond ((gensym? id) id) ((null? names) (if (not (defined? id free)) id (begin (define value (get id free)) (if (closure? value) value (if (builtin? value) value id))))) (else (define target (assoc id (car names))) (if (neq? target #f) (car (cdr target)) (rewrite-get id (cdr names) free))))))
fib compiled.def args: : (<object 1906113> (env (if (null? @) # (car @))))

def args: : (<object 1906311> (env (if (null? @) # (car @))))
def args: : (<object 147> (s (time)))
def args: : (<object 147> (result (fib x)))
def args: : (<object 158> (f (time)))
(fib def args: : (<object 1639726> (env (if (null? @) # (car @))))
25def args: : (<object 1639833> (env (if (null? @) # (car @))))
) is def args: : (<object 1639940> (env (if (null? @) # (car @))))
75025def args: : (<object 1640047> (env (if (null? @) # (car @))))
, def args: : (<object 1640154> (env (if (null? @) # (car @))))
1.278585def args: : (<object 1640261> (env (if (null? @) # (car @))))
 seconds.def args: : (<object 1640368> (env (if (null? @) # (car @))))

def args: : (<object 1640566> (env (if (null? @) # (car @))))
