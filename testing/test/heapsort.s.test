(define (heap items op)
    (define size (length items))

    (define (leftChild x) (+ (* 2 x) 1))
    (define (rightChild x) (+ (* 2 x) 2))
    (define (deleteExtreme)
        (define temp (getElement items 0))
        (setElement items 0 (getElement items (- size 1)))
        (setElement items (- size 1) temp)
        (set! size (- size 1))
        (heapify 0)
        temp
        )

    (define (heapify root)
        (define extreme nil)
        (define newRoot nil)

        (if (leaf? root)
            (begin
                (inspect root)
                (println "it's a leaf")
                (println "heapify level is " __level)
                (return 'ok)
                (inspect root))
            )
        
        (set! extreme (findExtremalChild root))

        (if (= extreme (getElement items root)) (return 'ok))

        (if (= extreme (getElement items (leftChild root)))
            (set! newRoot (leftChild root))
            (set! newRoot (rightChild root))
            )

        (setElement items newRoot (getElement items root))
        (setElement items root extreme)

        (heapify newRoot)
        )

    (define (findExtremalChild root)
        (define extreme nil)
        (set! extreme 
            (extremal op
                (getElement items root)
                (getElement items (leftChild root))))

        (if (>= (rightChild root) size)
            extreme
            (extremal op extreme (getElement items (rightChild root)))
            )
        )

    (define (build-heap)
        (for (define i (- size 1)) (inspect (>= i 0)) (inspect (-- i))
            (println "heapifying index " i)
            (println "buildheap level is " __level)
            (heapify i)
            (inspect r)
            (println "index " i " has been heapified")
            )
        (inspect i)
        (println "root is now " (getElement items 0))
        )

    (define (leaf? x) (>= (leftChild x) size))

    (println "about to build-heap...")
    (build-heap)
    (println "done with build-heap")
    this
    )

(define (heap-sort items op)
    (define h nil)

    (set! h (heap items op))

    ;(while (> (h 'size) 0)
    ;    (print ((h 'deleteExtreme)))
    ;    (if (> (get 'size h) 0) (print " "))
    ;    )
    ;(println "\n")
    )

(define (extremal op a b)
    (if (op a b) a b)
    )

(define a (array 3 6 3 9 4 10 5 29 4 6 0 20 25 16 88 0 31))

(println "before heapsorting: " a)
(heap-sort a >)
(println "after heapsorting:  " a)

(inspect (get* extremal 'parameters))
------------------------------------------
def args: : (<object 4801> (else #t))
def args: : (<object 4801> (__builtin __context))
def args: : (<object 4801> (__main-lib this))
def args: : (<object 4801> (nil? null?))
def args: : (<object 4801> ((valid? x) (not (null? x))))
def args: : (<object 4801> ((head x) (car x)))
def args: : (<object 4801> ((tail x) (cdr x)))
def args: : (<object 4801> ((join x y) (cons x y)))
def args: : (<object 4801> (^ expt))
def args: : (<object 4801> (** expt))
def args: : (<object 4801> ((backquote # $items) (define (helper items) (inspect items) (inspect (get (quote __context) this)) (cond ((null? items) ) ((eq? (car items) (quote ,)) (cons (eval (cadr items) #) (helper (cddr items)))) (else (cons (car items) (helper (cdr items)))))) (helper $items)))
def args: : (<object 4801> ((set! # $x y @) (define env (if (null? @) # (car @))) (set $x y env)))
def args: : (<object 4801> ((set* @) (define obj (car @)) (define fields (cdr @)) (while (valid? (cddr fields)) (set (quote obj) (obj (car fields))) (set (quote fields) (cdr fields))) (set (car fields) (cadr fields) obj)))
def args: : (<object 4801> ((get* @) (define obj (car @)) (define fields (cdr @)) (while (valid? (cdr fields)) (set (quote obj) (obj (car fields))) (set (quote fields) (cdr fields))) (get (car fields) obj)))
def args: : (<object 4801> ((for # init $fortest $increment $) (define forresult ) (while (eval $fortest #) (set (quote forresult) (evalList $ #)) (eval $increment #)) forresult))
def args: : (<object 4801> ((for-each2 # $indexVar items $) (define result #f) (while (!= items ) (set $indexVar (car items) #) (set (quote result) (evalList $ #)) (set (quote items) (cdr items))) result))
def args: : (<object 4801> ((for-each f x) (define (iter items) (cond ((null? items) ) (else (f (car items)) (iter (cdr items))))) (iter x)))
def args: : (<object 4801> ((+= # $v value) (set $v (+ (eval $v #) value) #)))
def args: : (<object 4801> ((-= # $v value) (set $v (- (eval $v #) value) #)))
def args: : (<object 4801> ((*= # $v value) (set $v (* (eval $v #) value) #)))
def args: : (<object 4801> ((/= # $v value) (set $v (/ (eval $v #) value) #)))
def args: : (<object 4801> ((++ # $v) (set $v (+ (eval $v #) 1) #)))
def args: : (<object 4801> ((-- # $v) (set $v (- (eval $v #) 1) #)))
def args: : (<object 4801> (__type type))
def args: : (<object 4801> ((type x) (if (and (eq? (__type x) (quote CONS)) (eq? (car x) (quote __object))) (get (quote __label) x) (__type x))))
def args: : (<object 4801> ((class x) (get (quote __label) x)))
def args: : (<object 4801> ((is? x y) (cond ((null? x) #f) ((not (environment? x)) (eq? (type x) y)) ((and (environment? x) (or (eq? y (quote environment)) (eq? y (quote object)))) #t) ((and (valid? (get (quote __constructor) x)) (eq? (get* x (quote __constructor) (quote name)) y)) #t) (else (and (local? (quote parent) x) (is? (get (quote parent) x) y))))))
def args: : (<object 4801> ((object? x) (and (pair? x) (eq? (car x) (quote __object)))))
def args: : (<object 4801> ((closure? x) (and (object? x) (eq? (class x) (quote closure)))))
def args: : (<object 4801> ((builtin? x) (and (object? x) (eq? (class x) (quote builtIn)))))
def args: : (<object 4801> ((error? x) (and (object? x) (eq? (class x) (quote error)))))
def args: : (<object 4801> ((environment? x) (and (object? x) (eq? (class x) (quote environment)))))
def args: : (<object 4801> (function? closure?))
def args: : (<object 4801> ((and # $) (define (iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))) (iter $)))
def args: : (<object 4801> ((or # $) (define (iter items) (cond ((null? items) #f) ((eval (car items) #) #t) (else (iter (cdr items))))) (iter $)))
def args: : (<object 4801> ((dec x) (- x 1)))
def args: : (<object 4801> ((inc x) (+ x 1)))
def args: : (<object 4801> (__display display))
def args: : (<object 4801> ((print @) (while (valid? @) (display (car @)) (set! @ (cdr @))) (quote print-done)))
def args: : (<object 4801> ((println @) (apply print @) (print "
")))
def args: : (<object 4801> ((let # $inits $) (define v ) (define e (scope this)) (set (quote __context) # e) (for-each2 v $inits (addSymbol (car v) (eval (car (cdr v)) #) e)) (evalList $ e)))
def args: : (<object 4801> ((let* # $inits $) (define v ) (define e (scope this)) (set (quote __context) # e) (for-each2 v $inits (addSymbol (car v) (eval (car (cdr v)) e) e)) (evalList $ e)))
def args: : (<object 4801> ((evalList listOfitems env) (while (valid? (cdr listOfitems)) (eval (car listOfitems) env) (set (quote listOfitems) (cdr listOfitems))) (eval (car listOfitems) env)))
def args: : (<object 4801> ((negative? n) (< n 0)))
def args: : (<object 4801> ((positive? n) (> n 0)))
def args: : (<object 4801> ((newline) (println)))
def args: : (<object 4801> (remainder %))
def args: : (<object 4801> ((append a b) (cond ((null? a) b) (else (cons (car a) (append (cdr a) b))))))
def args: : (<object 4801> ((last-pair x) (cond ((null? x) ) ((null? (cdr x)) x) (else (last-pair (cdr x))))))
def args: : (<object 4801> ((reverse x) (define (iter store rest) (cond ((null? rest) store) (else (iter (cons (car rest) store) (cdr rest))))) (iter  x)))
def args: : (<object 4801> ((map op @) (define (map1 items) (cond ((null? items) ) (else (cons (op (car items)) (map1 (cdr items)))))) (define (iter items) (cond ((null? (car items)) ) (else (cons (apply op (map car items)) (iter (map cdr items)))))) (cond ((= (length @) 1) (map1 (car @))) (else (iter @)))))
def args: : (<object 4801> (integer int))
def args: : (<object 4801> ((abs x) (if (< x 0) (- x) x)))
def args: : (<object 4801> ((even? n) (= (% n 2) 0)))
def args: : (<object 4801> ((odd? n) (= (% n 2) 1)))
def args: : (<object 4801> ((integer? x) (eq? (type x) (quote INTEGER))))
def args: : (<object 4801> ((real? x) (eq? (type x) (quote REAL))))
def args: : (<object 4801> ((number? x) (or (integer? x) (real? x))))
def args: : (<object 4801> ((string? x) (eq? (type x) (quote STRING))))
def args: : (<object 4801> ((symbol? x) (eq? (type x) (quote SYMBOL))))
def args: : (<object 4801> ((array? x) (eq? (type x) (quote ARRAY))))
def args: : (<object 4801> ((true? x) x))
def args: : (<object 4801> ((false? x) (not x)))
def args: : (<object 4801> ((literal? x) (or (null? x) (eq? x #t) (eq? x #f) (string? x) (array? x) (integer? x) (real? x) (and (pair? x) (eq? (car x) (quote quote))))))
def args: : (<object 4801> ((atom? x) (not (or (pair? x) (string? x) (array? x)))))
def args: : (<object 4801> ((car-cdr items @) (while (valid? @) (cond ((= (car @) 0) (set (quote items) (car items))) (else (set (quote items) (cdr items)))) (set (quote @) (cdr @))) items))
def args: : (<object 4801> ((caar x) (car-cdr x 0 0)))
def args: : (<object 4801> ((cadr x) (car-cdr x 1 0)))
def args: : (<object 4801> ((caddr x) (car-cdr x 1 1 0)))
def args: : (<object 4801> ((cadddr x) (car-cdr x 1 1 1 0)))
def args: : (<object 4801> ((caddddr x) (car-cdr x 1 1 1 1 0)))
def args: : (<object 4801> ((cadddddr x) (car-cdr x 1 1 1 1 1 0)))
def args: : (<object 4801> ((cddr x) (cdr (cdr x))))
def args: : (<object 4801> ((cddr x) (car-cdr x 1 1)))
def args: : (<object 4801> ((cdddr x) (car-cdr x 1 1 1)))
def args: : (<object 4801> ((cddddr x) (car-cdr x 1 1 1 1)))
def args: : (<object 4801> ((cdddddr x) (car-cdr x 1 1 1 1 1)))
def args: : (<object 4801> ((equal? a b) (cond ((null? a) (null? b)) ((pair? a) (and (pair? b) (equal? (car a) (car b)) (equal? (cdr a) (cdr b)))) ((string? a) (string-equal? a b)) ((array? a) (array-equal? a b)) (else (eq? a b)))))
def args: : (<object 4801> ((array-equal? a b) (cond ((null? a) (null? b)) ((null? b) #f) (else (and (equal? (car a) (car b)) (array-equal? (cdr a) (cdr b)))))))
def args: : (<object 4801> ((string-compare a b) (cond ((and (null? a) (null? b)) 0) ((null? a) (- 0 (ascii (getElement b 0)))) ((null? b) (ascii (getElement a 0))) (else (if (== (ascii (getElement a 0)) (ascii (getElement b 0))) (string-compare (cdr a) (cdr b)) (- (ascii (getElement a 0)) (ascii (getElement b 0))))))))
def args: : (<object 4801> ((sqrt x) (expt x 0.500000)))
def args: : (<object 4801> ((stream-car s) (car s)))
def args: : (<object 4801> ((stream-cdr s) (define scdr (cdr s)) (define scddr (cdr scdr)) (cond ((null? (car scddr)) (car scdr)) (else (set-car! scdr (apply eval scdr)) (set-car! scddr ) (car scdr)))))
def args: : (<object 4801> ((cons-stream # a $b) (list a $b #)))
def args: : (<object 4801> ((stream-null? s) (null? s)))
def args: : (<object 4801> ((code $s) $s))
def args: : (<object 4801> ((member? x items) (valid? (member x items))))
def args: : (<object 4801> ((member x items) (cond ((null? items) ) ((eq? x (car items)) items) (else (member x (cdr items))))))
def args: : (<object 4801> ((nequal? a b) (not (equal? a b))))
def args: : (<object 4801> ((getElement items @) (define __getElement (get (quote getElement) (get (quote __context) __context))) (while (valid? @) (set (quote items) (__getElement items (car @))) (set (quote @) (cdr @))) items))
def args: : (<object 4801> (__string+ string+))
def args: : (<object 4801> ((string+ str @) (while (valid? @) (set (quote str) (__string+ str (string (car @)))) (set (quote @) (cdr @))) str))
def args: : (<object 4801> (__string string))
def args: : (<object 4801> ((string x) (cond ((pair? x) (list-to-string x)) (else (__string x)))))
def args: : (<object 4801> ((list-to-string x) (define (iter z) (cond ((null? (cdr z)) (string+ (string (car z)) ")")) ((pair? (cdr z)) (string+ (string (car z)) " " (iter (cdr z)))) (else (string+ (string (car z)) " . " (string (cdr z)) ")")))) (cond ((thunk? x) (string+ "<thunk " (address x) ">")) ((closure? x) (string+ "<closure " (address x) ">")) ((error? x) (string+ "<error " (address x) ">")) ((environment? x) (string+ "<environment " (address x) ">")) ((object? x) (string+ "<object " (address x) ">")) (else (string+ "(" (iter x))))))
def args: : (<object 4801> ((thunk code environment) (define memo #f) this))
def args: : (<object 4801> ((thunk? item) (is? item (quote thunk))))
def args: : (<object 4801> ((force item) (eval (get (quote code) item) (get (quote environment) item))))
def args: : (<object 4801> ((assoc x y) (cond ((null? y) #f) ((equal? x (caar y)) (car y)) (else (assoc x (cdr y))))))
def args: : (<object 4801> ((make-assoc xs ys) (cond ((null? xs) ) (else (cons (list (car xs) (car ys)) (make-assoc (cdr xs) (cdr ys)))))))
def args: : (<object 4801> ((local? id env) (member? id (localNames env))))
def args: : (<object 4801> ((localNames env) (cadr env)))
def args: : (<object 4801> ((localValues env) (caddr env)))
def args: : (<object 4801> ((defined? id env) (not (error? (catch (eval id env))))))
def args: : (<object 4801> ((dot obj $name) (get $name obj)))
def args: : (<object 4801> ((builtinFunctions) (define vars (cadr __builtin)) (define vals (caddr __builtin)) (println "-----Builtin Functions-----") (while (valid? vars) (if (neq? (car (string (car vars))) "_") (if (builtin? (car vals)) (println "    " (car vals)))) (set! vars (cdr vars)) (set! vals (cdr vals)))))
def args: : (<object 4801> ((mainLibraryFunctions) (define vars (cadr __main-lib)) (define vals (caddr __main-lib)) (println "-----Main Library Functions-----") (while (valid? vars) (if (neq? (car (string (car vars))) "_") (if (closure? (car vals)) (println "    " (car vals)))) (set! vars (cdr vars)) (set! vals (cdr vals)))))
def args: : (<object 12468> ((heap items op) (define size (length items)) (define (leftChild x) (+ (* 2 x) 1)) (define (rightChild x) (+ (* 2 x) 2)) (define (deleteExtreme) (define temp (getElement items 0)) (setElement items 0 (getElement items (- size 1))) (setElement items (- size 1) temp) (set! size (- size 1)) (heapify 0) temp) (define (heapify root) (define extreme ) (define newRoot ) (if (leaf? root) (begin (inspect root) (println "it's a leaf") (println "heapify level is " __level) (return (quote ok)) (inspect root))) (set! extreme (findExtremalChild root)) (if (= extreme (getElement items root)) (return (quote ok))) (if (= extreme (getElement items (leftChild root))) (set! newRoot (leftChild root)) (set! newRoot (rightChild root))) (setElement items newRoot (getElement items root)) (setElement items root extreme) (heapify newRoot)) (define (findExtremalChild root) (define extreme ) (set! extreme (extremal op (getElement items root) (getElement items (leftChild root)))) (if (>= (rightChild root) size) extreme (extremal op extreme (getElement items (rightChild root))))) (define (build-heap) (for (define i (- size 1)) (inspect (>= i 0)) (inspect (-- i)) (println "heapifying index " i) (println "buildheap level is " __level) (heapify i) (inspect r) (println "index " i " has been heapified")) (inspect i) (println "root is now " (getElement items 0))) (define (leaf? x) (>= (leftChild x) size)) (println "about to build-heap...") (build-heap) (println "done with build-heap") this))
def args: : (<object 12468> ((heap-sort items op) (define h ) (set! h (heap items op))))
def args: : (<object 12468> ((extremal op a b) (if (op a b) a b)))
def args: : (<object 12468> (a (array 3 6 3 9 4 10 5 29 4 6 0 20 25 16 88 0 31)))
before heapsorting: def args: : (<object 13725> (env (if (null? @) # (car @))))
[3,6,3,9,4,10,5,29,4,6,0,20,25,16,88,0,31]def args: : (<object 13832> (env (if (null? @) # (car @))))

def args: : (<object 14030> (env (if (null? @) # (car @))))
def args: : (<object 14142> (h ))
def args: : (<object 14186> (size (length items)))
def args: : (<object 14186> ((leftChild x) (+ (* 2 x) 1)))
def args: : (<object 14186> ((rightChild x) (+ (* 2 x) 2)))
def args: : (<object 14186> ((deleteExtreme) (define temp (getElement items 0)) (setElement items 0 (getElement items (- size 1))) (setElement items (- size 1) temp) (set! size (- size 1)) (heapify 0) temp))
def args: : (<object 14186> ((heapify root) (define extreme ) (define newRoot ) (if (leaf? root) (begin (inspect root) (println "it's a leaf") (println "heapify level is " __level) (return (quote ok)) (inspect root))) (set! extreme (findExtremalChild root)) (if (= extreme (getElement items root)) (return (quote ok))) (if (= extreme (getElement items (leftChild root))) (set! newRoot (leftChild root)) (set! newRoot (rightChild root))) (setElement items newRoot (getElement items root)) (setElement items root extreme) (heapify newRoot)))
def args: : (<object 14186> ((findExtremalChild root) (define extreme ) (set! extreme (extremal op (getElement items root) (getElement items (leftChild root)))) (if (>= (rightChild root) size) extreme (extremal op extreme (getElement items (rightChild root))))))
def args: : (<object 14186> ((build-heap) (for (define i (- size 1)) (inspect (>= i 0)) (inspect (-- i)) (println "heapifying index " i) (println "buildheap level is " __level) (heapify i) (inspect r) (println "index " i " has been heapified")) (inspect i) (println "root is now " (getElement items 0))))
def args: : (<object 14186> ((leaf? x) (>= (leftChild x) size)))
about to build-heap...def args: : (<object 14499> (env (if (null? @) # (car @))))

def args: : (<object 14697> (env (if (null? @) # (car @))))
def args: : (<object 14807> (i (- size 1)))
def args: : (<object 14855> (forresult ))
(>= i 0) is #t
heapifying index def args: : (<object 15109> (env (if (null? @) # (car @))))
16def args: : (<object 15216> (env (if (null? @) # (car @))))

def args: : (<object 15414> (env (if (null? @) # (car @))))
buildheap level is def args: : (<object 15694> (env (if (null? @) # (car @))))
3def args: : (<object 15801> (env (if (null? @) # (car @))))

def args: : (<object 15999> (env (if (null? @) # (car @))))
def args: : (<object 16167> (extreme ))
def args: : (<object 16167> (newRoot ))
root is 16
it's a leafdef args: : (<object 16429> (env (if (null? @) # (car @))))

def args: : (<object 16627> (env (if (null? @) # (car @))))
heapify level is def args: : (<object 16850> (env (if (null? @) # (car @))))
4def args: : (<object 16957> (env (if (null? @) # (car @))))

def args: : (<object 17155> (env (if (null? @) # (car @))))
r is <object 17395>
             __label  : throw
                code  : undefinedVariable
               value  : "file heapsort.s,line 61: variable r is undefined"
               trace  : 

EXCEPTION: undefinedVariable
file heapsort.s,line 61: variable r is undefined
