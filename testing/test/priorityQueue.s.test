(define (priorityQueue)
    (define items)
    (define (bundle data rank next) this)
    (define (dequeue)
        (define item)
        
        (set 'item (items 'next 'data))
        (set* items 'next (items 'next 'next))
        item
        )
    (define (enqueue item rank)
        (define prefix items)
        (define suffix (items 'next))
        (define package (bundle item rank nil))

        (while (and (valid? suffix) (>= rank (suffix 'rank)))
            (set 'prefix suffix)
            (set 'suffix (suffix 'next))
            )

        (set* prefix 'next package)
        (set* package 'next suffix)
        )
    (define (peekItem) (items 'next 'data))
    (define (peekRank) (items 'next 'rank))
    (define (empty)    (null? (items 'next)))

    (set 'items (bundle nil nil nil))  ;dummy head node
    this
    )
------------------------------------------
def args: : (<object 4806> (else #t))
def args: : (<object 4806> (__builtin __context))
def args: : (<object 4806> (__main-lib this))
def args: : (<object 4806> (nil? null?))
def args: : (<object 4806> ((valid? x) (not (null? x))))
def args: : (<object 4806> ((head x) (car x)))
def args: : (<object 4806> ((tail x) (cdr x)))
def args: : (<object 4806> ((join x y) (cons x y)))
def args: : (<object 4806> (^ expt))
def args: : (<object 4806> (** expt))
def args: : (<object 4806> ((backquote # $items) (define (helper items) (inspect items) (inspect (get (quote __context) this)) (cond ((null? items) ) ((eq? (car items) (quote ,)) (cons (eval (cadr items) #) (helper (cddr items)))) (else (cons (car items) (helper (cdr items)))))) (helper $items)))
def args: : (<object 4806> ((set! # $x y @) (define env (if (null? @) # (car @))) (set $x y env)))
def args: : (<object 4806> ((set* @) (define obj (car @)) (define fields (cdr @)) (while (valid? (cddr fields)) (set (quote obj) (obj (car fields))) (set (quote fields) (cdr fields))) (set (car fields) (cadr fields) obj)))
def args: : (<object 4806> ((get* @) (define obj (car @)) (define fields (cdr @)) (while (valid? (cdr fields)) (set (quote obj) (obj (car fields))) (set (quote fields) (cdr fields))) (get (car fields) obj)))
def args: : (<object 4806> ((for # init $fortest $increment $) (define forresult ) (while (eval $fortest #) (set (quote forresult) (evalList $ #)) (eval $increment #)) forresult))
def args: : (<object 4806> ((for-each2 # $indexVar items $) (define result #f) (while (!= items ) (set $indexVar (car items) #) (set (quote result) (evalList $ #)) (set (quote items) (cdr items))) result))
def args: : (<object 4806> ((for-each f x) (define (iter items) (cond ((null? items) ) (else (f (car items)) (iter (cdr items))))) (iter x)))
def args: : (<object 4806> ((+= # $v value) (set $v (+ (eval $v #) value) #)))
def args: : (<object 4806> ((-= # $v value) (set $v (- (eval $v #) value) #)))
def args: : (<object 4806> ((*= # $v value) (set $v (* (eval $v #) value) #)))
def args: : (<object 4806> ((/= # $v value) (set $v (/ (eval $v #) value) #)))
def args: : (<object 4806> ((++ # $v) (set $v (+ (eval $v #) 1) #)))
def args: : (<object 4806> ((-- # $v) (set $v (- (eval $v #) 1) #)))
def args: : (<object 4806> (__type type))
def args: : (<object 4806> ((type x) (if (and (eq? (__type x) (quote CONS)) (eq? (car x) (quote __object))) (get (quote __label) x) (__type x))))
def args: : (<object 4806> ((class x) (get (quote __label) x)))
def args: : (<object 4806> ((is? x y) (cond ((null? x) #f) ((not (environment? x)) (eq? (type x) y)) ((and (environment? x) (or (eq? y (quote environment)) (eq? y (quote object)))) #t) ((and (valid? (get (quote __constructor) x)) (eq? (get* x (quote __constructor) (quote name)) y)) #t) (else (and (local? (quote parent) x) (is? (get (quote parent) x) y))))))
def args: : (<object 4806> ((object? x) (and (pair? x) (eq? (car x) (quote __object)))))
def args: : (<object 4806> ((closure? x) (and (object? x) (eq? (class x) (quote closure)))))
def args: : (<object 4806> ((builtin? x) (and (object? x) (eq? (class x) (quote builtIn)))))
def args: : (<object 4806> ((error? x) (and (object? x) (eq? (class x) (quote error)))))
def args: : (<object 4806> ((environment? x) (and (object? x) (eq? (class x) (quote environment)))))
def args: : (<object 4806> (function? closure?))
def args: : (<object 4806> ((and # $) (define (iter items) (cond ((null? items) #t) ((eval (car items) #) (iter (cdr items))) (else #f))) (iter $)))
def args: : (<object 4806> ((or # $) (define (iter items) (cond ((null? items) #f) ((eval (car items) #) #t) (else (iter (cdr items))))) (iter $)))
def args: : (<object 4806> ((dec x) (- x 1)))
def args: : (<object 4806> ((inc x) (+ x 1)))
def args: : (<object 4806> (__display display))
def args: : (<object 4806> ((print @) (while (valid? @) (display (car @)) (set! @ (cdr @))) (quote print-done)))
def args: : (<object 4806> ((println @) (apply print @) (print "
")))
def args: : (<object 4806> ((let # $inits $) (define v ) (define e (scope this)) (set (quote __context) # e) (for-each2 v $inits (addSymbol (car v) (eval (car (cdr v)) #) e)) (evalList $ e)))
def args: : (<object 4806> ((let* # $inits $) (define v ) (define e (scope this)) (set (quote __context) # e) (for-each2 v $inits (addSymbol (car v) (eval (car (cdr v)) e) e)) (evalList $ e)))
def args: : (<object 4806> ((evalList listOfitems env) (while (valid? (cdr listOfitems)) (eval (car listOfitems) env) (set (quote listOfitems) (cdr listOfitems))) (eval (car listOfitems) env)))
def args: : (<object 4806> ((negative? n) (< n 0)))
def args: : (<object 4806> ((positive? n) (> n 0)))
def args: : (<object 4806> ((newline) (println)))
def args: : (<object 4806> (remainder %))
def args: : (<object 4806> ((append a b) (cond ((null? a) b) (else (cons (car a) (append (cdr a) b))))))
def args: : (<object 4806> ((last-pair x) (cond ((null? x) ) ((null? (cdr x)) x) (else (last-pair (cdr x))))))
def args: : (<object 4806> ((reverse x) (define (iter store rest) (cond ((null? rest) store) (else (iter (cons (car rest) store) (cdr rest))))) (iter  x)))
def args: : (<object 4806> ((map op @) (define (map1 items) (cond ((null? items) ) (else (cons (op (car items)) (map1 (cdr items)))))) (define (iter items) (cond ((null? (car items)) ) (else (cons (apply op (map car items)) (iter (map cdr items)))))) (cond ((= (length @) 1) (map1 (car @))) (else (iter @)))))
def args: : (<object 4806> (integer int))
def args: : (<object 4806> ((abs x) (if (< x 0) (- x) x)))
def args: : (<object 4806> ((even? n) (= (% n 2) 0)))
def args: : (<object 4806> ((odd? n) (= (% n 2) 1)))
def args: : (<object 4806> ((integer? x) (eq? (type x) (quote INTEGER))))
def args: : (<object 4806> ((real? x) (eq? (type x) (quote REAL))))
def args: : (<object 4806> ((number? x) (or (integer? x) (real? x))))
def args: : (<object 4806> ((string? x) (eq? (type x) (quote STRING))))
def args: : (<object 4806> ((symbol? x) (eq? (type x) (quote SYMBOL))))
def args: : (<object 4806> ((array? x) (eq? (type x) (quote ARRAY))))
def args: : (<object 4806> ((true? x) x))
def args: : (<object 4806> ((false? x) (not x)))
def args: : (<object 4806> ((literal? x) (or (null? x) (eq? x #t) (eq? x #f) (string? x) (array? x) (integer? x) (real? x) (and (pair? x) (eq? (car x) (quote quote))))))
def args: : (<object 4806> ((atom? x) (not (or (pair? x) (string? x) (array? x)))))
def args: : (<object 4806> ((car-cdr items @) (while (valid? @) (cond ((= (car @) 0) (set (quote items) (car items))) (else (set (quote items) (cdr items)))) (set (quote @) (cdr @))) items))
def args: : (<object 4806> ((caar x) (car-cdr x 0 0)))
def args: : (<object 4806> ((cadr x) (car-cdr x 1 0)))
def args: : (<object 4806> ((caddr x) (car-cdr x 1 1 0)))
def args: : (<object 4806> ((cadddr x) (car-cdr x 1 1 1 0)))
def args: : (<object 4806> ((caddddr x) (car-cdr x 1 1 1 1 0)))
def args: : (<object 4806> ((cadddddr x) (car-cdr x 1 1 1 1 1 0)))
def args: : (<object 4806> ((cddr x) (cdr (cdr x))))
def args: : (<object 4806> ((cddr x) (car-cdr x 1 1)))
def args: : (<object 4806> ((cdddr x) (car-cdr x 1 1 1)))
def args: : (<object 4806> ((cddddr x) (car-cdr x 1 1 1 1)))
def args: : (<object 4806> ((cdddddr x) (car-cdr x 1 1 1 1 1)))
def args: : (<object 4806> ((equal? a b) (cond ((null? a) (null? b)) ((pair? a) (and (pair? b) (equal? (car a) (car b)) (equal? (cdr a) (cdr b)))) ((string? a) (string-equal? a b)) ((array? a) (array-equal? a b)) (else (eq? a b)))))
def args: : (<object 4806> ((array-equal? a b) (cond ((null? a) (null? b)) ((null? b) #f) (else (and (equal? (car a) (car b)) (array-equal? (cdr a) (cdr b)))))))
def args: : (<object 4806> ((string-compare a b) (cond ((and (null? a) (null? b)) 0) ((null? a) (- 0 (ascii (getElement b 0)))) ((null? b) (ascii (getElement a 0))) (else (if (== (ascii (getElement a 0)) (ascii (getElement b 0))) (string-compare (cdr a) (cdr b)) (- (ascii (getElement a 0)) (ascii (getElement b 0))))))))
def args: : (<object 4806> ((sqrt x) (expt x 0.500000)))
def args: : (<object 4806> ((stream-car s) (car s)))
def args: : (<object 4806> ((stream-cdr s) (define scdr (cdr s)) (define scddr (cdr scdr)) (cond ((null? (car scddr)) (car scdr)) (else (set-car! scdr (apply eval scdr)) (set-car! scddr ) (car scdr)))))
def args: : (<object 4806> ((cons-stream # a $b) (list a $b #)))
def args: : (<object 4806> ((stream-null? s) (null? s)))
def args: : (<object 4806> ((code $s) $s))
def args: : (<object 4806> ((member? x items) (valid? (member x items))))
def args: : (<object 4806> ((member x items) (cond ((null? items) ) ((eq? x (car items)) items) (else (member x (cdr items))))))
def args: : (<object 4806> ((nequal? a b) (not (equal? a b))))
def args: : (<object 4806> ((getElement items @) (define __getElement (get (quote getElement) (get (quote __context) __context))) (while (valid? @) (set (quote items) (__getElement items (car @))) (set (quote @) (cdr @))) items))
def args: : (<object 4806> (__string+ string+))
def args: : (<object 4806> ((string+ str @) (while (valid? @) (set (quote str) (__string+ str (string (car @)))) (set (quote @) (cdr @))) str))
def args: : (<object 4806> (__string string))
def args: : (<object 4806> ((string x) (cond ((pair? x) (list-to-string x)) (else (__string x)))))
def args: : (<object 4806> ((list-to-string x) (define (iter z) (cond ((null? (cdr z)) (string+ (string (car z)) ")")) ((pair? (cdr z)) (string+ (string (car z)) " " (iter (cdr z)))) (else (string+ (string (car z)) " . " (string (cdr z)) ")")))) (cond ((thunk? x) (string+ "<thunk " (address x) ">")) ((closure? x) (string+ "<closure " (address x) ">")) ((error? x) (string+ "<error " (address x) ">")) ((environment? x) (string+ "<environment " (address x) ">")) ((object? x) (string+ "<object " (address x) ">")) (else (string+ "(" (iter x))))))
def args: : (<object 4806> ((thunk code environment) (define memo #f) this))
def args: : (<object 4806> ((thunk? item) (is? item (quote thunk))))
def args: : (<object 4806> ((force item) (eval (get (quote code) item) (get (quote environment) item))))
def args: : (<object 4806> ((assoc x y) (cond ((null? y) #f) ((equal? x (caar y)) (car y)) (else (assoc x (cdr y))))))
def args: : (<object 4806> ((make-assoc xs ys) (cond ((null? xs) ) (else (cons (list (car xs) (car ys)) (make-assoc (cdr xs) (cdr ys)))))))
def args: : (<object 4806> ((local? id env) (member? id (localNames env))))
def args: : (<object 4806> ((localNames env) (cadr env)))
def args: : (<object 4806> ((localValues env) (caddr env)))
def args: : (<object 4806> ((defined? id env) (not (error? (catch (eval id env))))))
def args: : (<object 4806> ((dot obj $name) (get $name obj)))
def args: : (<object 4806> ((builtinFunctions) (define vars (cadr __builtin)) (define vals (caddr __builtin)) (println "-----Builtin Functions-----") (while (valid? vars) (if (neq? (car (string (car vars))) "_") (if (builtin? (car vals)) (println "    " (car vals)))) (set! vars (cdr vars)) (set! vals (cdr vals)))))
def args: : (<object 4806> ((mainLibraryFunctions) (define vars (cadr __main-lib)) (define vals (caddr __main-lib)) (println "-----Main Library Functions-----") (while (valid? vars) (if (neq? (car (string (car vars))) "_") (if (closure? (car vals)) (println "    " (car vals)))) (set! vars (cdr vars)) (set! vals (cdr vals)))))
def args: : (<object 12473> ((priorityQueue) (define items) (define (bundle data rank next) this) (define (dequeue) (define item) (set (quote item) (items (quote next) (quote data))) (set* items (quote next) (items (quote next) (quote next))) item) (define (enqueue item rank) (define prefix items) (define suffix (items (quote next))) (define package (bundle item rank )) (while (and (valid? suffix) (>= rank (suffix (quote rank)))) (set (quote prefix) suffix) (set (quote suffix) (suffix (quote next)))) (set* prefix (quote next) package) (set* package (quote next) suffix)) (define (peekItem) (items (quote next) (quote data))) (define (peekRank) (items (quote next) (quote rank))) (define (empty) (null? (items (quote next)))) (set (quote items) (bundle   )) this))
