(define (until # $test $)
    (println "forcing test")
    (while (not (eval $test #))
        (evalList $ #)
        )
    )
(define i 0)
(println "until as variadic function")
(until (= i 10)
    (print "i is " i "\n")
    (++ i)
    )
(println "user while that returns from global scope")
(until #f
    (println "returning!")
    (return 0)
    )

(print "you should not be seeing this message\n")
------------------------------------------
until as variadic function
forcing test
i is 0
i is 1
i is 2
i is 3
i is 4
i is 5
i is 6
i is 7
i is 8
i is 9
user while that returns from global scope
forcing test
returning!
EXCEPTION: return
<thunk 20709>
