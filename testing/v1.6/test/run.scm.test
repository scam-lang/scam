(define port)
(define oldPort (getOutputPort))
(define remarks #f)
(define topEnv this)

(define (logln port @)
    (define oldPort (setPort port))
    (apply println @)
    (setPort oldPort)
    )
(define (log port @)
    (define oldPort (setPort port))
    (apply print @)
    (setPort oldPort)
    )

(define (run exercises out)

    (define target nil)
    (define mytarget nil)
    (define exercise nil)
    (define (run-items items)
        (define result nil)
        (if (valid? items)
            (begin
                (set! target (car items))
                (set! exercise (string target))
                (set! exercise (cdddr exercise))
                (set! mytarget 
                    (symbol (string+ "jcl-run" exercise))
                    )
                (log oldPort "initiating exercise ")
                (log oldPort target)
                (logln oldPort "...")
                (println "############ exercise " exercise " ############\n")
                (close (getOutputPort))
                (set! port (open out 'append))
                (setPort port)
                (cond
                    ((local? (__id target) topEnv)
                    (println "#### your explanations and tests...\n")
                    ;(set! result
                        ;(ignore-errors (lambda () ((eval target topEnv)))))
                    (set! result (catch ((eval target topEnv))))
                    (if (error? result)
                        (println "\n" target " failed: " (dot result value)))
                    (println)
                    (if (local? (__id mytarget) topEnv)
                        (begin
                            (println "#### your code and my tests...\n")
                            ((eval mytarget topEnv))
                            (println)
                            )
                        )
                    (println)
                    (if remarks
                        (begin
                            (println "#### exercise " exercise " remarks:")
                            (println "####")
                            (println "####")
                            )
                        )
                    )
                    (else
                        (println "####")
                        (println "#### exercise " exercise " not implemented")
                        )
                    )
                (println "####\n")
                (log oldPort "exercise ")
                (log oldPort (car items))
                (logln oldPort " completed.")
                (run-items (cdr items))
                )
            )
        )

    (set! port (open out 'write))
    (setPort port)

    (logln oldPort "running the exercises...")

    (run-items exercises)

    (logln oldPort "exercises completed...")
    (reset)
    )

(define (reset)
    (setPort oldPort)
    (close port)
    )
------------------------------------------
