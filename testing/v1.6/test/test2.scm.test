(include "reflection.lib")
(include "assign2.scm")

(println "problem 1...\n")
(if (defined? 'run1 this)
    (begin
        (inspect (+ 2 3))
        (println "    [it should be 5]")
        (inspect (+ (polar 1 .707) (polar 1 .707)))
        (println "    [it should be magnitude 2 and angle .707]")
        )
    (println "problem 1 not implemented\n")
    )

(println "problem 2...\n")
(if (defined? 'run2 this)
    (begin
        (inspect add)
        (println)
        (inspect numbers)
        (println)
        (inspect (translate (add two three)))
        (println "    [it should be five]\n")
        )
    (println "problem 2 not implemented\n")
    )
    

(println "problem 3...\n")
(if (defined? 'run3 this)
    (begin
        (inspect (define->lambda '(define (plus a b) (+ a b))))
        (println "    [it should be (define plus (lambda (a b) (+ a b)))]\n")
        )
    (println "problem 3 not implemented\n")
    )

(println "problem 4...\n")
(if (defined? 'run4 this)
    (begin
        (inspect ((extractor 1 1 0) '(1 2 3 4 5)))
        (println "    [it should be 3]")
        )
    (println "problem 4 not implemented\n")
    )

(println "problem 5...\n")
(if (defined? 'run5 this)
    (begin
        (inspect (matrix-*-matrix '((1 2) (3 4))'((1 0) (0 1))))
        (println "    [it should be ((1 2) (3 4))]\n")
        )
    (println "problem 5 not implemented\n")
    )

(println "problem 6...\n")
(if (defined? 'run6 this)
    (begin
        (inspect (infix->postfix '(2 + 3 * x ^ 5 + a)))
        (println "    [it should be (2 3 x 5 ^ * a + +) or equivalent]\n")
        )
    (println "problem 6 not implemented\n")
    )

(println "problem 7...\n")
(if (defined? 'run7 this)
    (begin
        (inspect (powerSet '(a b)))
        (println "    [it should be (() (a) (b) (a b))]")
        )
    (println "problem 7 not implemented\n")
    )

(println "problem 8...\n")
(if (defined? 'run8 this)
    (begin
        (inspect
            (depthStat (treeNode 1 (treeNode 1 nil nil) (treeNode 1 nil nil)))
            )
        (println "    [it should be 1.0]\n")
        )
    (println "problem 8 not implemented\n")
    )

(println "problem 9...\n")
(if (defined? 'run9 this)
    (begin
        (inspect (+ 2 3))
        (println "    [it should be 5]\n")
        (inspect ((dot (+ (Polar 1 .707) (Polar 1 .707)) toString)))
        (println "    [it should be magnitude 2 and angle .707]\n")
        (inspect ((dot (+ (Rectangular 1 1) (Integer 1)) toString)))
        (println "    [it should be real 2 and imaginary 1]\n")
        (inspect ((dot (+ (Real 2.3) (Integer 1)) value)))
        (println "    [it should be real 3.3]\n")
        )
    (println "problem 9 not implemented\n")
    )

(println "problem 10...\n")
(if (defined? 'run10 this)
    (begin
        (inspect ((dot (coerce (Integer 5) 'Real) value)))
        (println "[it should be real 5.0]\n")
        )
    (println "problem 10 not implemented]\n")
    )
------------------------------------------
(+ (polar 1 0.707000) (polar 1 0.707000)) is (polar 2.000000 0.707000)
(+ (polar 3 1.423000) (polar 7 2.453000)) is (polar 8.923138 2.160624)
(+ (rectangular 3 1.423000) (rectangular 7 2.453000)) is (rectangular 10 3.876000)
(+ (polar 3 1.423000) 0) is (polar 3.000000 1.423000)
(+ (rectangular 3 1.423000) 0) is (rectangular 3 1.423000)
(add two three) is five
(add zero five) is five
(add five zero) is five
(add nine nine) is (x x x x x x x x x x x x x x x x x x)
(define->lambda (quote (define (plus a b) (+ a b)))) is (define plus (lambda (a b) (+ a b)))
((extractor 0 1) (quote ((1 2) 3))) is (2)
(powerSet (quote (a b c d))) is ( (a) (b) (c) (d) (a b) (a c) (a d) (b c) (b d) (c d) (a b c) (a b d) (a c d) (b c d) (a b c d))
t is (binaryTree 2 (binaryTree 1  (binaryTree 4  )) (binaryTree 0  ))
depths is (1 2)
sum is 3
count is 2
(depthStat t) is 1.500000
(((((Polar 3 1.423000) (quote add)) (Polar 7 2.453000)) (quote toString))) is (polar 8.923138 2.160624)
problem 1...

(+ 2 3) is 5
    [it should be 5]
(+ (polar 1 0.707000) (polar 1 0.707000)) is (polar 2.000000 0.707000)
    [it should be magnitude 2 and angle .707]
problem 2...

add is <function add(a b)>

numbers is (( zero) ((x) one) ((x x) two) ((x x x) three) ((x x x x) four) ((x x x x x) five) ((x x x x x x) six) ((x x x x x x x) seven) ((x x x x x x x x) eight) ((x x x x x x x x x) nine))

(translate (add two three)) is five
    [it should be five]

problem 3...

(define->lambda (quote (define (plus a b) (+ a b)))) is (define plus (lambda (a b) (+ a b)))
    [it should be (define plus (lambda (a b) (+ a b)))]

problem 4...

((extractor 1 1 0) (quote (1 2 3 4 5))) is 3
    [it should be 3]
problem 5...

problem 5 not implemented

problem 6...

problem 6 not implemented

problem 7...

(powerSet (quote (a b))) is ( (a) (b) (a b))
    [it should be (() (a) (b) (a b))]
problem 8...

depths is (1 1)
sum is 2
count is 2
(depthStat (treeNode 1 (treeNode 1  ) (treeNode 1  ))) is 1.000000
    [it should be 1.0]

problem 9...

(+ 2 3) is 5
    [it should be 5]

((dot (+ (Polar 1 0.707000) (Polar 1 0.707000)) toString)) is (polar 2.000000 0.707000)
    [it should be magnitude 2 and angle .707]

((dot (+ (Rectangular 1 1) (Integer 1)) toString)) is (rectangular 2 1)
    [it should be real 2 and imaginary 1]

((dot (+ (Real 2.300000) (Integer 1)) value)) is 3.300000
    [it should be real 3.3]

problem 10...

problem 10 not implemented]

