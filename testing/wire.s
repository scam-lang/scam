(define (wire)
    (define oldSet set)
    (define value 0)  ;initial (nonsensical) value
    (define downstream nil)
    (define (register object)
        (println "registering " object)
        (oldSet 'downstream (cons object downstream))
        ((object 'recalculate))
        )
    (define (inform object)
        (inspect (type object))
        (inspect (object 'recalculate))
        (define r (object 'recalculate))
        (inspect r)
        ((r))
        )
    (define (set newValue)
        (define d)
        (println "setting " value " to " newValue)
        (if (!= newValue value)
            (begin
                (println "informing")
                (oldSet 'value newValue)
                (inspect downstream)
                (if (valid? downstream)
                    (inform (car d))
                    )
                ;(map inform downstream)
                )
            )
        )
    (define (get) value)

    this
    )

