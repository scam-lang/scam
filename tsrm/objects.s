(include "reflection.lib")

(define (square x)
    (* x x)
    )

(pp square)
(println "square's formal parameters are: " (get 'parameters square))

(define (person)
    (define name)
    (define age)
    this
    )

(define p (person))

(set 'name "Boris" p)
(set 'age 33 p)
(inspect (p 'name))
(inspect (p 'age))
(define (person name age)
    (define (birthday)
        (println "Happy Birthday, " name "!")
        (++ age)
        )
    this
    )
    
(define p (person "Boris" 33))
((p 'birthday))
(inspect (p 'age))
(define p (person "betty" 19))
(inspect (type p))

(define p (person "veronica" 20))
(inspect (p '__constructor 'name))
(inspect is?)
(inspect (class p))
(inspect (object? p))
(if (and (eq? (type p) 'environment)
         (eq? (p '__constructor 'name) 'person))
    (println 'person!)
    (println 'not-a-person!)
    )
(inspect p)
(if (is? p 'person)
    (println 'person!)
    (println 'not-a-person!)
    )

(inspect (is? 3 'INTEGER))

(inspect (is? 3 'INTEGER))
(inspect (is? 3.4 'REAL))
(inspect (is? "hello" 'STRING))
(inspect (is? 'blue 'SYMBOL))
(inspect (is? (list 1 2 3) 'CONS))
(inspect (is? (array "a" "b" "c") 'ARRAY))
(inspect (is? (person 'veronica 20) 'object))
(inspect (is? (person 'veronica 20) 'environment))
(define x (catch (1)))
(inspect (is? x 'error))
(inspect (is? x 'environment))
(inspect (is? x 'object))
(inspect (is? this 'environment))

(define (person name age)
    (define (birthday)
        (println "Happy Birthday, " name "!")
        (++ age)
        )
    (define (toString)
        (string+ name " (age " age ")")
        )
    this
    )

(define p (person "boris" 33))
(println p)
(define display 
    (lambda (item)
        (if (and (object? item) (local? 'toString item))
            (__display ((item 'toString)))
            (__display item)
            )
        )
    )
(define print (clone print))
(define println (clone println))
(println p)
(set 'age 34 p)
(inspect (get* p 'age))
(println p)
(define (node value next) this)
(define n (node 'a (node 'b (node 'c nil))))
(inspect (get* n 'next 'next 'value))
(inspect (n 'next 'next 'value))
